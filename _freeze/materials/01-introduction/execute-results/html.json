{
  "hash": "06b5172eac1272cc2a5ca2668b9df1bb",
  "result": {
    "markdown": "---\ntitle: \"\\0\"\nformat: \n  revealjs:\n    css: style.css\n    preview-links: auto\n    filters: \n      - filter.lua\neditor: visual\nfooter: \"[Introduction to Text Mining](https://mattfarrow1.github.io/apra-intro-to-text-mining/)\"\ntitle-slide-attributes:\n    data-background-image: \"/materials/slide templates/Slide1.png\"\n    data-background-size: contain\n    data-background-opacity: \"1\"\nexecute:\n  freeze: auto\n---\n\n\n# Overall Goals\n\n-   Into to Text Mining\n-   Keyword searches in Excel\n-   Getting started with R\n-   Text mining in R\n-   Text mining in Python\n\n\n::: {.cell}\n\n:::\n\n\n## Poll\n\n1.  What do you think of when I say text mining?\n2.  How much experience do you have with coding languages like R or Python?\n3.  What types of things are you most interested in? (keywords, sentiment, ngrams, word clouds...)\n\n# Intro to Text Mining {background-image=\"/materials/slide templates/Slide3.png\" background-size=\"contain\"}\n\n## What is text mining?\n\nText mining is the process of extracting information and insights from unstructured text.\n\n## Terms to Know\n\n-   **Natural Language**: A natural language, as opposed to an artificially created language such as R or Python, develops gradually and often without thought, over time. (*Examples include English or Italian.*)\n-   **Natural Language Processing (NLP)**: refers to the creation and use of computational power in order to process content in natural language.\n\n## Terms to Know\n\n-   **Segmentation/Tokenization**: the process of splitting apart pieces of language. *Sentence segmentation* is the process of breaking sentences apart using tokenizers to examine punctuation, abbreviations, and capitalization. *Word tokenization* involves breaking out the individual words of a sentence.\n\n## Terms to Know\n\n-   **Text Normalization**: involves standardizing text prior to analysis. Examples include the expansion of contractions (don't -\\> do not), removal of stop words (of, and, it), correcting misspellings, and stemming (if required)\n\n## Terms to Know\n\n-   **Term Frequency**: measures how often a term appears in a document.\n-   **Document Frequency**: measures how often a term appears in a corpus of documents.\n\n## Terms to Know\n\n-   **Inverse Document Frequency**: a number computed by dividing the total number of documents in the corpus by the number of documents containing the target term and applying a log scale.\n-   **TF-IDF**: \"Term Frequency-Inverse Document Frequency\". Higher term frequency and a lower document frequency leads to a higher TF-IDF.\n\n## Levels of Analysis\n\n-   **Lexical Analysis**: The most basic form of NLP, lexical analysis is focused on analyzing individual words.\n-   **Syntactic Analysis**: concerned with processing the grammar of written words.\n-   **Semantic Analysis**: builds on lexical and syntactic analyses in order to understand the meanings of words.\n-   **Discourse Analysis**: Understanding inferences in language is the domain of discourse analysis.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}