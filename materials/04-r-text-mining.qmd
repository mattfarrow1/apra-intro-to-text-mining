---
title: "\0"
format: 
  revealjs:
    css: ["theme/theme.css"]
    theme: simple
    preview-links: auto
    code-line-numbers: true
    filters: 
      - filter.lua
    footer: "[Introduction to Text Mining](https://mattfarrow1.github.io/apra-intro-to-text-mining/)"
    title-slide-attributes:
      data-background-image: "/materials/slide templates/Slide1.png"
      data-background-size: contain
      data-background-opacity: "1"
editor: visual
---

# Visualize the Data

## Why Visualize?

-   Gives us a sense of the data
-   See the distribution of the data
-   Raise questions to explore
-   Help shape your process

## Distribution of Ratings

```{r echo=FALSE, message=FALSE}
library(tidyverse)
library(tidytext)
library(wordcloud)

df <- read_csv("DisneylandReviews.csv")

df <- df %>% 
  mutate(Branch = case_match(Branch, 
                             "Disneyland_California" ~ "California",
                             "Disneyland_HongKong" ~ "Hong Kong",
                             "Disneyland_Paris" ~ "Paris")) |> 
  rename("Park" = Branch)
```

```{r}
#| echo: true
#| output-location: column

df |> 
  ggplot(aes(Rating)) +
  geom_bar()
```

## Distribution of Ratings

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "4-6"

df |> 
  ggplot(aes(Rating)) +
  geom_bar() +
  labs(title = "Distribution of Ratings",
       x = "Rating",
       y = "Count")
```

## Distribution of Ratings

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "3"

df |> 
  ggplot(aes(Rating)) +
  geom_bar(fill = "steelblue", color = "black") +
  labs(title = "Distribution of Ratings",
       x = "Rating",
       y = "Count")
```

## Distribution of Ratings

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "7"

df |> 
  ggplot(aes(Rating)) +
  geom_bar(fill = "steelblue", color = "black") +
  labs(title = "Distribution of Ratings",
       x = "Rating",
       y = "Count") +
  theme_minimal()
```

## Distribution of Ratings

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "7"

df |> 
  ggplot(aes(Rating)) +
  geom_bar(fill = "steelblue", color = "black") +
  labs(title = "Distribution of Ratings",
       x = "Rating",
       y = "Count") +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal()
```

::: {.notes}
Are there any thoughts or questions this raises?
:::

## Ratings by Park

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "2-3,5"

df |> 
  ggplot(aes(Rating, fill = Park)) +
  geom_bar(color = "black") +
  labs(title = "Distribution of Ratings by Park",
       x = "Rating",
       y = "Count",
       fill = "Park") +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal()
```

## Ratings by Park

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "10"

df |> 
  ggplot(aes(Rating, fill = Park)) +
  geom_bar(color = "black") +
  labs(title = "Distribution of Ratings by Park",
       x = "Rating",
       y = "Count",
       fill = "Park") +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  theme(legend.position = "bottom")
```

## Ratings Over Time

What if we wanted to look at the park ratings over time? What would we need to do?

- Make sure `Year_Month` is a date
- Group by `Park`
- Count ratings per year

## Ratings Over Time

```{r}
#| echo: true
#| output-location: column

df |> 
  filter(Year_Month != "missing") |> 
  mutate(Year_Month = ym(Year_Month),
         Year = year(Year_Month),
         Month = month(Year_Month)) |> 
  group_by(Park) |> 
  count(Year) |> 
  rename(Ratings = n)
```

## Ratings Over Time

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "9-10"

df |> 
  filter(Year_Month != "missing") |> 
  mutate(Year_Month = ym(Year_Month),
         Year = year(Year_Month),
         Month = month(Year_Month)) |> 
  group_by(Park) |> 
  count(Year) |> 
  rename(Ratings = n) |> 
  ggplot(aes(Year, Ratings, color = Park)) +
  geom_line()
```

## Ratings Over Time

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "11-12"

df |> 
  filter(Year_Month != "missing") |> 
  mutate(Year_Month = ym(Year_Month),
         Year = year(Year_Month),
         Month = month(Year_Month)) |> 
  group_by(Park) |> 
  count(Year) |> 
  rename(Ratings = n) |> 
  ggplot(aes(Year, Ratings, color = Park)) +
  geom_line() +
  labs(title = "Ratings by Park per Year",
       x = "Year",
       y = "Ratings")
```

## Ratings Over Time

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "14-24"

df |> 
  filter(Year_Month != "missing") |> 
  mutate(Year_Month = ym(Year_Month),
         Year = year(Year_Month),
         Month = month(Year_Month)) |> 
  group_by(Park) |> 
  count(Year) |> 
  rename(Ratings = n) |> 
  ggplot(aes(Year, Ratings, color = Park)) +
  geom_line() +
  labs(title = "Ratings by Park per Year",
       x = "Year",
       y = "Ratings") +
    scale_x_continuous(breaks = c(2010,
                                  2011,
                                  2012,
                                  2013,
                                  2014,
                                  2015,
                                  2016,
                                  2017,
                                  2018,
                                  2019,
                                  2020))
```

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "25"

df |> 
  filter(Year_Month != "missing") |> 
  mutate(Year_Month = ym(Year_Month),
         Year = year(Year_Month),
         Month = month(Year_Month)) |> 
  group_by(Park) |> 
  count(Year) |> 
  rename(Ratings = n) |> 
  ggplot(aes(Year, Ratings, color = Park)) +
  geom_line() +
  labs(title = "Ratings by Park per Year",
       x = "Year",
       y = "Ratings") +
    scale_x_continuous(breaks = c(2010,
                                  2011,
                                  2012,
                                  2013,
                                  2014,
                                  2015,
                                  2016,
                                  2017,
                                  2018,
                                  2019,
                                  2020)) +
  ggthemes::theme_hc()
```

## Ratings Over Time

```{r}
#| echo: true
#| output-location: column

df |> 
  filter(Year_Month != "missing",
         Rating < 4) |> 
  mutate(Year_Month = ym(Year_Month),
         Year = year(Year_Month)) |> 
  group_by(Park, Year_Month) |> 
  # summarise(avg_rating = mean(Rating, na.rm = TRUE)) |> 
  ggplot(aes(x = Year_Month, y = Park)) +
  ggridges::geom_density_ridges(rel_min_height = 0.01,
                                scale = 1.5) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  labs(title = "Distribution of Ratings by Park",
       x = "",
       y = "") +
  theme_minimal()
```

# Sample Prep

## Sample Review

```{r}
#| echo: true
#| output-location: column

df$Review_Text[15]
```

## Convert it to a tibble

```{r}
#| echo: true
#| output-location: column

sample <- tibble(line = 1, text = df$Review_Text[15])
sample
```

::: aside
[What is a tibble?](https://tibble.tidyverse.org/reference/tibble.html)
:::

## Unnest Tokens

> "This place is HUGE! Definately need more than one day..."

<br>

```{r}
#| echo: true
#| output-location: column

tidy_sample <- sample |> 
  unnest_tokens(word, text)

head(tidy_sample)
```

## Advantages of `unnest_tokens`

- splits text into one word/token per row along with the original line number
- takes care of converting to lowercase
- removes punctuation

## Word Count

```{r}
#| echo: true
#| output-location: column

tidy_sample |> 
  count(word, sort = TRUE) |> 
  head()
```

## Stop Words

```{r}
head(stop_words)
```

## Word Count w/o Stop Words

```{r}
#| echo: true
#| output-location: column

# Word count without stop words
tidy_sample |> 
  anti_join(stop_words) |> 
  count(word, sort = TRUE) |> 
  head()
```

## `anti_join`

> An anti_join return all rows from the left table where there are not matching values in the right table, keeping just columns from the left table.

![](https://psyteachr.github.io/glossary/images/joins/anti_join.png)

::: aside
[Source](https://psyteachr.github.io/ads-v1/joins.html#anti_join)
:::

# Processing the Data

## Number Each Review

```{r}
#| output-location: fragment

# Number each review for each park
reviews <- df |>
  group_by(Park) |>
  mutate(linenumber = row_number()) |> 
  ungroup() |> 
  select(Park, linenumber, text = Review_Text) |> 
  arrange(Park, linenumber)

head(reviews)
```

## Unnest Tokens & Remove Stop Words

```{r}
#| output-location: fragment

# Unnest tokens and remove stop words
tidy_reviews <- reviews |> 
  unnest_tokens(word, text) |> 
  anti_join(stop_words)

head(tidy_reviews)
```

## Word Counts

```{r}
#| output-location: fragment

# Perform word count
tidy_reviews |> 
  count(word, sort = TRUE) |> 
  head()
```

## Word Clouds

```{r}
#| output-location: fragment
tidy_reviews |>
  anti_join(stop_words) |>
  count(word) |>
  with(wordcloud(word, n, max.words = 100))
```

## N-Grams

-   A continuous sequence of `n` words
-   Can be used 'as is', or run through a stemmer to get morphemes
-   Offers greater context than single words

## Bigrams (prep)

```{r}
#| output-location: fragment

# Unnest into bigrams
tidy_bigrams <- reviews |> 
  unnest_tokens(bigram, text, token = "ngrams", n = 2) |> 
  filter(!is.na(bigram))

# Separate words
tidy_bigrams <- tidy_bigrams |>
  separate(bigram, c("word1", "word2"), sep = " ")

# Remove stop words
tidy_bigrams <- tidy_bigrams |>
  filter(!word1 %in% stop_words$word) |>
  filter(!word2 %in% stop_words$word)

# Reunite terms
tidy_bigrams <- tidy_bigrams |>
  unite(bigram, word1, word2, sep = " ")
```

## Bigrams

```{r}
#| output-location: fragment

tidy_bigrams |> 
  group_by(Park) |> 
  count(bigram) |> 
  arrange(desc(n)) |> 
  head()
```

## Word & Document Frequencies

## Sentiment Analysis {.smaller}

An introduction using the 'joy' sentiment.

```{r}
#| output-location: fragment

# Get 'joy' sentiment
nrc_joy <- tidytext::get_sentiments("nrc")
nrc_joy <- nrc_joy |> 
  filter(sentiment == "joy")

head(nrc_joy)
```

## Sentiment Analysis {.smaller}

```{r}
#| output-location: fragment

# Most common 'joy' words in the reviews
tidy_reviews |>
  inner_join(nrc_joy) |>
  count(word, sort = TRUE) |> 
  head()
```

## Sentiment Analysis {.smaller}

```{r}
#| output-location: fragment

tidy_reviews_sentiment <- tidy_reviews |>
  inner_join(get_sentiments("bing")) |>
  count(Park, index = linenumber %/% 80, sentiment) |>
  pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) |>
  mutate(sentiment = positive - negative)

head(tidy_reviews_sentiment)
```

## Sentiment Analysis {.smaller}

```{r}
#| output-location: fragment

ggplot(tidy_reviews_sentiment, aes(index, sentiment, fill = Park)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ Park, ncol = 1, scales = "free_x") +
  labs(title = "Sentiment Analysis by Park") +
  theme_minimal()
```

## Topic Modeling
