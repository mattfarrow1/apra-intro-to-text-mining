---
title: "\0"
format: 
  revealjs:
    css: ["theme/theme.css"]
    theme: simple
    preview-links: auto
    code-line-numbers: true
    filters: 
      - filter.lua
    footer: "[Introduction to Text Mining](https://mattfarrow1.github.io/apra-intro-to-text-mining/)"
    title-slide-attributes:
      data-background-image: "/materials/slide templates/Slide1.png"
      data-background-size: contain
      data-background-opacity: "1"
editor: visual
---

# Why R {background-image="/materials/slide templates/Slide3.png" background-size="contain"}

## R vs. Python

::: columns
::: {.column width="50%"}
![](images/r-logo.png){fig-align="center" width="148"}
:::

::: {.column width="50%"}
![](images/python-logo.png){fig-align="center" width="400"}
:::
:::

::: notes
R is a programming language started by professors Ross Ihaka and Robert Gentleman as a programming language to teach introductory statistics at the University of Auckland. It was developed in the early 1990's and open sourced in 1995.

For the purposes of this workshop, there are no significant differences in R vs. Python other than the language and packages/libraries used. I chose to start with R because that's where I'm most comfortable, it's the language that I see Apra promoting, and the community is incredibly welcoming and diverse.
:::

## Why RStudio/Posit?

-   RStudio became Posit in July 2022
-   No need for attendees to install anything
-   Everything in one place
-   Multiple language support

## RStudio IDE

> RStudio is an integrated development environment (IDE) for R and Python. It includes a console, syntax-highlighting editor that supports direct code execution, and tools for plotting, history, debugging, and workspace management. RStudio is available in open source and commercial editions and runs on the desktop (Windows, Mac, and Linux).

::: aside
Source: [Posit](https://posit.co/products/open-source/rstudio/)
:::

##  {background-image="/materials/images/rstudio-clean.png" background-size="contain"}

##  {background-image="/materials/images/rstudio-annotated.png" background-size="contain"}

# Packages

## What are packages?

-   Libraries of code
-   Expand the "base R" code
-   For almost anything you need
-   Beware of relying too heavily on niche packages

## Example packages

| Package        | Description                         |
|----------------|-------------------------------------|
| `DBI`          | Connect to databases                |
| `googlesheets` | Access data in Google Sheets        |
| `janitor`      | Clean up data                       |
| `openxlsx`     | Read, write, and edit `.xlsx` files |
| `shiny`        | Interactive widgets                 |

## Installing and using packages

Installing packages only needs to be done once.

``` r
install.packages("DBI")
```

Packages need to be loaded each time you use them.

``` r
library(DBI)
DBI::dbConnect()
```

Beware of dependencies.

# The `tidyverse` {.smaller}

![](images/tidyverse-logo.png){fig-align="center" height="200"}

> The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.

<https://www.tidyverse.org>

## The `tidyverse` benefits

-   Easier to understand for new users
-   Packages all work together
-   Covers most frequent use cases
-   Can "pipe" instructions together

## An aside on piping

-   **%\>%** is the traditional method that came from the \`magrittr\` package

-   **\|\>** the "native" pipe that was introduced to R in version 4.1

-   Both work by 'piping' information from the left hand side (LHS) to the right hand side (RHS)

## Community {.smaller}

![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/e4a11b1f-f235-461f-ab73-ce6128c59e49_rw_1920.png?h=a34a4173c717bfbc600a8682d419288e){fig-align="center" height="500"}

::: aside
"[Artwork by \@allison_horst.](https://allisonhorst.com)"
:::

## `tidyverse` packages {.smaller}

![](images/tidyverse.png){fig-align="center" height="400"}

::: aside
Source: [RStudio Education](https://education.rstudio.com)
:::

## `dplyr` functions {.smaller}

-   `mutate()` create variables (columns)
-   `select()` subset variables
-   `filter()` subset observations (rows) based on criteria
-   `summarise()` reduces multiple observations down to a single summary
-   `arrange()` change the ordering of observations

## `dplyr` vs 'base R'

![](images/dplyr-vs-base-r.png){fig-align="center" height="350"}

::: aside
Source: [dplyr base R](https://dplyr.tidyverse.org/articles/base.html)
:::

# Intro to `dplyr`

## Posit Cloud

::: callout-tip
Everything in this workshop can be done through the virtual project. Scan the QR code or visit the URL to get started.
:::

<br>

<https://posit.cloud/content/6215314>

{{< qrcode https://posit.cloud/content/6215314 >}}

## Open the file

`r fontawesome::fa("laptop-code", "black")` Open `03-intro-to-r/01-intro.R` in RStudio

![](https://allisonhorst.github.io/palmerpenguins/logo.png){fig-align="center" height="350"}

::: aside
Source: [Allison Horst](https://allisonhorst.github.io/palmerpenguins/)
:::

## Running the code

To run the code for this workshop, simply click on the row with your code, or select it, and press **Ctrl/⌘ + Enter.**

::: aside
If you ever want to clear out your results and start fresh, go to *Session ➔ Restart R*
:::

## Examine the data {.smaller}

::: callout-note
`r fontawesome::fa("location-pin", "red")`   Code begins in the section labeled **Setup**
:::

```{r echo=FALSE, message=FALSE}
library(tidyverse)
library(palmerpenguins)
library(kableExtra)
```

::: callout-note
`r fontawesome::fa("location-pin", "red")`   Code begins in the section labeled **Examine the Data**
:::

```{r}
#| echo: true
# Load libraries
#| output-location: fragment
library(tidyverse)
library(palmerpenguins)

head(palmerpenguins::penguins)
```

## Column names

Sometimes it is nice to remind yourself of the names of your columns, or to be able to refer to them by their position.

```{r}
#| echo: true
#| output-location: fragment
colnames(penguins)
```

## Examining the data with `dplyr` {.smaller}

`dplyr` also offers a function to view the data that is a little easier to use in the console.

```{r}
#| echo: true
#| output-location: fragment
glimpse(penguins)
```

# Other ways to view the data

```{r}
#| echo: true
#| eval: false

str(penguins)
view(penguins)
```

## What `species` are in the data?

To specify a column in the data, simply insert a `$` after the name of the data (i.e. `data$column`).

```{r}
#| echo: true
#| output-location: fragment
unique(penguins$species)
```

## How many are `male`? {.smaller}

::: callout-note
`r fontawesome::fa("location-pin", "red")`   Code begins in the section labeled **Intro to dplyr**
:::

```{r}
#| echo: true
#| output-location: fragment
filter(penguins, sex == "male")
```

## How many are `male` on `Biscoe` island?

```{r}
#| echo: true
#| output-location: fragment
filter(penguins, sex == "male", island == "biscoe")
```

## How many are `male` on `Biscoe` island? {.smaller .hscroll .scrollable}

```{r}
#| echo: true
#| output-location: fragment
filter(penguins, sex == "male", island == "Biscoe")
```

R is case sensitive!

## Chaining functions {.smaller}

```{r}
#| echo: true
#| output-location: fragment
penguins |> 
  filter(sex == "female") |> 
  arrange(flipper_length_mm) |> 
  head()
```

## Other ways to filter

-   Using Boolean operators

``` r
# Greater than
penguins |> 
  filter(bill_length_mm > 40)

# Greater than or equal to
penguins |> 
  filter(bill_length_mm >= 40)
```

## Other ways to filter

-   By missing values

``` r
# Flipper length is missing/blank
penguins |> 
  filter(is.na(flipper_length_mm))

# Flipper length is NOT missing/blank
penguins |> 
  filter(!is.na(flipper_length_mm))
```

## Making new variables {.smaller}

Now let's make a new variable based on flipper length that groups them into buckets of "short", "average", and "long".

First, let's make a box plot of the flipper length.

```{r}
#| output-location: fragment
penguins |> 
  ggplot(aes(flipper_length_mm)) +
  geom_boxplot() +
  theme_minimal()
```

## Making new variables

```{r}
#| echo: true
#| output-location: fragment
penguins |>
  mutate(flipper_length = case_when(
    flipper_length_mm < 190 ~ "short",
    flipper_length_mm >= 190 &
      flipper_length_mm < 213 ~ "average",
    flipper_length_mm > 213 ~ "long"
  )) |>
  select(flipper_length_mm, flipper_length) |>
  head()
```

## Summarize data

```{r}
#| echo: true
#| output-location: fragment
penguins |> 
  group_by(species) |> 
  summarise(avg_flipper_length = mean(flipper_length_mm))
```

## Summarize data

``` {.r code-line-numbers="4"}
#| output-location: fragment
penguins |> 
  group_by(species) |> 
  summarise(avg_flipper_length = mean(flipper_length_mm, na.rm = TRUE))
```

```{r echo=FALSE}
penguins |> 
  group_by(species) |> 
  summarise(avg_flipper_length = mean(flipper_length_mm, na.rm = TRUE))
```

## ggplot2

::: callout-note
`r fontawesome::fa("location-pin", "red")`   Code begins in the section labeled **Intro to ggplot2**
:::

```{r}
#| output-location: column
penguins |> 
  ggplot(aes(flipper_length_mm)) +
  geom_bar() 
```

## ggplot2

```{r}
#| output-location: column
penguins |> 
  ggplot(aes(bill_length_mm,
             flipper_length_mm,
             color = species)) +
  geom_point(size = 3, alpha = 0.4) +
  labs(title = "Bill vs. Flipper Length",
       subtitle = "by species",
       x = "Bill Length (mm)",
       y = "Flipper Length (mm)",
       color = "") +
  theme_minimal() +
  theme(legend.position = "bottom")
```

## `tidymodels` {.smaller}

Although it's not the focus of this workshop, the `tidymodels` packages contains a similar collection of packages devoted to modeling that integrates with the `tidyverse`.

# Examining Disney Reviews

## The Data

42,656 reviews from Disney California, Hong Kong, and Paris

![](images/disney-logo.png){fig-align="center" height="200"}

Source: [Kaggle](https://www.kaggle.com/datasets/arushchillar/disneyland-reviews)

## Read the data

`r fontawesome::fa("laptop-code", "black")` Open `03-intro-to-r/02-our-data.R` in RStudio if you'd like to follow along.

```{r}
#| echo: true
#| output-location: fragment
#| message: false
#| warning: false

# Load libraries
library(tidyverse)

# Read in the data
# df <- read_csv("DisneylandReviews.csv")
load("workshop_data.RData")
```

## `str`

Look at the structure of the data using base R.

```{r}
#| echo: true
#| output-location: fragment
str(df)
```

## `glimpse`

`glimpse` is a function from `dplyr` that allows for a different way to view your data.

```{r}
#| echo: true
#| output-location: fragment
glimpse(df)
```

## `head`

`head` returns the first *n*-rows (defaults to 6).

```{r}
#| echo: true
#| output-location: fragment
head(df)
```

## `tail`

`tail` returns the last *n*-rows (defaults to 6).

```{r}
#| echo: true
#| output-location: fragment
tail(df)
```

## Where are reviewers from?

```{r}
#| echo: true
#| output-location: fragment
unique(df$Reviewer_Location)
```

## Which parks have been reviewed?

The `unique` function lists only the different values in a string or column. It is particularly useful when looking at a limited list of options *(action types, fundraiser names, etc.)*

```{r}
#| echo: true
#| output-location: fragment
unique(df$Branch)
```

## Clean up Park Names

Here we use two `dplyr` functions: `mutate` and `rename` to remove *Disneyland\_* from the start of our values and choose a different column name.

```{r}
#| echo: true
#| output-location: fragment

df <- df |> 
  mutate(Branch = case_match(Branch, 
                             "Disneyland_California" ~ "California",
                             "Disneyland_HongKong" ~ "Hong Kong",
                             "Disneyland_Paris" ~ "Paris")) |> 
  rename("Park" = Branch)

unique(df$Park)
```

## Look at our starting data set

```{r}
#| echo: true
#| output-location: fragment
glimpse(df)
```
