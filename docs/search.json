[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Apra PD 2023 Workshop",
    "section": "",
    "text": "by Matt Farrow\n\nüóìÔ∏èAugust 28, 2023\n‚è∞ 1:00 - 4:00 pm\nüè® JW Marriott Indianapolis: White River AB"
  },
  {
    "objectID": "index.html#an-introduction-to-text-mining",
    "href": "index.html#an-introduction-to-text-mining",
    "title": "Apra PD 2023 Workshop",
    "section": "",
    "text": "by Matt Farrow\n\nüóìÔ∏èAugust 28, 2023\n‚è∞ 1:00 - 4:00 pm\nüè® JW Marriott Indianapolis: White River AB"
  },
  {
    "objectID": "index.html#using-posit-cloud",
    "href": "index.html#using-posit-cloud",
    "title": "Apra PD 2023 Workshop",
    "section": "Using Posit Cloud",
    "text": "Using Posit Cloud\nThe materials for this workshop are available in a cloud environment that can be run with no downloads or setup. All you need to is go to posit.cloud and sign up for a free account. This page will be updated on Monday, August 28 prior to the workshop with the direct link to the workshop space."
  },
  {
    "objectID": "index.html#using-a-local-installation",
    "href": "index.html#using-a-local-installation",
    "title": "Apra PD 2023 Workshop",
    "section": "Using a Local Installation",
    "text": "Using a Local Installation\nIf you are a workshop attendee and have any trouble with installation locally, please reach out to me directly!\n\nInstall latest version of RStudio, 2023.06.0+421) or later\nIdeally upgrade/use to R 4.3.1 (I‚Äôm using the magittr pipe %&gt;%)\nInstall these R packages:\n\n\npkg_list &lt;- c(\n  \"tidyverse\", \"tidytext\", \"wordcloud\"\n  )\ninstall.packages(pkg_list)\n\n\n\n\n\n\n\nTip\n\n\n\nIf you are a workshop attendee who would like to use their own RStudio installation, please clone https://github.com/mattfarrow1/text-mining-workshop.git via RStudio on Monday morning (August 28).\n\n\n\n\n\n\n\n\nHow to clone a Github repo\n\n\n\n\n\n\nNavigate to https://github.com/mattfarrow1/text-mining-workshop\nClick on the green ‚ÄúCode‚Äù button and copy the url under the HTTPS tab https://github.com/mattfarrow1/text-mining-workshop.git\nIn RStudio, use File &gt; New Project &gt; Version Control &gt; From Git &gt; and then paste the URL into the source repo box and then click enter!\n\n\n\n\n\n\n\n\n\n\n(Optional!) Pre-Work for Python\n\n\n\n\n\nThis will be a R/RStudio-centric course based on the attendees, but we will briefly cover using Python for text mining. This code can be run in Posit Cloud, but if you are interested in installing it on your machine, here are some helpful links:\n\nInstall Python, following instructions at Minimum Viable Python\nInstall Jupyter\nInstall VSCode, Quarto VSCode extension, Python VSCode extension, Jupyter VSCode extension"
  },
  {
    "objectID": "index.html#competencies",
    "href": "index.html#competencies",
    "title": "Apra PD 2023 Workshop",
    "section": "Competencies",
    "text": "Competencies\n\n\n\n\n\n\n\nPrimary\nDS: Competency 3: Data Manipulation Skills\n\n\nAuxiliary\nDS: Competency 5: Visualization/Reporting Techniques and Competencies\n\n\nTertiary\nDS: Competency 4: Statistical Techniques and Competencies"
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Apra PD 2023 Workshop",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\n\n\n\n\n\n\nLearning Objective 1\nAttendees will create word counts and keyword searches in Excel.\n\n\nLearning Objective 2\nAttendees will also utilize R (possibly Python too) to work on advanced text mining including stop words, topic modeling, word clouds, and sentiment analysis.\n\n\n\n\nThese materials are developed for a trainer-led workshop at Apra PD 2023, but should be useful for self-guided learning as well."
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "Apra PD 2023 Workshop",
    "section": "Instructor",
    "text": "Instructor\nMatt Farrow is the Director of Prospect Development and Strategy at Children‚Äôs Health. He previously worked as the Assistant Director of Prospect Management at Southern Methodist University, where he earned an M.S. degree in Data Science. Matt is passionate about helping people extract insights and wisdom from their data. He may also have a small problem with his love of LEGO.\n\n This work is licensed under a Creative Commons Attribution 4.0 International License."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Note\n\n\n\nThis schedule is provided as a guide and is subject to change due to conversations and questions."
  },
  {
    "objectID": "schedule.html#footnotes",
    "href": "schedule.html#footnotes",
    "title": "Schedule",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSubject to available time. Workshop participants will have access to the Python code and its associated documentation regardless.‚Ü©Ô∏é"
  },
  {
    "objectID": "materials/static/toc-1.html",
    "href": "materials/static/toc-1.html",
    "title": "Extracting Value from Free Text",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n\n\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat."
  },
  {
    "objectID": "materials/static/toc-1.html#major-section",
    "href": "materials/static/toc-1.html#major-section",
    "title": "Extracting Value from Free Text",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n\n\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat."
  },
  {
    "objectID": "materials/static/footnote.html",
    "href": "materials/static/footnote.html",
    "title": "¬†",
    "section": "",
    "text": "For example, did you know that Howard is a dog1?"
  },
  {
    "objectID": "materials/static/footnote.html#footnotes",
    "href": "materials/static/footnote.html#footnotes",
    "title": "¬†",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSpecifically he is a Boston Terrier, although sometimes he acts like a cat‚Ü©Ô∏é"
  },
  {
    "objectID": "materials/static/fancy-footnotes.html",
    "href": "materials/static/fancy-footnotes.html",
    "title": "Extracting Value from Free Text",
    "section": "",
    "text": "Pandoc supports numbering and formatting footnotes using the following syntax:"
  },
  {
    "objectID": "materials/static/fancy-footnotes.html#output",
    "href": "materials/static/fancy-footnotes.html#output",
    "title": "Extracting Value from Free Text",
    "section": "Output",
    "text": "Output\nHere is a footnote reference,1 and another.2\nThis paragraph won‚Äôt be part of the note, because it isn‚Äôt indented."
  },
  {
    "objectID": "materials/static/fancy-footnotes.html#footnotes",
    "href": "materials/static/fancy-footnotes.html#footnotes",
    "title": "Extracting Value from Free Text",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHere is the footnote.‚Ü©Ô∏é\nHere‚Äôs one with multiple blocks.\nSubsequent paragraphs are indented to show that they belong to the previous footnote.\n{ some.code }\nThe whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items.‚Ü©Ô∏é"
  },
  {
    "objectID": "materials/06-learning-more.html",
    "href": "materials/06-learning-more.html",
    "title": "",
    "section": "",
    "text": "Learning More\nRelated to this Workshop\n\nR for Data Science\nText Mining with R\n\nOther R Links\n\nBig Book of R\n\n\n\nGet in Touch\nmatt.farrow@childrens.com"
  },
  {
    "objectID": "materials/04-r-text-mining.html",
    "href": "materials/04-r-text-mining.html",
    "title": "",
    "section": "",
    "text": "df |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal()\n\n\n\n\n\n\n\n\ndf |&gt; \n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\") +\n  scale_y_continuous(labels = scales::comma) +\n  scale_fill_discrete() +\n  theme_minimal()\n\n\n\n\n\n\n\n\ndf |&gt; \n  ggplot(aes(Park, Rating, color = Park)) +\n  geom_boxplot(color = \"black\") +\n  geom_jitter(alpha = 0.3) +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#getting-started",
    "href": "materials/04-r-text-mining.html#getting-started",
    "title": "",
    "section": "Getting Started",
    "text": "Getting Started\n\n# Install libraries\n# install.packages(\"tidyverse\")\n# install.packages(\"tidytext\")\n\n# Load libraries\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(wordcloud)\n\n# Read in the data\ndf &lt;- read_csv(\"DisneylandReviews.csv\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#examine-the-data",
    "href": "materials/04-r-text-mining.html#examine-the-data",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n# head(df)\n# str(df)\nglimpse(df)\n\nRows: 42,656\nColumns: 6\n$ Review_ID         &lt;dbl&gt; 670772142, 670682799, 670623270, 670607911, 67060729‚Ä¶\n$ Rating            &lt;dbl&gt; 4, 4, 4, 4, 4, 3, 5, 3, 2, 5, 5, 5, 4, 5, 5, 3, 4, 3‚Ä¶\n$ Year_Month        &lt;chr&gt; \"2019-4\", \"2019-5\", \"2019-4\", \"2019-4\", \"2019-4\", \"2‚Ä¶\n$ Reviewer_Location &lt;chr&gt; \"Australia\", \"Philippines\", \"United Arab Emirates\", ‚Ä¶\n$ Review_Text       &lt;chr&gt; \"If you've ever been to Disneyland anywhere you'll f‚Ä¶\n$ Branch            &lt;chr&gt; \"Disneyland_HongKong\", \"Disneyland_HongKong\", \"Disne‚Ä¶"
  },
  {
    "objectID": "materials/04-r-text-mining.html#look-at-the-parks",
    "href": "materials/04-r-text-mining.html#look-at-the-parks",
    "title": "",
    "section": "Look at the Parks",
    "text": "Look at the Parks\n\nunique(df$Branch)\n\n[1] \"Disneyland_HongKong\"   \"Disneyland_California\" \"Disneyland_Paris\""
  },
  {
    "objectID": "materials/04-r-text-mining.html#clean-up-park-names",
    "href": "materials/04-r-text-mining.html#clean-up-park-names",
    "title": "",
    "section": "Clean up Park Names",
    "text": "Clean up Park Names\n\ndf &lt;- df %&gt;% \n  rename(Park = Branch) %&gt;% \n  mutate(Park = recode(Park,\n                       \"Disneyland_California\" = \"California\",\n                       \"Disneyland_HongKong\" = \"Hong Kong\",\n                       \"Disneyland_Paris\" = \"Paris\"\n  ))\n\nunique(df$Park)\n\n[1] \"Hong Kong\"  \"California\" \"Paris\""
  },
  {
    "objectID": "materials/04-r-text-mining.html#examine-the-data-1",
    "href": "materials/04-r-text-mining.html#examine-the-data-1",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n\ndf %&gt;% \n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#examine-the-data-2",
    "href": "materials/04-r-text-mining.html#examine-the-data-2",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n\ndf %&gt;% \n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\") +\n  scale_y_continuous(labels = scales::comma) +\n  scale_fill_discrete() +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#examine-the-data-3",
    "href": "materials/04-r-text-mining.html#examine-the-data-3",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n\ndf %&gt;% \n  ggplot(aes(Park, Rating, color = Park)) +\n  geom_boxplot(color = \"black\") +\n  geom_jitter(alpha = 0.3) +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#sample-review",
    "href": "materials/04-r-text-mining.html#sample-review",
    "title": "",
    "section": "Sample Review",
    "text": "Sample Review\n\n\ndf$Review_Text[15]\n\n\n[1] \"This place is HUGE! Definately need more than one day. We had 3 children aged 11, 9 & 6 and they loved it. A great variety of rides and attractions for all ages. Food options were fantastic with 3D models of what you were ordering. Staff were fantastic, very helpful. An awesome family experience.\""
  },
  {
    "objectID": "materials/04-r-text-mining.html#sample-review-1",
    "href": "materials/04-r-text-mining.html#sample-review-1",
    "title": "",
    "section": "Sample Review",
    "text": "Sample Review\n\n# Convert it to a tibble\nsample &lt;- tibble(line = 1, text = df$Review_Text[15])\nsample\n\n\n\n# A tibble: 1 √ó 2\n   line text                                                                    \n  &lt;dbl&gt; &lt;chr&gt;                                                                   \n1     1 This place is HUGE! Definately need more than one day. We had 3 childre‚Ä¶"
  },
  {
    "objectID": "materials/04-r-text-mining.html#sample-review-unnest-tokens",
    "href": "materials/04-r-text-mining.html#sample-review-unnest-tokens",
    "title": "",
    "section": "Sample Review: Unnest Tokens",
    "text": "Sample Review: Unnest Tokens\n\n# Unnest tokens\ntidy_sample &lt;- sample %&gt;% \n  unnest_tokens(word, text)\ntidy_sample\n\n\n\n# A tibble: 53 √ó 2\n    line word      \n   &lt;dbl&gt; &lt;chr&gt;     \n 1     1 this      \n 2     1 place     \n 3     1 is        \n 4     1 huge      \n 5     1 definately\n 6     1 need      \n 7     1 more      \n 8     1 than      \n 9     1 one       \n10     1 day       \n# ‚Ñπ 43 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#sample-review-word-count",
    "href": "materials/04-r-text-mining.html#sample-review-word-count",
    "title": "",
    "section": "Sample Review: Word Count",
    "text": "Sample Review: Word Count\n\n# Word count\ntidy_sample %&gt;% \n  count(word, sort = TRUE) %&gt;% \n  head()\n\n\n\n# A tibble: 6 √ó 2\n  word          n\n  &lt;chr&gt;     &lt;int&gt;\n1 were          3\n2 and           2\n3 fantastic     2\n4 of            2\n5 11            1\n6 3             1"
  },
  {
    "objectID": "materials/04-r-text-mining.html#sample-review-word-count-wo-stop-words",
    "href": "materials/04-r-text-mining.html#sample-review-word-count-wo-stop-words",
    "title": "",
    "section": "Sample Review: Word Count w/o Stop Words",
    "text": "Sample Review: Word Count w/o Stop Words\n\n# Word count without stop words\ntidy_sample %&gt;% \n  filter(!word %in% stop_words$word) %&gt;% \n  count(word, sort = TRUE) %&gt;% \n  head()\n\n\n\n# A tibble: 6 √ó 2\n  word          n\n  &lt;chr&gt;     &lt;int&gt;\n1 fantastic     2\n2 11            1\n3 3             1\n4 3d            1\n5 6             1\n6 9             1"
  },
  {
    "objectID": "materials/04-r-text-mining.html#number-each-review",
    "href": "materials/04-r-text-mining.html#number-each-review",
    "title": "",
    "section": "Number each review",
    "text": "Number each review\n\n\nreviews &lt;- df |&gt;\n  group_by(Park) |&gt;\n  mutate(linenumber = row_number()) |&gt;\n  ungroup() |&gt;\n  select(Park,\n    linenumber,\n    text = Review_Text\n  ) |&gt;\n  arrange(\n    Park,\n    linenumber\n  )\n\nhead(reviews, n = 3)\n\n\n# A tibble: 3 √ó 3\n  Park       linenumber text                                                    \n  &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;                                                   \n1 California          1 I  ve previously been to 3 Disney Resorts. So I had my ‚Ä¶\n2 California          2 I loved everything! :)  It's the Happiest Place on Eart‚Ä¶\n3 California          3 I went there with 2 daughters   1 y.o. and 4 y.o. Both ‚Ä¶"
  },
  {
    "objectID": "materials/04-r-text-mining.html#unnest-tokens-remove-stop-words",
    "href": "materials/04-r-text-mining.html#unnest-tokens-remove-stop-words",
    "title": "",
    "section": "Unnest tokens & Remove Stop Words",
    "text": "Unnest tokens & Remove Stop Words\n\n# Unnest tokens and remove stop words\ntidy_reviews &lt;- reviews |&gt; \n  unnest_tokens(word, text)\n\nhead(tidy_reviews)\n\n\n\n# A tibble: 6 √ó 3\n  Park       linenumber word   \n  &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;  \n1 California          1 this   \n2 California          1 place  \n3 California          1 is     \n4 California          1 amazing\n5 California          1 for    \n6 California          1 adults"
  },
  {
    "objectID": "materials/04-r-text-mining.html#word-counts",
    "href": "materials/04-r-text-mining.html#word-counts",
    "title": "",
    "section": "Word Counts",
    "text": "Word Counts\n\n# Perform word count\ntidy_reviews |&gt; \n  count(word, sort = TRUE) |&gt; \n  head()\n\n\n\n# A tibble: 6 √ó 2\n  word           n\n  &lt;chr&gt;      &lt;int&gt;\n1 park        1024\n2 disney       823\n3 rides        804\n4 disneyland   740\n5 time         693\n6 day          628"
  },
  {
    "objectID": "materials/04-r-text-mining.html#word-clouds",
    "href": "materials/04-r-text-mining.html#word-clouds",
    "title": "",
    "section": "Word Clouds",
    "text": "Word Clouds\n\ntidy_reviews |&gt;\n  anti_join(stop_words) |&gt;\n  count(word) |&gt;\n  with(wordcloud(word, n, max.words = 100))\n\n\n\nWhat pops out to you? How can we make this more useful?"
  },
  {
    "objectID": "materials/04-r-text-mining.html#n-grams",
    "href": "materials/04-r-text-mining.html#n-grams",
    "title": "",
    "section": "N-Grams",
    "text": "N-Grams\n\nA continuous sequence of n words\nCan be used ‚Äòas is‚Äô, or run through a stemmer to get morphemes\nOffers greater context than single words"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bigrams-prep",
    "href": "materials/04-r-text-mining.html#bigrams-prep",
    "title": "",
    "section": "Bigrams (prep)",
    "text": "Bigrams (prep)\n\n# Unnest into bigrams\ntidy_bigrams &lt;- reviews |&gt; \n  unnest_tokens(bigram, text, token = \"ngrams\", n = 2) |&gt; \n  filter(!is.na(bigram))\n\n# Separate words\ntidy_bigrams &lt;- tidy_bigrams |&gt;\n  separate(bigram, c(\"word1\", \"word2\"), sep = \" \")\n\n# Remove stop words\ntidy_bigrams &lt;- tidy_bigrams |&gt;\n  filter(!word1 %in% stop_words$word) |&gt;\n  filter(!word2 %in% stop_words$word)\n\n# Reunite terms\ntidy_bigrams &lt;- tidy_bigrams |&gt;\n  unite(bigram, word1, word2, sep = \" \")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bigrams",
    "href": "materials/04-r-text-mining.html#bigrams",
    "title": "",
    "section": "Bigrams",
    "text": "Bigrams\n\n\n# A tibble: 6 √ó 3\n# Groups:   Park [3]\n  Park       bigram                   n\n  &lt;chr&gt;      &lt;chr&gt;                &lt;int&gt;\n1 California fast pass               92\n2 Hong Kong  hong kong               75\n3 Paris      disneyland paris        69\n4 Paris      fast pass               49\n5 California space mountain          41\n6 California california adventure    40"
  },
  {
    "objectID": "materials/04-r-text-mining.html#word-document-frequencies",
    "href": "materials/04-r-text-mining.html#word-document-frequencies",
    "title": "",
    "section": "Word & Document Frequencies",
    "text": "Word & Document Frequencies"
  },
  {
    "objectID": "materials/04-r-text-mining.html#sentiment-analysis",
    "href": "materials/04-r-text-mining.html#sentiment-analysis",
    "title": "",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\nAn introduction using the ‚Äòjoy‚Äô sentiment.\n\n\n# A tibble: 6 √ó 2\n  word          sentiment\n  &lt;chr&gt;         &lt;chr&gt;    \n1 absolution    joy      \n2 abundance     joy      \n3 abundant      joy      \n4 accolade      joy      \n5 accompaniment joy      \n6 accomplish    joy"
  },
  {
    "objectID": "materials/04-r-text-mining.html#sentiment-analysis-1",
    "href": "materials/04-r-text-mining.html#sentiment-analysis-1",
    "title": "",
    "section": "Sentiment analysis",
    "text": "Sentiment analysis\nAn introduction using the ‚Äòjoy‚Äô sentiment.\n\n\n# Get 'joy' sentiment\nnrc_joy &lt;- tidytext::get_sentiments(\"nrc\")\nnrc_joy &lt;- nrc_joy |&gt; \n  filter(sentiment == \"joy\")\n\ngt(head(nrc_joy))\n\n\n\n\n\n\n  \n    \n    \n      word\n      sentiment\n    \n  \n  \n    absolution\njoy\n    abundance\njoy\n    abundant\njoy\n    accolade\njoy\n    accompaniment\njoy\n    accomplish\njoy"
  },
  {
    "objectID": "materials/04-r-text-mining.html#sentiment-analysis-2",
    "href": "materials/04-r-text-mining.html#sentiment-analysis-2",
    "title": "",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\n\n\n# Most common 'joy' words in the reviews\ntidy_reviews |&gt;\n  inner_join(nrc_joy) |&gt;\n  count(word, sort = TRUE) |&gt; \n  head() |&gt; \n  gt()\n\n\n\n\n\n\n  \n    \n    \n      word\n      n\n    \n  \n  \n    food\n321\n    fun\n231\n    parade\n187\n    love\n139\n    magical\n134\n    enjoy\n114"
  },
  {
    "objectID": "materials/04-r-text-mining.html#sentiment-analysis-3",
    "href": "materials/04-r-text-mining.html#sentiment-analysis-3",
    "title": "",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\n\n\ntidy_reviews_sentiment &lt;- tidy_reviews |&gt;\n  inner_join(get_sentiments(\"bing\")) |&gt;\n  count(Park, \n        index = linenumber %/% 80, \n        sentiment) |&gt;\n  pivot_wider(names_from = sentiment, \n              values_from = n, \n              values_fill = 0) |&gt;\n  mutate(sentiment = positive - negative)\n\ngt(head(tidy_reviews_sentiment))\n\n\n\n\n\n\n  \n    \n    \n      Park\n      index\n      negative\n      positive\n      sentiment\n    \n  \n  \n    California\n0\n128\n301\n173\n    California\n1\n186\n369\n183\n    California\n2\n127\n310\n183\n    California\n3\n128\n282\n154\n    California\n4\n152\n326\n174\n    California\n5\n91\n176\n85"
  },
  {
    "objectID": "materials/04-r-text-mining.html#topic-modeling",
    "href": "materials/04-r-text-mining.html#topic-modeling",
    "title": "",
    "section": "Topic Modeling",
    "text": "Topic Modeling\n\n\nIntroduction to Text Mining"
  },
  {
    "objectID": "materials/02-excel.html",
    "href": "materials/02-excel.html",
    "title": "",
    "section": "",
    "text": "Pros and Cons\nFormulas\nUsing ChatGPT to help with formulas\nKeyword Search\nWord Count\n\n\n\n\n\n\n\nPros - Universally available - Not going anywhere - Low barrier to entry - Scales in complexity\n:::\n:::\nCons - Can be difficult to reproduce - Potentially destructive - Doesn‚Äôt scale well - Limited options for text mining\n:::\n::::\n\n\n\n=VLOOKUP(Value to look up, Range to look for value, Column for the return value, Type of match)\n=VLOOKUP(A1, Lookup!A1:B7, 2, TRUE)\n\n\n\nRelative references can move.\nA1\nAbsolute references can‚Äôt move.\n$A$1\n\n\n\n\ntbl &lt;- tibble::tribble(\n~`$A$2`, ~`The column and the row do not change when copied.`,\n\"A$2\",\"The row does not change when copied.\",\n\"$A2\",\"The column does not change when copied.\"\n)\n\nkableExtra::kable_styling(knitr::kable(tbl), font_size = 24)\n\n\n\n\n$A$2\nThe column and the row do not change when copied.\n\n\n\n\nA$2\nThe row does not change when copied.\n\n\n$A2\nThe column does not change when copied.\n\n\n\n\n\n\n\n\n\n\n=COUNTIF(Where are we looking?, What are we looking for?)\n=COUNTIF(A:A, ‚ÄúWashington‚Äù)\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nAssume that everything you put into ChatGPT (or other LLMs) is public. Do not enter confidential or proprietary information into it.\n\n\nTell ChatGPT what is is you need assistance with:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: ChatGPT\n=IF(SUMPRODUCT(‚ÄìISNUMBER(SEARCH(Keywords_Range, Cell)))&gt;0, ‚ÄúFound‚Äù, ‚ÄúNot Found‚Äù)\n\n\n\n=IF(SUMPRODUCT(‚ÄìISNUMBER(SEARCH(Keywords_Range, Cell)))&gt;0, ‚ÄúFound‚Äù, ‚ÄúNot Found‚Äù)\n\nReplace Keywords_Range with the actual range of keywords you want to search for. For example, if your keywords are in cells A1 to A10, the range would be A1:A10.\n\n\n\n\n=IF(SUMPRODUCT(‚ÄìISNUMBER(SEARCH(Keywords_Range, Cell)))&gt;0, ‚ÄúFound‚Äù, ‚ÄúNot Found‚Äù)\n\nReplace Cell with the cell reference of the cell in the column you want to search. This is the cell where you want to check if any of the keywords are present. For example, if you want to search in column B, and the first cell is B2, you would use B2 as the cell reference.\n\n\n\n\nSource: ChatGPT\n=IF(SUMPRODUCT(‚ÄìISNUMBER(SEARCH(Keywords_Range, Cell)))&gt;0, ‚ÄúFound‚Äù, ‚ÄúNot Found‚Äù)\n\nEnter the formula in the cell where you want the search result to appear.\n\nThe formula will return ‚ÄúFound‚Äù if any of the keywords in the range are found in the specified cell, and ‚ÄúNot Found‚Äù if none of the keywords are found.\nNote: This formula is case-insensitive, so it will match keywords regardless of their case. If you want case-sensitive matching, you can use the FIND function instead of SEARCH in the formula."
  },
  {
    "objectID": "materials/02-excel.html#excel-agenda",
    "href": "materials/02-excel.html#excel-agenda",
    "title": "",
    "section": "Excel Agenda",
    "text": "Excel Agenda\n\nWhy Excel?\nWord Counts\nReferences & VLOOKUP\nKeyword Search\nChatGPT"
  },
  {
    "objectID": "materials/02-excel.html#pros-and-cons",
    "href": "materials/02-excel.html#pros-and-cons",
    "title": "",
    "section": "Pros and Cons",
    "text": "Pros and Cons\n\n\nPros\n\nUniversally available\nNot going anywhere\nLow barrier to entry\nScales in complexity\n\n\nCons\n\nCan be difficult to reproduce\nPotentially destructive\nDoesn‚Äôt scale well\nLimited options for text mining"
  },
  {
    "objectID": "materials/02-excel.html#formula-vlookup",
    "href": "materials/02-excel.html#formula-vlookup",
    "title": "",
    "section": "Formula: vlookup",
    "text": "Formula: vlookup\n=VLOOKUP(Value to look up, Range to look for value, Column for the return value, Type of match)\n=VLOOKUP(A1, Lookup!A1:B7, 2, TRUE)"
  },
  {
    "objectID": "materials/02-excel.html#formula-absoluterelative-references",
    "href": "materials/02-excel.html#formula-absoluterelative-references",
    "title": "",
    "section": "Formula: absolute/relative references",
    "text": "Formula: absolute/relative references\nRelative references can move.\nA1\nAbsolute references can‚Äôt move.\n$A$1"
  },
  {
    "objectID": "materials/02-excel.html#formula-absoluterelative-references-1",
    "href": "materials/02-excel.html#formula-absoluterelative-references-1",
    "title": "",
    "section": "Formula: absolute/relative references",
    "text": "Formula: absolute/relative references\n\n\n\n\n\n$A$2\nThe column and the row do not change when copied.\n\n\n\n\nA$2\nThe row does not change when copied.\n\n\n$A2\nThe column does not change when copied."
  },
  {
    "objectID": "materials/02-excel.html#formula-countif",
    "href": "materials/02-excel.html#formula-countif",
    "title": "",
    "section": "Formula: countif",
    "text": "Formula: countif\n=COUNTIF(Where are we looking?, What are we looking for?)\n=COUNTIF(A:A, ‚ÄúWashington‚Äù)"
  },
  {
    "objectID": "materials/02-excel.html#chatgpt-for-formula-help",
    "href": "materials/02-excel.html#chatgpt-for-formula-help",
    "title": "",
    "section": "ChatGPT for Formula Help",
    "text": "ChatGPT for Formula Help"
  },
  {
    "objectID": "materials/02-excel.html#formula-keyword-search",
    "href": "materials/02-excel.html#formula-keyword-search",
    "title": "",
    "section": "Formula: keyword search",
    "text": "Formula: keyword search\nSource: ChatGPT"
  },
  {
    "objectID": "materials/02-excel.html#formula-keyword-search-1",
    "href": "materials/02-excel.html#formula-keyword-search-1",
    "title": "",
    "section": "Formula: keyword search",
    "text": "Formula: keyword search\n=IF(SUMPRODUCT(‚ÄìISNUMBER(SEARCH(Keywords_Range, Cell)))&gt;0, ‚ÄúFound‚Äù, ‚ÄúNot Found‚Äù)\n\nReplace Keywords_Range with the actual range of keywords you want to search for. For example, if your keywords are in cells A1 to A10, the range would be A1:A10."
  },
  {
    "objectID": "materials/02-excel.html#formula-keyword-search-2",
    "href": "materials/02-excel.html#formula-keyword-search-2",
    "title": "",
    "section": "Formula: keyword search",
    "text": "Formula: keyword search\n=IF(SUMPRODUCT(‚ÄìISNUMBER(SEARCH(Keywords_Range, Cell)))&gt;0, ‚ÄúFound‚Äù, ‚ÄúNot Found‚Äù)\n\nReplace Cell with the cell reference of the cell in the column you want to search. This is the cell where you want to check if any of the keywords are present. For example, if you want to search in column B, and the first cell is B2, you would use B2 as the cell reference."
  },
  {
    "objectID": "materials/02-excel.html#formula-keyword-search-3",
    "href": "materials/02-excel.html#formula-keyword-search-3",
    "title": "",
    "section": "Formula: keyword search",
    "text": "Formula: keyword search\nSource: ChatGPT\n=IF(SUMPRODUCT(‚ÄìISNUMBER(SEARCH(Keywords_Range, Cell)))&gt;0, ‚ÄúFound‚Äù, ‚ÄúNot Found‚Äù)\n\nEnter the formula in the cell where you want the search result to appear.\n\nThe formula will return ‚ÄúFound‚Äù if any of the keywords in the range are found in the specified cell, and ‚ÄúNot Found‚Äù if none of the keywords are found.\nNote: This formula is case-insensitive, so it will match keywords regardless of their case. If you want case-sensitive matching, you can use the FIND function instead of SEARCH in the formula."
  },
  {
    "objectID": "materials/01-introduction.html",
    "href": "materials/01-introduction.html",
    "title": "",
    "section": "",
    "text": "Into to Text Mining\nKeyword searches in Excel\nGetting started with R\nText mining in R\nText mining in Python\n\n\n\n\nWhat do you think of when I say text mining?\nHow much experience do you have with coding languages like R or Python?\nWhat types of things are you most interested in? (keywords, sentiment, ngrams, word clouds‚Ä¶)"
  },
  {
    "objectID": "materials/01-introduction.html#poll",
    "href": "materials/01-introduction.html#poll",
    "title": "",
    "section": "Poll",
    "text": "Poll\n\nWhat do you think of when I say text mining?\nHow much experience do you have with programming languages like SQL, R, or Python?\nWhat are you hoping to take away from this workshop?"
  },
  {
    "objectID": "materials/01-introduction.html#what-is-text-mining",
    "href": "materials/01-introduction.html#what-is-text-mining",
    "title": "",
    "section": "What is text mining?",
    "text": "What is text mining?\nText mining is the process of extracting information and insights from unstructured text."
  },
  {
    "objectID": "materials/01-introduction.html#terms-to-know",
    "href": "materials/01-introduction.html#terms-to-know",
    "title": "",
    "section": "Terms to Know",
    "text": "Terms to Know\n\nNatural Language: A natural language, as opposed to an artificially created language such as R or Python, develops gradually and often without thought, over time. (Examples include English or Italian.)\nNatural Language Processing (NLP): refers to the creation and use of computational power in order to process content in natural language."
  },
  {
    "objectID": "materials/01-introduction.html#terms-to-know-1",
    "href": "materials/01-introduction.html#terms-to-know-1",
    "title": "",
    "section": "Terms to Know",
    "text": "Terms to Know\n\nSegmentation/Tokenization: the process of splitting apart pieces of language. Sentence segmentation is the process of breaking sentences apart using tokenizers to examine punctuation, abbreviations, and capitalization. Word tokenization involves breaking out the individual words of a sentence."
  },
  {
    "objectID": "materials/01-introduction.html#terms-to-know-2",
    "href": "materials/01-introduction.html#terms-to-know-2",
    "title": "",
    "section": "Terms to Know",
    "text": "Terms to Know\n\nText Normalization: involves standardizing text prior to analysis. Examples include the expansion of contractions (don‚Äôt -&gt; do not), removal of stop words (of, and, it), correcting misspellings, and stemming (if required)"
  },
  {
    "objectID": "materials/01-introduction.html#terms-to-know-3",
    "href": "materials/01-introduction.html#terms-to-know-3",
    "title": "",
    "section": "Terms to Know",
    "text": "Terms to Know\n\nTerm Frequency: measures how often a term appears in a document.\nDocument Frequency: measures how often a term appears in a corpus of documents."
  },
  {
    "objectID": "materials/01-introduction.html#terms-to-know-4",
    "href": "materials/01-introduction.html#terms-to-know-4",
    "title": "",
    "section": "Terms to Know",
    "text": "Terms to Know\n\nInverse Document Frequency: a number computed by dividing the total number of documents in the corpus by the number of documents containing the target term and applying a log scale.\nTF-IDF: ‚ÄúTerm Frequency-Inverse Document Frequency‚Äù. Higher term frequency and a lower document frequency leads to a higher TF-IDF."
  },
  {
    "objectID": "materials/01-introduction.html#levels-of-analysis",
    "href": "materials/01-introduction.html#levels-of-analysis",
    "title": "",
    "section": "Levels of Analysis",
    "text": "Levels of Analysis\n\nLexical Analysis: The most basic form of NLP, lexical analysis is focused on analyzing individual words.\nSyntactic Analysis: concerned with processing the grammar of written words.\nSemantic Analysis: builds on lexical and syntactic analyses in order to understand the meanings of words.\nDiscourse Analysis: Understanding inferences in language is the domain of discourse analysis."
  },
  {
    "objectID": "materials/03-intro-to-r.html",
    "href": "materials/03-intro-to-r.html",
    "title": "",
    "section": "",
    "text": "What is R?\nR vs.¬†Python?\n\n\nR is a programming language started by professors Ross Ihaka and Robert Gentleman as a programming language to teach introductory statistics at the University of Auckland. It was developed in the early 1990‚Äôs and open sourced in 1995.\nFor the purposes of this workshop, there are no significant differences in R vs.¬†Python other than the language and packages/libraries used. I chose to start with R because that‚Äôs where I‚Äôm most comfortable, it‚Äôs the language that I see Apra promoting, and the community is incredibly welcoming and diverse.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nEverything in this workshop can be done through the virtual project. Scan the QR code to get started.\n\n\n\n\n    \n\nDiscuss the layout of RStudio and what people are looking at."
  },
  {
    "objectID": "materials/03-intro-to-r.html#getting-started",
    "href": "materials/03-intro-to-r.html#getting-started",
    "title": "",
    "section": "Getting Started",
    "text": "Getting Started\n Open 03-intro-to-r/02-our-data.R in RStudio"
  },
  {
    "objectID": "materials/03-intro-to-r.html#getting-started-1",
    "href": "materials/03-intro-to-r.html#getting-started-1",
    "title": "",
    "section": "Getting Started",
    "text": "Getting Started\n\n\n\n\n\n\nTip\n\n\nEverything in this workshop can be done through the virtual project. Scan the QR code to get started."
  },
  {
    "objectID": "materials/03-intro-to-r.html#packages",
    "href": "materials/03-intro-to-r.html#packages",
    "title": "",
    "section": "Packages",
    "text": "Packages\n\nLibraries of code\nExpand the ‚Äúbase R‚Äù code\nFor almost anything you need\nBeware of relying too heavily on niche packages"
  },
  {
    "objectID": "materials/03-intro-to-r.html#the-tidyverse",
    "href": "materials/03-intro-to-r.html#the-tidyverse",
    "title": "",
    "section": "The tidyverse",
    "text": "The tidyverse\n\n\n\n\n\n\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\n\nhttps://www.tidyverse.org"
  },
  {
    "objectID": "materials/03-intro-to-r.html#the-tidyverse-vs-base-r",
    "href": "materials/03-intro-to-r.html#the-tidyverse-vs-base-r",
    "title": "",
    "section": "The tidyverse vs ‚ÄòBase R‚Äô",
    "text": "The tidyverse vs ‚ÄòBase R‚Äô\n\n\n\n\n\n\n\nSource: dplyr base R"
  },
  {
    "objectID": "materials/03-intro-to-r.html#tidytext",
    "href": "materials/03-intro-to-r.html#tidytext",
    "title": "",
    "section": "tidytext",
    "text": "tidytext\n\nWhat is it?\nHow does it work?"
  },
  {
    "objectID": "materials/static/custom-layout.html",
    "href": "materials/static/custom-layout.html",
    "title": "Extracting Value from Free Text",
    "section": "",
    "text": "::: {layout=\"[[1,1], [1]]\"}\n![Howard sleeping](images/howard-glamour.jpg)\n\n![Howard in a table](images/howard-table.png)\n\n![Howard on a couch](images/howard-comfy.png)\n:::\n\n\n\n\n\n\nHoward sleeping\n\n\n\n\n\n\n\nHoward in a table\n\n\n\n\n\n\n\n\n\nHoward on a couch"
  },
  {
    "objectID": "materials/static/custom-layout.html#layout11-1",
    "href": "materials/static/custom-layout.html#layout11-1",
    "title": "Extracting Value from Free Text",
    "section": "",
    "text": "::: {layout=\"[[1,1], [1]]\"}\n![Howard sleeping](images/howard-glamour.jpg)\n\n![Howard in a table](images/howard-table.png)\n\n![Howard on a couch](images/howard-comfy.png)\n:::\n\n\n\n\n\n\nHoward sleeping\n\n\n\n\n\n\n\nHoward in a table\n\n\n\n\n\n\n\n\n\nHoward on a couch"
  },
  {
    "objectID": "materials/static/custom-layout.html#layout7030-100",
    "href": "materials/static/custom-layout.html#layout7030-100",
    "title": "Extracting Value from Free Text",
    "section": "layout=\"[[70,30], [100]]\"",
    "text": "layout=\"[[70,30], [100]]\"\n::: {layout=\"[[70,30], [100]]\"}\n\n![Howard on a couch](images/howard-comfy.png)\n\n![Howard sleeping](images/boston-sleep.png)\n\n![Howard in a table](images/howard-table.png)\n:::\n\n\n\n\n\n\nHoward on a couch\n\n\n\n\n\n\n\nHoward sleeping\n\n\n\n\n\n\n\n\n\nHoward in a table"
  },
  {
    "objectID": "materials/static/custom-layout.html#layout40-2040-100",
    "href": "materials/static/custom-layout.html#layout40-2040-100",
    "title": "Extracting Value from Free Text",
    "section": "layout=\"[[40,-20,40], [100]]\"",
    "text": "layout=\"[[40,-20,40], [100]]\"\n::: {layout=\"[[40,-20,40], [100]]\"}\n![Howard on a couch](images/howard-comfy.png)\n\n![Howard sleeping](images/howard-glamour.jpg)\n\n![Howard in a table](images/howard-table.png)\n:::\n\n\n\n\n\n\nHoward on a couch\n\n\n\n\n¬†\n\n\n\n\n\nHoward sleeping\n\n\n\n\n\n\n\n\n\nHoward in a table"
  },
  {
    "objectID": "materials/static/custom-layout.html#layout25-210-layout-valignbottom",
    "href": "materials/static/custom-layout.html#layout25-210-layout-valignbottom",
    "title": "Extracting Value from Free Text",
    "section": "layout=\"[25,-2,10]\" layout-valign=\"bottom\"",
    "text": "layout=\"[25,-2,10]\" layout-valign=\"bottom\"\n::: {layout=\"[25,-2,10]\" layout-valign=\"bottom\"}\n![Howard on a couch](images/howard-comfy.png)\n\n![Howard in a table](images/howard-table.png)\n:::\n\n\n\n\n\n\nHoward on a couch\n\n\n\n\n¬†\n\n\n\n\n\nHoward in a table"
  },
  {
    "objectID": "materials/static/figure-layout.html",
    "href": "materials/static/figure-layout.html",
    "title": "Extracting Value from Free Text",
    "section": "",
    "text": "::: {layout-ncol=2}\n![Howard on a couch](images/howard-comfy.png)\n\n![Howard in a table](images/howard-table.png)\n:::\n\n\n\n\n\n\nHoward on a couch\n\n\n\n\n\n\n\nHoward in a table"
  },
  {
    "objectID": "materials/static/figure-layout.html#layout-ncol2",
    "href": "materials/static/figure-layout.html#layout-ncol2",
    "title": "Extracting Value from Free Text",
    "section": "",
    "text": "::: {layout-ncol=2}\n![Howard on a couch](images/howard-comfy.png)\n\n![Howard in a table](images/howard-table.png)\n:::\n\n\n\n\n\n\nHoward on a couch\n\n\n\n\n\n\n\nHoward in a table"
  },
  {
    "objectID": "materials/static/figure-layout.html#layout-nrow2",
    "href": "materials/static/figure-layout.html#layout-nrow2",
    "title": "Extracting Value from Free Text",
    "section": "layout-nrow=2",
    "text": "layout-nrow=2\n\n\n\n\n\n\nHoward on a couch\n\n\n\n\n\n\n\nHoward in a table\n\n\n\n\n\n\n\n\n\nHoward sleeping\n\n\n\n\n\n\n\nHoward awake"
  },
  {
    "objectID": "materials/static/sub-figure.html",
    "href": "materials/static/sub-figure.html",
    "title": "Extracting Value from Free Text",
    "section": "",
    "text": "(a) Excited\n\n\n\n\n\n\n\n(b) Sleeping\n\n\n\n\nFigure¬†1: Two states of Howard"
  },
  {
    "objectID": "materials/static/title-slide2.html",
    "href": "materials/static/title-slide2.html",
    "title": "",
    "section": "",
    "text": "Hello Quarto\n\n\n\nTom Mock, RStudio"
  },
  {
    "objectID": "materials/static/vertical-align.html",
    "href": "materials/static/vertical-align.html",
    "title": "Extracting Value from Free Text",
    "section": "",
    "text": "::: {layout=\"[[40,-20,40], [100]]\"}\n![Howard on a couch](../../materials/images/howard-comfy.png)\n\n![Howard sleeping](../../materials/images/howard-glamour.jpg)\n\n![Howard in a table](../../materials/images/howard-table.png)\n:::\n\n\n\n\n\n\nHoward on a couch\n\n\n\n\n¬†\n\n\n\n\n\nHoward sleeping\n\n\n\n\n\n\n\n\n\nHoward in a table"
  },
  {
    "objectID": "materials/03-intro-to-r.html#rstudio-ideposit-cloud",
    "href": "materials/03-intro-to-r.html#rstudio-ideposit-cloud",
    "title": "",
    "section": "RStudio IDE/Posit Cloud",
    "text": "RStudio IDE/Posit Cloud\n{background-image=‚Äú/materials/images/rstudio-clean.png‚Äù background-size=‚Äúcontain‚Äù}"
  },
  {
    "objectID": "materials/03-intro-to-r.html#rstudio-ideposit-cloud-1",
    "href": "materials/03-intro-to-r.html#rstudio-ideposit-cloud-1",
    "title": "",
    "section": "RStudio IDE/Posit Cloud",
    "text": "RStudio IDE/Posit Cloud\n{background-image=‚Äú/materials/images/rstudio-annotated.png‚Äù background-size=‚Äúcontain‚Äù}"
  },
  {
    "objectID": "materials/02-excel.html#chatgpt-for-formula-help-1",
    "href": "materials/02-excel.html#chatgpt-for-formula-help-1",
    "title": "",
    "section": "ChatGPT for Formula Help",
    "text": "ChatGPT for Formula Help\n\n\n\n\n\n\n\nIntroduction to Text Mining"
  },
  {
    "objectID": "workshop-materials.html",
    "href": "workshop-materials.html",
    "title": "Workshop Materials",
    "section": "",
    "text": "To get access to the workshop materials, please clone the repo:\nhttps://github.com/mattfarrow1/text-mining-workshop.git\n\n\n\n\n\n\n\n02-excel\n\n\n\n\nFilename\n\n\n\n\n\n\n\nexcel-examples.xlsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n03-intro-to-r\n\n\n\n\nFilename\n\n\n\n\n\n\n\n01-intro.R\n\n\n\n\n02-our-data.R\n\n\n\n\n\n\n\n\n\n\n\n\n\n04-r-text-mining\n\n\n\n\nFilename\n\n\n\n\n\n\n\n01-unnest-tokens.R\n\n\n\n\n01-visualize.R\n\n\n\n\n02-bigrams.R\n\n\n\n\n03-sentiment-analysis.R\n\n\n\n\n04-term-frequency.R\n\n\n\n\n\n\n\n\n\n\n\n\n\n05-python-text-mining\n\n\n\n\nFilename\n\n\n\n\n\n\n\npython-text-mining.py"
  },
  {
    "objectID": "workshop-materials.html#intro-to-r",
    "href": "workshop-materials.html#intro-to-r",
    "title": "Workshop Materials",
    "section": "03-intro-to-r",
    "text": "03-intro-to-r\n\n\n\n\n\n\n\nfolder\nfile\n\n\n\n\n03-intro-to-r\n01-intro.R\n\n\n03-intro-to-r\n02-our-data.R"
  },
  {
    "objectID": "workshop-materials.html#r-text-mining",
    "href": "workshop-materials.html#r-text-mining",
    "title": "Workshop Materials",
    "section": "04-r-text-mining",
    "text": "04-r-text-mining\n\n\n\n\n\n\n\nfolder\nfile\n\n\n\n\n04-r-text-mining\n01-unnest-tokens.R\n\n\n04-r-text-mining\n01-visualize.R\n\n\n04-r-text-mining\n02-bigrams.R\n\n\n04-r-text-mining\n03-sentiment-analysis.R\n\n\n04-r-text-mining\n04-term-frequency.R"
  },
  {
    "objectID": "materials/03-intro-to-r.html#the-tidyverse-1",
    "href": "materials/03-intro-to-r.html#the-tidyverse-1",
    "title": "",
    "section": "The tidyverse",
    "text": "The tidyverse\n\nWhat is it?\nHow does it work?"
  },
  {
    "objectID": "materials/03-intro-to-r.html#the-tidyverse-benefits",
    "href": "materials/03-intro-to-r.html#the-tidyverse-benefits",
    "title": "",
    "section": "The tidyverse benefits",
    "text": "The tidyverse benefits\n\nEasier to understand for new users\nPackages all work together\nCovers most frequent use cases\nCan ‚Äúpipe‚Äù instructions together"
  },
  {
    "objectID": "materials/03-intro-to-r.html#the-tidyverse-packages",
    "href": "materials/03-intro-to-r.html#the-tidyverse-packages",
    "title": "",
    "section": "The tidyverse Packages",
    "text": "The tidyverse Packages\n\n\n\n\n\n\n\nSource: RStudio Education"
  },
  {
    "objectID": "materials/03-intro-to-r.html#dplyr",
    "href": "materials/03-intro-to-r.html#dplyr",
    "title": "",
    "section": "dplyr",
    "text": "dplyr\n\nmutate() create variables (columns)\nselect() subset variables\nfilter() subset observations (rows) based on criteria\nsummarise() reduces multiple observations down to a single summary\narrange() change the ordering of observations"
  },
  {
    "objectID": "materials/03-intro-to-r.html#tidymodels",
    "href": "materials/03-intro-to-r.html#tidymodels",
    "title": "",
    "section": "tidymodels",
    "text": "tidymodels\nAlthough it‚Äôs not the focus of this workshop, the tidymodels packages contains a similar collection of packages devoted to modeling that integrates with the tidyverse."
  },
  {
    "objectID": "materials/03-intro-to-r.html#the-beset-benefit-in-my-opinion",
    "href": "materials/03-intro-to-r.html#the-beset-benefit-in-my-opinion",
    "title": "",
    "section": "The Beset Benefit (in my opinion)",
    "text": "The Beset Benefit (in my opinion)\n\n\n\n‚ÄúArtwork by @allison_horst.‚Äù"
  },
  {
    "objectID": "materials/03-intro-to-r.html#the-best-benefit-in-my-opinion",
    "href": "materials/03-intro-to-r.html#the-best-benefit-in-my-opinion",
    "title": "",
    "section": "The best benefit (in my opinion)",
    "text": "The best benefit (in my opinion)\n\n\n\n\n\n\n\n‚ÄúArtwork by @allison_horst.‚Äù"
  },
  {
    "objectID": "materials/03-intro-to-r.html#dplyr-1",
    "href": "materials/03-intro-to-r.html#dplyr-1",
    "title": "",
    "section": "dplyr",
    "text": "dplyr\n Open 03-intro-to-r/01-examine.R in RStudio\n\n\n\n\n\n\n\n‚ÄúArtwork by @allison_horst.‚Äù"
  },
  {
    "objectID": "materials/03-intro-to-r.html#your-turn",
    "href": "materials/03-intro-to-r.html#your-turn",
    "title": "",
    "section": " Your Turn",
    "text": "Your Turn\n\nOpen RStudio and 03-intro-to-r/01-examine.R\n\n\n\n\n‚àí+\n05:00"
  },
  {
    "objectID": "materials/03-intro-to-r.html#dplyr-introduction",
    "href": "materials/03-intro-to-r.html#dplyr-introduction",
    "title": "",
    "section": "dplyr Introduction",
    "text": "dplyr Introduction\n Open 03-intro-to-r/01-intro.R in RStudio\n\n\n\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "materials/03-intro-to-r.html#getting-started-2",
    "href": "materials/03-intro-to-r.html#getting-started-2",
    "title": "",
    "section": "Getting Started",
    "text": "Getting Started\n Open 03-intro-to-r/02-our-data.R in RStudio"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data",
    "href": "materials/03-intro-to-r.html#examine-the-data",
    "title": "",
    "section": "Examine the data",
    "text": "Examine the data\n\nhead(palmerpenguins::penguins)\n\n\n\n# A tibble: 6 √ó 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-1",
    "href": "materials/03-intro-to-r.html#examine-the-data-1",
    "title": "",
    "section": "Examine the data",
    "text": "Examine the data\n\n\n\n\n\n\nNote\n\n\n ¬†¬†Code begins in the section labeled Examine the Data\n\n\n\n\nhead(palmerpenguins::penguins)\n\n\n\n# A tibble: 6 √ó 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-2",
    "href": "materials/03-intro-to-r.html#examine-the-data-2",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n\nRows: 42,656\nColumns: 6\n$ Review_ID         &lt;dbl&gt; 670772142, 670682799, 670623270, 670607911, 67060729‚Ä¶\n$ Rating            &lt;dbl&gt; 4, 4, 4, 4, 4, 3, 5, 3, 2, 5, 5, 5, 4, 5, 5, 3, 4, 3‚Ä¶\n$ Year_Month        &lt;chr&gt; \"2019-4\", \"2019-5\", \"2019-4\", \"2019-4\", \"2019-4\", \"2‚Ä¶\n$ Reviewer_Location &lt;chr&gt; \"Australia\", \"Philippines\", \"United Arab Emirates\", ‚Ä¶\n$ Review_Text       &lt;chr&gt; \"If you've ever been to Disneyland anywhere you'll f‚Ä¶\n$ Branch            &lt;chr&gt; \"Disneyland_HongKong\", \"Disneyland_HongKong\", \"Disne‚Ä¶"
  },
  {
    "objectID": "materials/03-intro-to-r.html#what-species-are-in-the-data",
    "href": "materials/03-intro-to-r.html#what-species-are-in-the-data",
    "title": "",
    "section": "What species are in the data?",
    "text": "What species are in the data?\nTo specify a column in the data, simply insert a $ after the name of the data (i.e.¬†data$column).\n\nunique(penguins$species)\n\n\n\n[1] Adelie    Gentoo    Chinstrap\nLevels: Adelie Chinstrap Gentoo"
  },
  {
    "objectID": "materials/03-intro-to-r.html#how-many-are-male",
    "href": "materials/03-intro-to-r.html#how-many-are-male",
    "title": "",
    "section": "How many are male?",
    "text": "How many are male?\n\nfilter(penguins, sex == \"male\")\n\n\n\n# A tibble: 168 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.3          20.6               190        3650\n 3 Adelie  Torgersen           39.2          19.6               195        4675\n 4 Adelie  Torgersen           38.6          21.2               191        3800\n 5 Adelie  Torgersen           34.6          21.1               198        4400\n 6 Adelie  Torgersen           42.5          20.7               197        4500\n 7 Adelie  Torgersen           46            21.5               194        4200\n 8 Adelie  Biscoe              37.7          18.7               180        3600\n 9 Adelie  Biscoe              38.2          18.1               185        3950\n10 Adelie  Biscoe              38.8          17.2               180        3800\n# ‚Ñπ 158 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "materials/03-intro-to-r.html#how-many-are-male-on-biscoe-island",
    "href": "materials/03-intro-to-r.html#how-many-are-male-on-biscoe-island",
    "title": "",
    "section": "How many are male on Biscoe island?",
    "text": "How many are male on Biscoe island?\n\nfilter(penguins, sex == \"male\", island == \"biscoe\")\n\n\n\n# A tibble: 0 √ó 8\n# ‚Ñπ 8 variables: species &lt;fct&gt;, island &lt;fct&gt;, bill_length_mm &lt;dbl&gt;,\n#   bill_depth_mm &lt;dbl&gt;, flipper_length_mm &lt;int&gt;, body_mass_g &lt;int&gt;, sex &lt;fct&gt;,\n#   year &lt;int&gt;"
  },
  {
    "objectID": "materials/03-intro-to-r.html#why-no-results",
    "href": "materials/03-intro-to-r.html#why-no-results",
    "title": "",
    "section": "Why no results?",
    "text": "Why no results?"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-3",
    "href": "materials/03-intro-to-r.html#examine-the-data-3",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n\n\n\n\nReview_ID\nRating\nYear_Month\nReviewer_Location\nReview_Text\nBranch\n\n\n\n\n670772142\n4\n2019-4\nAustralia\nIf you've ever been to Disneyland anywhere you'll find Disneyland Hong Kong very similar in the layout when you walk into main street! It has a very familiar feel. One of the rides its a Small World is absolutely fabulous and worth doing. The day we visited was fairly hot and relatively busy but the queues moved fairly well.\nDisneyland_HongKong\n\n\n670682799\n4\n2019-5\nPhilippines\nIts been a while since d last time we visit HK Disneyland .. Yet, this time we only stay in Tomorrowland .. AKA Marvel land!Now they have Iron Man Experience n d Newly open Ant Man n d Wasp!!Ironman .. Great feature n so Exciting, especially d whole scenery of HK (HK central area to Kowloon)!Antman .. Changed by previous Buzz lightyear! More or less d same, but I'm expecting to have something most!!However, my boys like it!!Space Mountain .. Turns into Star Wars!! This 1 is Great!!!For cast members (staffs) .. Felt bit MINUS point from before!!! Just dun feel like its a Disney brand!! Seems more local like Ocean Park or even worst!!They got no SMILING face, but just wanna u to enter n attraction n leave!!Hello this is supposed to be Happiest Place on Earth brand!! But, just really Dont feel it!!Bakery in Main Street now have more attractive delicacies n Disney theme sweets .. These are Good Points!!Last, they also have Starbucks now inside the theme park!!\nDisneyland_HongKong\n\n\n670623270\n4\n2019-4\nUnited Arab Emirates\nThanks God it wasn t too hot or too humid when I was visiting the park otherwise it would be a big issue (there is not a lot of shade).I have arrived around 10:30am and left at 6pm. Unfortunately I didn t last until evening parade, but 8.5 hours was too much for me.There is plenty to do and everyone will find something interesting for themselves to enjoy.It wasn t extremely busy and the longest time I had to queue for certain attractions was 45 minutes (which is really not that bad).Although I had an amazing time, I felt a bit underwhelmed with choice of rides and attractions. The park itself is quite small (I was really expecting something grand even the main castle which was closed by the way was quite small).The food options are good, few coffee shops (including Starbucks) and plenty of gift shops. There was no issue with toilets as they are everywhere.All together it was a great day out and I really enjoyed it.\nDisneyland_HongKong\n\n\n670607911\n4\n2019-4\nAustralia\nHK Disneyland is a great compact park. Unfortunately there is quite a bit of maintenance work going on at present so a number of areas are closed off (including the famous castle) If you go midweek, it is not too crowded and certainly no where near as bus as LA Disneyland. We did notice on this visit that prices for food, drinks etc have really gone through the roof so be prepared to pay top dollar for snacks (and avoid the souvenir shops if you can) Regardless, kids will love it.\nDisneyland_HongKong\n\n\n670607296\n4\n2019-4\nUnited Kingdom\nthe location is not in the city, took around 1 hour from Kowlon, my kids like disneyland so much, everything is fine. but its really crowded and hot in Hong Kong\nDisneyland_HongKong\n\n\n670591897\n3\n2019-4\nSingapore\nHave been to Disney World, Disneyland Anaheim and Tokyo Disneyland but I feel that Disneyland Hong Kong is really too small to be called a Disneyland. It has way too few rides and attractions. Souvenirs, food and even entrance tickets are slightly more expensive than other Disneyland as well. Basically, this park is good only for small children and people who has never been to Disney. The food choices were acceptable, mostly fast food, and not too expensive. Bottled water, however, was VERY expensive but they do have water fountains around for you to refill your water bottles. The parade was pretty good. It was crowded not a problem but what was the problem was the people were just so rude, the pushing and shoving cutting in lines for the rides, gift shops, food stands was just to much to take. forget trying to see one of the shows its a free for all for seats, i don't see how Disney can let this happen, it was by far the worst managed Disney property.\nDisneyland_HongKong"
  },
  {
    "objectID": "materials/03-intro-to-r.html#how-many-are-male-on-biscoe-island-1",
    "href": "materials/03-intro-to-r.html#how-many-are-male-on-biscoe-island-1",
    "title": "",
    "section": "How many are male on Biscoe island?",
    "text": "How many are male on Biscoe island?\n\nR is case sensitive\nWhen in doubt, check spelling and punctuation\n\n\n1filter(penguins, sex == \"male\", island == \"Biscoe\")\n\n\n1\n\nIn this case, we didn‚Äôt originally capitalize the ‚ÄúB‚Äù in Biscoe.\n\n\n\n\n\n\n# A tibble: 83 √ó 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Biscoe           37.7          18.7               180        3600\n 2 Adelie  Biscoe           38.2          18.1               185        3950\n 3 Adelie  Biscoe           38.8          17.2               180        3800\n 4 Adelie  Biscoe           40.6          18.6               183        3550\n 5 Adelie  Biscoe           40.5          18.9               180        3950\n 6 Adelie  Biscoe           40.1          18.9               188        4300\n 7 Adelie  Biscoe           42            19.5               200        4050\n 8 Adelie  Biscoe           41.4          18.6               191        3700\n 9 Adelie  Biscoe           40.6          18.8               193        3800\n10 Adelie  Biscoe           37.6          19.1               194        3750\n# ‚Ñπ 73 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "materials/03-intro-to-r.html#chaining-functions",
    "href": "materials/03-intro-to-r.html#chaining-functions",
    "title": "",
    "section": "Chaining functions",
    "text": "Chaining functions\n\npenguins |&gt; \n  filter(sex == \"female\") |&gt; \n  arrange(flipper_length_mm) |&gt; \n  head()\n\n\n\n# A tibble: 6 √ó 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe              37.9          18.6               172        3150\n2 Adelie    Biscoe              37.8          18.3               174        3400\n3 Adelie    Torgersen           40.2          17                 176        3450\n4 Adelie    Dream               39.5          16.7               178        3250\n5 Adelie    Dream               33.1          16.1               178        2900\n6 Chinstrap Dream               46.1          18.2               178        3250\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "materials/03-intro-to-r.html#other-ways-to-filer",
    "href": "materials/03-intro-to-r.html#other-ways-to-filer",
    "title": "",
    "section": "Other ways to filer",
    "text": "Other ways to filer\n\nUsing Boolean operators\n\n\n\n# A tibble: 242 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           40.3          18                 195        3250\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           41.1          17.6               182        3200\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Torgersen           46            21.5               194        4200\n 6 Adelie  Biscoe              40.6          18.6               183        3550\n 7 Adelie  Biscoe              40.5          17.9               187        3200\n 8 Adelie  Biscoe              40.5          18.9               180        3950\n 9 Adelie  Dream               40.9          18.9               184        3900\n10 Adelie  Dream               42.2          18.5               180        3550\n# ‚Ñπ 232 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n# A tibble: 242 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           40.3          18                 195        3250\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           41.1          17.6               182        3200\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Torgersen           46            21.5               194        4200\n 6 Adelie  Biscoe              40.6          18.6               183        3550\n 7 Adelie  Biscoe              40.5          17.9               187        3200\n 8 Adelie  Biscoe              40.5          18.9               180        3950\n 9 Adelie  Dream               40.9          18.9               184        3900\n10 Adelie  Dream               42.2          18.5               180        3550\n# ‚Ñπ 232 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nBy missing values\n\n\n\n# A tibble: 2 √ó 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen             NA            NA                NA          NA\n2 Gentoo  Biscoe                NA            NA                NA          NA\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n# A tibble: 342 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           34.1          18.1               193        3475\n 9 Adelie  Torgersen           42            20.2               190        4250\n10 Adelie  Torgersen           37.8          17.1               186        3300\n# ‚Ñπ 332 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "materials/03-intro-to-r.html#making-new-variables",
    "href": "materials/03-intro-to-r.html#making-new-variables",
    "title": "",
    "section": "Making new variables",
    "text": "Making new variables"
  },
  {
    "objectID": "materials/03-intro-to-r.html#making-new-variables-1",
    "href": "materials/03-intro-to-r.html#making-new-variables-1",
    "title": "",
    "section": "Making new variables",
    "text": "Making new variables\nNow let‚Äôs make a new variable based on flipper length that groups them into buckets of ‚Äúshort‚Äù, ‚Äúaverage‚Äù, and ‚Äúlong‚Äù."
  },
  {
    "objectID": "materials/03-intro-to-r.html#summarize-data",
    "href": "materials/03-intro-to-r.html#summarize-data",
    "title": "",
    "section": "Summarize data",
    "text": "Summarize data\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(avg_flipper_length = mean(flipper_length_mm))\n\n\n\n# A tibble: 3 √ó 2\n  species   avg_flipper_length\n  &lt;fct&gt;                  &lt;dbl&gt;\n1 Adelie                   NA \n2 Chinstrap               196.\n3 Gentoo                   NA"
  },
  {
    "objectID": "materials/03-intro-to-r.html#summarize-data-1",
    "href": "materials/03-intro-to-r.html#summarize-data-1",
    "title": "",
    "section": "Summarize data",
    "text": "Summarize data\n#| echo: true\n#| output-location: fragment\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(avg_flipper_length = mean(flipper_length_mm, na.rm = TRUE))"
  },
  {
    "objectID": "materials/03-intro-to-r.html#intro-to-ggplot2",
    "href": "materials/03-intro-to-r.html#intro-to-ggplot2",
    "title": "",
    "section": "Intro to ggplot2",
    "text": "Intro to ggplot2"
  },
  {
    "objectID": "materials/03-intro-to-r.html#intro-to-ggplot2-1",
    "href": "materials/03-intro-to-r.html#intro-to-ggplot2-1",
    "title": "",
    "section": "Intro to ggplot2",
    "text": "Intro to ggplot2"
  },
  {
    "objectID": "materials/03-intro-to-r.html#getting-started-3",
    "href": "materials/03-intro-to-r.html#getting-started-3",
    "title": "",
    "section": "Getting Started",
    "text": "Getting Started\n Open 03-intro-to-r/02-our-data.R in RStudio"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-4",
    "href": "materials/03-intro-to-r.html#examine-the-data-4",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n\n\n\n\nReview_ID\nRating\nYear_Month\nReviewer_Location\nReview_Text\nBranch\n\n\n\n\n1879452\n5\nmissing\nUnited Kingdom\nDid the kids free trip last week in March no crowds great weather. Stayed at Hotel Cheyenne great value. Lots to see and do. Felt the Magic, bigtime. Breakfast included lots of choices for lunch and diner you get what you pay for. Try Billy Bobs buffet or Disney hotel (make reservations for that one) for a really good evening meal, well worth paying extra for.Everyone spoke good English. Character breakfast great. Always carry a camera and spare film and bottles of water. Loved the parades and shows or shorter lines for rides when parades are on.Also stayed at Golden Tulip Hotel Bussey st George 5 mins down the road. 35 Euros per person per night with breakfast. Across from train station Easy traveling for Paris Hotel gave lots of information on special price train tickets. Good dinner in hotel. Four adults and three kids went on this trip and we all came home happy.\nDisneyland_Paris\n\n\n1765031\n5\nmissing\nUnited Kingdom\ni went to disneyland paris in july 03 and thought it was brilliant. i visited all the hotels and stayed in the newport bay and also the kyriad hotels. the newport is a really nice hotel within walking distance of the parks. very big hotel. the kyriad is further away but still a really nice hotel..i saw all rooms at all hotels and they are all pretty much the same. thought the parks were brill and as it was july didn't really have to queue that much i thought. the food was the most expensive thing there. i did the character breakfast which is a must especially if you have young kids and also did buffalo bills which is a really good night. stayed up til late in the nightclub which i didn't think was expensive at all and it was free entry as we were staying in the disney hotel.. altogether a really good 4 nts that we were there even better that it was all free!!!!!! can't wait to go back\nDisneyland_Paris\n\n\n1659553\n5\nmissing\nCanada\n2 adults and 1 child of 11 visited Disneyland Paris beginning of Feb 04 and had an absolute fantastic time.We went on a Thursday for 3 nights and there were no queues until the Saturday when lots more people seemed to arrive.We stayed in the Sequioa Lodge which was really nice, drinks in the hotel were pretty expensive but we were expecting that and found it cheaper to buy alcohol from the in hotel shop!!The rides were fantastic much better than i ever expected and we did the park 1 day and the studios 1 day then anything that we wanted to do again we did on the 3rd day.The parades were amazing and i would highly recommend that you try and fit time in to watch at least the fantallusion show of an evening as it's just magical.Yes i agree with some of the other reviews that things were expensive but what theme park can you go to where prices are reasonable????All in all we had an absolute magical time, but would recommend that if you want to fit everything in go mid week and try to avoid childrens holidays.\nDisneyland_Paris\n\n\n1645894\n5\nmissing\nSouth Africa\nMy eleven year old daughter and myself went to visit my son in London and we decided to go on to Disneyland Paris. We stayed for two nights and three days at the Hotel Du Moulon, which was great value for money and close to Disneyland. The highlight of our stay was the Walt Disney Studios. Unfortunately, by the third day we had to rush to see everything, so I would suggest three nights and four days to do and see all. We went in May, which I would recommend to all, as the lines on most rides were not very long and the weather is also good.Colleen Smit\nDisneyland_Paris\n\n\n1618637\n4\nmissing\nUnited States\nThis hotel, part of the Disneyland Paris complex, is a wonderful place for families. Since we have 3 kids, we needed a room with a crew area . This consisted of a nice bath with separate toilet area from the shower tub, a large room with TV and 2 double beds, plus a smaller room with bunk beds and a 2nd TV. The rate was reasonable and included unlimited entry to the park. Also included was a wonderful breakfast. The service was fantastic. The only drawback throughout Europe was the size of their bath cloths. They are much too large. Larger than our hand towels. Carry your own wash cloths with you!\nDisneyland_Paris\n\n\n1536786\n4\nmissing\nUnited Kingdom\nI went to the Disneyparis resort, in 1996, with a small child. The minute you enter, the transport to disneyland paris, you are treated like a special guest. The compnay really know how to treat there guest from start to finsh. We arrive at the disneyland resort. The hotels are out of this world, like a storybook coming alive, in front of your eyes. The hotel Santa Fa, is based around a mexico villiage, all rooms are themed in a mexico style. Large beds and large rooms. the one disadvantage is no swimming pool, which would be have been great in a french climate( we went in June) 90 100 degrees everyday. the hotel has playgrounds and themed facilities. There is a nice walk to the disneyland parks and boardwalks. It takes around 20 mins on foot.We are revisting Disneyland paris resort in 2004, I would like to stay at this hotel, very friendly and helpful. It is a change from beach resort, with magic and fun as a added extra, disney magic is never forgotten,. Yours michelle Pilling\nDisneyland_Paris"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-5",
    "href": "materials/03-intro-to-r.html#examine-the-data-5",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n\nhead(df$Reviewer_Location)\n\n\n[1] \"Australia\"            \"Philippines\"          \"United Arab Emirates\"\n[4] \"Australia\"            \"United Kingdom\"       \"Singapore\""
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-6",
    "href": "materials/03-intro-to-r.html#examine-the-data-6",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n\n\n\n\nReview_ID\nRating\nYear_Month\nReviewer_Location\nReview_Text\nBranch\n\n\n\n\n1879452\n5\nmissing\nUnited Kingdom\nDid the kids free trip last week in March no crowds great weather. Stayed at Hotel Cheyenne great value. Lots to see and do. Felt the Magic, bigtime. Breakfast included lots of choices for lunch and diner you get what you pay for. Try Billy Bobs buffet or Disney hotel (make reservations for that one) for a really good evening meal, well worth paying extra for.Everyone spoke good English. Character breakfast great. Always carry a camera and spare film and bottles of water. Loved the parades and shows or shorter lines for rides when parades are on.Also stayed at Golden Tulip Hotel Bussey st George 5 mins down the road. 35 Euros per person per night with breakfast. Across from train station Easy traveling for Paris Hotel gave lots of information on special price train tickets. Good dinner in hotel. Four adults and three kids went on this trip and we all came home happy.\nDisneyland_Paris\n\n\n1765031\n5\nmissing\nUnited Kingdom\ni went to disneyland paris in july 03 and thought it was brilliant. i visited all the hotels and stayed in the newport bay and also the kyriad hotels. the newport is a really nice hotel within walking distance of the parks. very big hotel. the kyriad is further away but still a really nice hotel..i saw all rooms at all hotels and they are all pretty much the same. thought the parks were brill and as it was july didn't really have to queue that much i thought. the food was the most expensive thing there. i did the character breakfast which is a must especially if you have young kids and also did buffalo bills which is a really good night. stayed up til late in the nightclub which i didn't think was expensive at all and it was free entry as we were staying in the disney hotel.. altogether a really good 4 nts that we were there even better that it was all free!!!!!! can't wait to go back\nDisneyland_Paris\n\n\n1659553\n5\nmissing\nCanada\n2 adults and 1 child of 11 visited Disneyland Paris beginning of Feb 04 and had an absolute fantastic time.We went on a Thursday for 3 nights and there were no queues until the Saturday when lots more people seemed to arrive.We stayed in the Sequioa Lodge which was really nice, drinks in the hotel were pretty expensive but we were expecting that and found it cheaper to buy alcohol from the in hotel shop!!The rides were fantastic much better than i ever expected and we did the park 1 day and the studios 1 day then anything that we wanted to do again we did on the 3rd day.The parades were amazing and i would highly recommend that you try and fit time in to watch at least the fantallusion show of an evening as it's just magical.Yes i agree with some of the other reviews that things were expensive but what theme park can you go to where prices are reasonable????All in all we had an absolute magical time, but would recommend that if you want to fit everything in go mid week and try to avoid childrens holidays.\nDisneyland_Paris\n\n\n1645894\n5\nmissing\nSouth Africa\nMy eleven year old daughter and myself went to visit my son in London and we decided to go on to Disneyland Paris. We stayed for two nights and three days at the Hotel Du Moulon, which was great value for money and close to Disneyland. The highlight of our stay was the Walt Disney Studios. Unfortunately, by the third day we had to rush to see everything, so I would suggest three nights and four days to do and see all. We went in May, which I would recommend to all, as the lines on most rides were not very long and the weather is also good.Colleen Smit\nDisneyland_Paris\n\n\n1618637\n4\nmissing\nUnited States\nThis hotel, part of the Disneyland Paris complex, is a wonderful place for families. Since we have 3 kids, we needed a room with a crew area . This consisted of a nice bath with separate toilet area from the shower tub, a large room with TV and 2 double beds, plus a smaller room with bunk beds and a 2nd TV. The rate was reasonable and included unlimited entry to the park. Also included was a wonderful breakfast. The service was fantastic. The only drawback throughout Europe was the size of their bath cloths. They are much too large. Larger than our hand towels. Carry your own wash cloths with you!\nDisneyland_Paris\n\n\n1536786\n4\nmissing\nUnited Kingdom\nI went to the Disneyparis resort, in 1996, with a small child. The minute you enter, the transport to disneyland paris, you are treated like a special guest. The compnay really know how to treat there guest from start to finsh. We arrive at the disneyland resort. The hotels are out of this world, like a storybook coming alive, in front of your eyes. The hotel Santa Fa, is based around a mexico villiage, all rooms are themed in a mexico style. Large beds and large rooms. the one disadvantage is no swimming pool, which would be have been great in a french climate( we went in June) 90 100 degrees everyday. the hotel has playgrounds and themed facilities. There is a nice walk to the disneyland parks and boardwalks. It takes around 20 mins on foot.We are revisting Disneyland paris resort in 2004, I would like to stay at this hotel, very friendly and helpful. It is a change from beach resort, with magic and fun as a added extra, disney magic is never forgotten,. Yours michelle Pilling\nDisneyland_Paris"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-7",
    "href": "materials/03-intro-to-r.html#examine-the-data-7",
    "title": "",
    "section": "Examine the Data",
    "text": "Examine the Data\n\n\nhead(df$Reviewer_Location)\n\n\n[1] \"Australia\"            \"Philippines\"          \"United Arab Emirates\"\n[4] \"Australia\"            \"United Kingdom\"       \"Singapore\""
  },
  {
    "objectID": "materials/03-intro-to-r.html#which-parks-have-been-reviewed",
    "href": "materials/03-intro-to-r.html#which-parks-have-been-reviewed",
    "title": "",
    "section": "Which parks have been reviewed?",
    "text": "Which parks have been reviewed?\nThe unique function lists only the different values in a string or column. It is particularly useful when looking at a limited list of options (action types, fundraiser names, etc.)\n\n\nunique(df$Branch)\n\n\n\n[1] \"Disneyland_California\" \"Disneyland_HongKong\"   \"Disneyland_Paris\""
  },
  {
    "objectID": "materials/03-intro-to-r.html#clean-up-park-names",
    "href": "materials/03-intro-to-r.html#clean-up-park-names",
    "title": "",
    "section": "Clean up Park Names",
    "text": "Clean up Park Names\nHere we use two dplyr functions: mutate and rename to remove Disneyland_ from the start of our values and choose a different column name.\n\n\ndf &lt;- df |&gt;\n  mutate(Branch = case_match(Branch,\n                             \"Disneyland_California\" ~ \"California\",\n                             \"Disneyland_HongKong\" ~ \"Hong Kong\",\n                             \"Disneyland_Paris\" ~ \"Paris\")) |&gt;\n  rename(\"Park\" = Branch)\n\nunique(df$Park)\n\n\n\n[1] \"California\" \"Hong Kong\"  \"Paris\""
  },
  {
    "objectID": "materials/03-intro-to-r.html#look-at-our-starting-data-set",
    "href": "materials/03-intro-to-r.html#look-at-our-starting-data-set",
    "title": "",
    "section": "Look at our starting data set",
    "text": "Look at our starting data set\n\nglimpse(df)\n\n\n\nRows: 1,000\nColumns: 6\n$ Review_ID         &lt;dbl&gt; 305683957, 666364898, 293082325, 334650140, 39355304‚Ä¶\n$ Rating            &lt;dbl&gt; 5, 3, 3, 1, 3, 5, 5, 5, 5, 5, 5, 3, 3, 5, 4, 3, 5, 4‚Ä¶\n$ Year_Month        &lt;date&gt; 2015-08-01, 2018-10-01, 2015-06-01, 2015-11-01, 201‚Ä¶\n$ Reviewer_Location &lt;chr&gt; \"Portugal\", \"United States\", \"United States\", \"Unite‚Ä¶\n$ Review_Text       &lt;chr&gt; \"I  ve previously been to 3 Disney Resorts. So I had‚Ä¶\n$ Park              &lt;chr&gt; \"California\", \"Hong Kong\", \"Paris\", \"Paris\", \"Hong K‚Ä¶"
  },
  {
    "objectID": "materials/04-r-text-mining.html#distribution-of-ratings",
    "href": "materials/04-r-text-mining.html#distribution-of-ratings",
    "title": "",
    "section": "Distribution of Ratings",
    "text": "Distribution of Ratings\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#by-park-histogram",
    "href": "materials/04-r-text-mining.html#by-park-histogram",
    "title": "",
    "section": "By park (histogram)",
    "text": "By park (histogram)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#by-park-box-plot",
    "href": "materials/04-r-text-mining.html#by-park-box-plot",
    "title": "",
    "section": "By park (box plot)",
    "text": "By park (box plot)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#convert-it-to-a-tibble",
    "href": "materials/04-r-text-mining.html#convert-it-to-a-tibble",
    "title": "",
    "section": "Convert it to a tibble",
    "text": "Convert it to a tibble\n\n\nsample &lt;- tibble(\n  line = 1,\n  text = df$Review_Text[11]\n)\n\nsample\n\n\n# A tibble: 1 √ó 2\n   line text                                                                    \n  &lt;dbl&gt; &lt;chr&gt;                                                                   \n1     1 I went there with 2 daughters   1 y.o. and 4 y.o. Both of them were ver‚Ä¶\n\n\n\n\n\nWhat is a tibble?"
  },
  {
    "objectID": "materials/04-r-text-mining.html#unnest-tokens",
    "href": "materials/04-r-text-mining.html#unnest-tokens",
    "title": "",
    "section": "Unnest Tokens",
    "text": "Unnest Tokens\n\n\n# Unnest tokens\ntidy_reviews &lt;- reviews |&gt; \n  unnest_tokens(word, text)\n\nhead(tidy_reviews)\n\n\n# A tibble: 6 √ó 3\n  Park       linenumber word      \n  &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;     \n1 California          1 i         \n2 California          1 ve        \n3 California          1 previously\n4 California          1 been      \n5 California          1 to        \n6 California          1 3"
  },
  {
    "objectID": "materials/04-r-text-mining.html#word-count",
    "href": "materials/04-r-text-mining.html#word-count",
    "title": "",
    "section": "Word Count",
    "text": "Word Count\n\n\ntidy_sample |&gt; \n  count(word, sort = TRUE) |&gt; \n  head()\n\n\n# A tibble: 6 √ó 2\n  word          n\n  &lt;chr&gt;     &lt;int&gt;\n1 were          3\n2 and           2\n3 fantastic     2\n4 of            2\n5 11            1\n6 3             1"
  },
  {
    "objectID": "materials/04-r-text-mining.html#word-count-wo-stop-words",
    "href": "materials/04-r-text-mining.html#word-count-wo-stop-words",
    "title": "",
    "section": "Word Count w/o Stop Words",
    "text": "Word Count w/o Stop Words\n\n\n# Word count without stop words\ntidy_sample |&gt; \n  anti_join(stop_words) |&gt; \n  count(word, sort = TRUE) |&gt; \n  head()\n\n\n# A tibble: 6 √ó 2\n  word          n\n  &lt;chr&gt;     &lt;int&gt;\n1 fantastic     2\n2 11            1\n3 3             1\n4 3d            1\n5 6             1\n6 9             1"
  },
  {
    "objectID": "materials/03-intro-to-r.html#packages-1",
    "href": "materials/03-intro-to-r.html#packages-1",
    "title": "",
    "section": "Packages",
    "text": "Packages"
  },
  {
    "objectID": "materials/03-intro-to-r.html#installing-and-loading-packages",
    "href": "materials/03-intro-to-r.html#installing-and-loading-packages",
    "title": "",
    "section": "Installing and loading packages",
    "text": "Installing and loading packages\n# Install libraries\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\n\n# Load libraries\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(kableExtra) # Optional - only used for presentation tables"
  },
  {
    "objectID": "materials/03-intro-to-r.html#the-data-1",
    "href": "materials/03-intro-to-r.html#the-data-1",
    "title": "",
    "section": "The Data",
    "text": "The Data\n42,656 reviews from Disney California, Hong Kong, and Paris\n\n\n\n\n\nSource: Kaggle"
  },
  {
    "objectID": "materials/02-excel.html#why-choose-excel",
    "href": "materials/02-excel.html#why-choose-excel",
    "title": "",
    "section": "Why Choose Excel?",
    "text": "Why Choose Excel?\n\n\nPros\n\nUniversally available\nNot going anywhere\nLow barrier to entry\nScales in complexity\n\n\nCons\n\nCan be difficult to reproduce\nPotentially destructive\nDoesn‚Äôt scale well\nComplex formulas can be difficult"
  },
  {
    "objectID": "materials/02-excel.html#word-counts",
    "href": "materials/02-excel.html#word-counts",
    "title": "",
    "section": "Word Counts",
    "text": "Word Counts\n\nCan offer insights into how much someone has written\nAre people completing their contact reports?\nWhat is the average number of words people are writing?"
  },
  {
    "objectID": "materials/02-excel.html#vlookup",
    "href": "materials/02-excel.html#vlookup",
    "title": "",
    "section": "VLOOKUP",
    "text": "VLOOKUP\n\nNot necessarily for text mining, but a popular formula that causes people trouble\nPowerful, but can be slow when working with lots of data"
  },
  {
    "objectID": "materials/02-excel.html#absoluterelative-references",
    "href": "materials/02-excel.html#absoluterelative-references",
    "title": "",
    "section": "Absolute/Relative References",
    "text": "Absolute/Relative References\n\nRelative references can move.\nAbsolute references can‚Äôt move.\n\n\n\n\nReference\nResult When Copied\n\n\n\n\nA2\nThe row and column both change\n\n\n$A2\nThe column does not change\n\n\nA$2\nThe row does not change\n\n\n$A$2\nNeither the row nor the column change"
  },
  {
    "objectID": "materials/02-excel.html#keyword-searches",
    "href": "materials/02-excel.html#keyword-searches",
    "title": "",
    "section": "Keyword Searches",
    "text": "Keyword Searches\n\nHow can we find matches in our free text from a predefined list?\nNamed ranges in Excel\nCare with list creation (e.g.¬†‚Äútrust‚Äù)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#why-visualize",
    "href": "materials/04-r-text-mining.html#why-visualize",
    "title": "",
    "section": "Why Visualize?",
    "text": "Why Visualize?\n\nGives us a sense of the data\nSee the distribution of the data\nRaise questions to explore\nHelp shape your process"
  },
  {
    "objectID": "materials/04-r-text-mining.html#ratings-by-park",
    "href": "materials/04-r-text-mining.html#ratings-by-park",
    "title": "",
    "section": "Ratings by Park",
    "text": "Ratings by Park\n\n\ndf |&gt; \n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\") +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#avg-ratings-over-time",
    "href": "materials/04-r-text-mining.html#avg-ratings-over-time",
    "title": "",
    "section": "Avg Ratings Over Time",
    "text": "Avg Ratings Over Time"
  },
  {
    "objectID": "materials/05-python-text-mining.html#libraries",
    "href": "materials/05-python-text-mining.html#libraries",
    "title": "",
    "section": "Libraries",
    "text": "Libraries\n\n# General purpose\nfrom collections import Counter\nimport numpy as np\nimport os\nimport warnings\nwarnings.filterwarnings(action = 'ignore')\n\n# Data wrangling\nimport pandas as pd  # similar to tidyverse\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "materials/05-python-text-mining.html#load-data",
    "href": "materials/05-python-text-mining.html#load-data",
    "title": "",
    "section": "Load Data",
    "text": "Load Data\n\n# Import the data\ndf=pd.read_csv(\"DisneylandReviews.csv\", encoding='latin-1')"
  },
  {
    "objectID": "materials/05-python-text-mining.html#examine-data",
    "href": "materials/05-python-text-mining.html#examine-data",
    "title": "",
    "section": "Examine Data",
    "text": "Examine Data\n\ndf.head()\n\n\n\n\n\n\n\n\nReview_ID\nRating\nYear_Month\nReviewer_Location\nReview_Text\nBranch\n\n\n\n\n0\n670772142\n4\n2019-4\nAustralia\nIf you've ever been to Disneyland anywhere you...\nDisneyland_HongKong\n\n\n1\n670682799\n4\n2019-5\nPhilippines\nIts been a while since d last time we visit HK...\nDisneyland_HongKong\n\n\n2\n670623270\n4\n2019-4\nUnited Arab Emirates\nThanks God it wasn t too hot or too humid wh...\nDisneyland_HongKong\n\n\n3\n670607911\n4\n2019-4\nAustralia\nHK Disneyland is a great compact park. Unfortu...\nDisneyland_HongKong\n\n\n4\n670607296\n4\n2019-4\nUnited Kingdom\nthe location is not in the city, took around 1...\nDisneyland_HongKong"
  },
  {
    "objectID": "materials/05-python-text-mining.html#examine-data-1",
    "href": "materials/05-python-text-mining.html#examine-data-1",
    "title": "",
    "section": "Examine Data",
    "text": "Examine Data\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 42656 entries, 0 to 42655\nData columns (total 6 columns):\n #   Column             Non-Null Count  Dtype \n---  ------             --------------  ----- \n 0   Review_ID          42656 non-null  int64 \n 1   Rating             42656 non-null  int64 \n 2   Year_Month         42656 non-null  object\n 3   Reviewer_Location  42656 non-null  object\n 4   Review_Text        42656 non-null  object\n 5   Branch             42656 non-null  object\ndtypes: int64(2), object(4)\nmemory usage: 2.0+ MB"
  },
  {
    "objectID": "materials/05-python-text-mining.html#data-info",
    "href": "materials/05-python-text-mining.html#data-info",
    "title": "",
    "section": "Data Info",
    "text": "Data Info\n\nprint (\"Rows     : \" ,df.shape[0])\nprint (\"Columns  : \" ,df.shape[1])\nprint (\"\\nFeatures : \\n\" ,df.columns.tolist())\nprint (\"\\nMissing values :  \", df.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",df.nunique())\n\nRows     :  42656\nColumns  :  6\n\nFeatures : \n ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\n\nMissing values :   0\n\nUnique values :  \n Review_ID            42636\nRating                   5\nYear_Month             112\nReviewer_Location      162\nReview_Text          42632\nBranch                   3\ndtype: int64"
  },
  {
    "objectID": "materials/05-python-text-mining.html#sample-the-data",
    "href": "materials/05-python-text-mining.html#sample-the-data",
    "title": "",
    "section": "Sample the Data",
    "text": "Sample the Data\n\nThe random.seed(42) code ensures we all get the same sampled data\n\n\nnp.random.seed(42)\ndf=df.sample(n=1000)"
  },
  {
    "objectID": "materials/05-python-text-mining.html#examine-a-review",
    "href": "materials/05-python-text-mining.html#examine-a-review",
    "title": "",
    "section": "Examine a review",
    "text": "Examine a review\n\ndf.loc[:,'Review_Text'].values[10]\n\n\"I went there with 2 daughters   1 y.o. and 4 y.o. Both of them were very excited. Little one liked most of the rides (the only one she didn't like was  It's a little world . It was too long for her. Older one was super happy to see the real princesses :)\""
  },
  {
    "objectID": "materials/05-python-text-mining.html#prep-data",
    "href": "materials/05-python-text-mining.html#prep-data",
    "title": "",
    "section": "Prep Data",
    "text": "Prep Data\n\n# Convert to lowercase\ndf['Review_Text'] = df['Review_Text'].apply(lambda x : ' '.join(x.lower() for x in x.split()))\ndf['Review_Text'].head()\n\n31092    disneyland is so beautiful and large.to see al...\n28105    the lines for rides are too long. yes, the fas...\n1121     loved hong kong disneyland although it is much...\n17687    love disneyland! we are annual pass holders an...\n23059    the california adventure park is much improved...\nName: Review_Text, dtype: object\n\n\n\n# Remove punctuation\ndf['Review_Text'] = df['Review_Text'].str.replace('[^\\w\\s]', '')"
  },
  {
    "objectID": "materials/05-python-text-mining.html#remove-stop-words",
    "href": "materials/05-python-text-mining.html#remove-stop-words",
    "title": "",
    "section": "Remove Stop Words",
    "text": "Remove Stop Words\n\n# Import list of stop words\nstop = stopwords.words('english')\n\n# Create custom list of stop words\nwc_removals = ['day', 'disney', 'disneyland', 'rides', 'park']\n\n# Combine stop word lists\nstop_extended = stop + wc_removals\n\ndf['Clean_Text'] = df['Clean_Text'].apply(lambda x : ' '.join(x for x in x.split() if x not in stop_extended))\n\ndf['Clean_Text'].head()\n\n0    previously 3 resorts expectations sky high ori...\n1    hong kong quite small many people waiting line...\n2    wife 15 year old son went june 30 2015 hot sun...\n3    family unfortunate experience paris weekend 13...\n4    hk small lines big attractions long enjoy took...\nName: Clean_Text, dtype: object"
  },
  {
    "objectID": "materials/05-python-text-mining.html#lemmatizing",
    "href": "materials/05-python-text-mining.html#lemmatizing",
    "title": "",
    "section": "Lemmatizing",
    "text": "Lemmatizing\n\nlemmatizer = WordNetLemmatizer()\ndf['Review_Text'] = df['Review_Text'].apply(lambda x : \" \".join(lemmatizer.lemmatize(word) for word in x.split()))\n\ndf.head(n = 2)\n\n\n\n\n\n\n\n\nReview_ID\nRating\nYear_Month\nReviewer_Location\nReview_Text\nBranch\n\n\n\n\n0\n305683957\n5\n2015-08-01\nPortugal\npreviously 3 disney resorts. expectation sky h...\nDisneyland_California\n\n\n1\n666364898\n3\n2018-10-01\nUnited States\nhong kong disneyland quite small, many people ...\nDisneyland_HongKong"
  },
  {
    "objectID": "materials/05-python-text-mining.html#most-common-words",
    "href": "materials/05-python-text-mining.html#most-common-words",
    "title": "",
    "section": "Most Common Words",
    "text": "Most Common Words\n\nmost_common = Counter(' '.join(df['Clean_Text']).split()).most_common(20)\n\nmost_common_df = pd.DataFrame(most_common, columns = ['Words', 'Freq'])\n\nsns.barplot(data = most_common_df, x = 'Words', y = 'Freq')\nplt.title('20 Most Common Words')\nplt.xticks(rotation = 60)\nplt.show()"
  },
  {
    "objectID": "materials/05-python-text-mining.html#word-cloud",
    "href": "materials/05-python-text-mining.html#word-cloud",
    "title": "",
    "section": "Word Cloud",
    "text": "Word Cloud\n\nwordcloud = WordCloud(\n    # background_color=\"#6B5B95\",\n    colormap=\"Set2\",\n    collocations=False).generate(all_review_text)\n\nplt.figure(figsize=[11,11])\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"Disney Park Reviews\")\nplt.show()"
  },
  {
    "objectID": "materials/06-learning-more.html#give-yourself-grace",
    "href": "materials/06-learning-more.html#give-yourself-grace",
    "title": "",
    "section": "Give Yourself Grace",
    "text": "Give Yourself Grace\n\n\n\n\n\n\n\n‚ÄúArtwork by @allison_horst.‚Äù"
  },
  {
    "objectID": "materials/06-learning-more.html#be-patient",
    "href": "materials/06-learning-more.html#be-patient",
    "title": "",
    "section": "Be Patient",
    "text": "Be Patient\n\n\n\n\n\n\n\n‚ÄúArtwork by @allison_horst.‚Äù"
  },
  {
    "objectID": "materials/06-learning-more.html#workshop-related-links",
    "href": "materials/06-learning-more.html#workshop-related-links",
    "title": "",
    "section": "Workshop Related Links",
    "text": "Workshop Related Links\n\nR for Data Science\nText Mining with R\nDisneyland Reviews\nBig Book of R - Text Analysis"
  },
  {
    "objectID": "materials/06-learning-more.html#software-links",
    "href": "materials/06-learning-more.html#software-links",
    "title": "",
    "section": "Software Links",
    "text": "Software Links\n\nPosit (formerly RStudio)\nComprehensive R Network (CRAN)\nPython"
  },
  {
    "objectID": "materials/06-learning-more.html#other-r-links",
    "href": "materials/06-learning-more.html#other-r-links",
    "title": "",
    "section": "Other R Links",
    "text": "Other R Links\n\nBig Book of R\nHappy Git with R\nR for Excel Users"
  },
  {
    "objectID": "materials/04-r-text-mining.html#distribution-of-ratings-1",
    "href": "materials/04-r-text-mining.html#distribution-of-ratings-1",
    "title": "",
    "section": "Distribution of Ratings",
    "text": "Distribution of Ratings\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar() +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#distribution-of-ratings-2",
    "href": "materials/04-r-text-mining.html#distribution-of-ratings-2",
    "title": "",
    "section": "Distribution of Ratings",
    "text": "Distribution of Ratings\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#distribution-of-ratings-3",
    "href": "materials/04-r-text-mining.html#distribution-of-ratings-3",
    "title": "",
    "section": "Distribution of Ratings",
    "text": "Distribution of Ratings\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#distribution-of-ratings-4",
    "href": "materials/04-r-text-mining.html#distribution-of-ratings-4",
    "title": "",
    "section": "Distribution of Ratings",
    "text": "Distribution of Ratings\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal()\n\n\n\n\n\n\n\nAre there any thoughts or questions this raises?"
  },
  {
    "objectID": "materials/04-r-text-mining.html#ratings-by-park-1",
    "href": "materials/04-r-text-mining.html#ratings-by-park-1",
    "title": "",
    "section": "Ratings by Park",
    "text": "Ratings by Park\n\n\ndf |&gt; \n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\") +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#ratings-over-time",
    "href": "materials/04-r-text-mining.html#ratings-over-time",
    "title": "",
    "section": "Ratings over time",
    "text": "Ratings over time\nWhat if we wanted to look at the park ratings over time? What would we need to do?\n\nMake sure Year_Month is a date\nGroup by Park\nCount ratings per year"
  },
  {
    "objectID": "materials/04-r-text-mining.html#ratings-over-time-1",
    "href": "materials/04-r-text-mining.html#ratings-over-time-1",
    "title": "",
    "section": "Ratings Over Time",
    "text": "Ratings Over Time\n\n\ndf |&gt; \n  filter(Year_Month != \"missing\") |&gt; \n  mutate(Year_Month = ym(Year_Month),\n         Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt; \n  group_by(Park) |&gt; \n  count(Year) |&gt; \n  rename(Ratings = n)\n\n\n# A tibble: 30 √ó 3\n# Groups:   Park [3]\n   Park        Year Ratings\n   &lt;chr&gt;      &lt;dbl&gt;   &lt;int&gt;\n 1 California  2010      72\n 2 California  2011     953\n 3 California  2012    2310\n 4 California  2013    2328\n 5 California  2014    2643\n 6 California  2015    3239\n 7 California  2016    2800\n 8 California  2017    2064\n 9 California  2018    1501\n10 California  2019     292\n# ‚Ñπ 20 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#ratings-over-time-2",
    "href": "materials/04-r-text-mining.html#ratings-over-time-2",
    "title": "",
    "section": "Ratings Over Time",
    "text": "Ratings Over Time\n\n\ndf |&gt; \n  filter(Year_Month != \"missing\") |&gt; \n  mutate(Year_Month = ym(Year_Month),\n         Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt; \n  group_by(Park) |&gt; \n  count(Year) |&gt; \n  rename(Ratings = n) |&gt; \n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#ratings-over-time-3",
    "href": "materials/04-r-text-mining.html#ratings-over-time-3",
    "title": "",
    "section": "Ratings Over Time",
    "text": "Ratings Over Time\n\n\ndf |&gt; \n  filter(Year_Month != \"missing\") |&gt; \n  mutate(Year_Month = ym(Year_Month),\n         Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt; \n  group_by(Park) |&gt; \n  count(Year) |&gt; \n  rename(Ratings = n) |&gt; \n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#ratings-over-time-4",
    "href": "materials/04-r-text-mining.html#ratings-over-time-4",
    "title": "",
    "section": "Ratings Over Time",
    "text": "Ratings Over Time\n\n\ndf |&gt; \n  filter(Year_Month != \"missing\") |&gt; \n  mutate(Year_Month = ym(Year_Month),\n         Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt; \n  group_by(Park) |&gt; \n  count(Year) |&gt; \n  rename(Ratings = n) |&gt; \n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\") +\n    scale_x_continuous(breaks = c(2010,\n                                  2011,\n                                  2012,\n                                  2013,\n                                  2014,\n                                  2015,\n                                  2016,\n                                  2017,\n                                  2018,\n                                  2019,\n                                  2020))\n\n\n\n\n\n\n\n\ndf |&gt; \n  filter(Year_Month != \"missing\") |&gt; \n  mutate(Year_Month = ym(Year_Month),\n         Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt; \n  group_by(Park) |&gt; \n  count(Year) |&gt; \n  rename(Ratings = n) |&gt; \n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\") +\n    scale_x_continuous(breaks = c(2010,\n                                  2011,\n                                  2012,\n                                  2013,\n                                  2014,\n                                  2015,\n                                  2016,\n                                  2017,\n                                  2018,\n                                  2019,\n                                  2020)) +\n  ggthemes::theme_hc()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#ratings-over-time-5",
    "href": "materials/04-r-text-mining.html#ratings-over-time-5",
    "title": "",
    "section": "Ratings Over Time",
    "text": "Ratings Over Time\n\n\ndf |&gt; \n  filter(Year_Month != \"missing\",\n         Rating &lt; 4) |&gt; \n  mutate(Year_Month = ym(Year_Month),\n         Year = year(Year_Month)) |&gt; \n  group_by(Park, Year_Month) |&gt; \n  # summarise(avg_rating = mean(Rating, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = Year_Month, y = Park)) +\n  ggridges::geom_density_ridges(rel_min_height = 0.01,\n                                scale = 1.5) +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"\",\n       y = \"\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#advantages-of-unnest_tokens",
    "href": "materials/04-r-text-mining.html#advantages-of-unnest_tokens",
    "title": "",
    "section": "Advantages of unnest_tokens",
    "text": "Advantages of unnest_tokens\n\nsplits text into one word/token per row along with the original line number\ntakes care of converting to lowercase\nremoves punctuation"
  },
  {
    "objectID": "materials/04-r-text-mining.html#stop-words",
    "href": "materials/04-r-text-mining.html#stop-words",
    "title": "",
    "section": "Stop Words",
    "text": "Stop Words\n\n\nhead(stop_words)\n\n\n# A tibble: 6 √ó 2\n  word      lexicon\n  &lt;chr&gt;     &lt;chr&gt;  \n1 a         SMART  \n2 a's       SMART  \n3 able      SMART  \n4 about     SMART  \n5 above     SMART  \n6 according SMART"
  },
  {
    "objectID": "materials/04-r-text-mining.html#anti_join",
    "href": "materials/04-r-text-mining.html#anti_join",
    "title": "",
    "section": "anti_join",
    "text": "anti_join\n\nAn anti_join return all rows from the left table where there are not matching values in the right table, keeping just columns from the left table.\n\n\n\n\n\n\n\n\nSource"
  },
  {
    "objectID": "materials/03-intro-to-r.html#rstudio-ide",
    "href": "materials/03-intro-to-r.html#rstudio-ide",
    "title": "",
    "section": "RStudio IDE",
    "text": "RStudio IDE\n\nRStudio is an integrated development environment (IDE) for R and Python. It includes a console, syntax-highlighting editor that supports direct code execution, and tools for plotting, history, debugging, and workspace management. RStudio is available in open source and commercial editions and runs on the desktop (Windows, Mac, and Linux).\n\n\n\nSource: Posit"
  },
  {
    "objectID": "materials/03-intro-to-r.html#why-rstudioposit",
    "href": "materials/03-intro-to-r.html#why-rstudioposit",
    "title": "",
    "section": "Why RStudio/Posit?",
    "text": "Why RStudio/Posit?\n\nRStudio became Posit in July 2022\nNo need for attendees to install anything\nEverything in one place\nMultiple language support"
  },
  {
    "objectID": "materials/03-intro-to-r.html#other-ways-to-filter",
    "href": "materials/03-intro-to-r.html#other-ways-to-filter",
    "title": "",
    "section": "Other ways to filter",
    "text": "Other ways to filter\n\nUsing Boolean operators\n\n# Greater than\npenguins |&gt; \n  filter(bill_length_mm &lt; 40)\n\n# Greater than or equal to\npenguins |&gt; \n  filter(bill_length_mm &gt;= 40)"
  },
  {
    "objectID": "materials/03-intro-to-r.html#other-ways-to-filter-1",
    "href": "materials/03-intro-to-r.html#other-ways-to-filter-1",
    "title": "",
    "section": "Other ways to filter",
    "text": "Other ways to filter\n\nBy missing values\n\n# Flipper length is missing/blank\npenguins |&gt; \n  filter(is.na(flipper_length_mm))\n\n# Flipper length is NOT missing/blank\npenguins |&gt; \n1  filter(!is.na(flipper_length_mm))\n\n1\n\n! means ‚Äúnot‚Äù"
  },
  {
    "objectID": "materials/03-intro-to-r.html#ggplot2",
    "href": "materials/03-intro-to-r.html#ggplot2",
    "title": "",
    "section": "ggplot2",
    "text": "ggplot2\n\n\n\n\n\n\nNote\n\n\n ¬†¬†Code begins in the section labeled Intro to ggplot2"
  },
  {
    "objectID": "materials/03-intro-to-r.html#ggplot2-1",
    "href": "materials/03-intro-to-r.html#ggplot2-1",
    "title": "",
    "section": "ggplot2",
    "text": "ggplot2"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-headdf",
    "href": "materials/03-intro-to-r.html#examine-the-data-headdf",
    "title": "",
    "section": "Examine the Data (head(df))",
    "text": "Examine the Data (head(df))\n\n\n\n\n\nReview_ID\nRating\nYear_Month\nReviewer_Location\nReview_Text\nBranch\n\n\n\n\n670772142\n4\n2019-4\nAustralia\nIf you've ever been to Disneyland anywhere you'll find Disneyland Hong Kong very similar in the layout when you walk into main street! It has a very familiar feel. One of the rides its a Small World is absolutely fabulous and worth doing. The day we visited was fairly hot and relatively busy but the queues moved fairly well.\nDisneyland_HongKong\n\n\n670682799\n4\n2019-5\nPhilippines\nIts been a while since d last time we visit HK Disneyland .. Yet, this time we only stay in Tomorrowland .. AKA Marvel land!Now they have Iron Man Experience n d Newly open Ant Man n d Wasp!!Ironman .. Great feature n so Exciting, especially d whole scenery of HK (HK central area to Kowloon)!Antman .. Changed by previous Buzz lightyear! More or less d same, but I'm expecting to have something most!!However, my boys like it!!Space Mountain .. Turns into Star Wars!! This 1 is Great!!!For cast members (staffs) .. Felt bit MINUS point from before!!! Just dun feel like its a Disney brand!! Seems more local like Ocean Park or even worst!!They got no SMILING face, but just wanna u to enter n attraction n leave!!Hello this is supposed to be Happiest Place on Earth brand!! But, just really Dont feel it!!Bakery in Main Street now have more attractive delicacies n Disney theme sweets .. These are Good Points!!Last, they also have Starbucks now inside the theme park!!\nDisneyland_HongKong\n\n\n670623270\n4\n2019-4\nUnited Arab Emirates\nThanks God it wasn t too hot or too humid when I was visiting the park otherwise it would be a big issue (there is not a lot of shade).I have arrived around 10:30am and left at 6pm. Unfortunately I didn t last until evening parade, but 8.5 hours was too much for me.There is plenty to do and everyone will find something interesting for themselves to enjoy.It wasn t extremely busy and the longest time I had to queue for certain attractions was 45 minutes (which is really not that bad).Although I had an amazing time, I felt a bit underwhelmed with choice of rides and attractions. The park itself is quite small (I was really expecting something grand even the main castle which was closed by the way was quite small).The food options are good, few coffee shops (including Starbucks) and plenty of gift shops. There was no issue with toilets as they are everywhere.All together it was a great day out and I really enjoyed it.\nDisneyland_HongKong\n\n\n670607911\n4\n2019-4\nAustralia\nHK Disneyland is a great compact park. Unfortunately there is quite a bit of maintenance work going on at present so a number of areas are closed off (including the famous castle) If you go midweek, it is not too crowded and certainly no where near as bus as LA Disneyland. We did notice on this visit that prices for food, drinks etc have really gone through the roof so be prepared to pay top dollar for snacks (and avoid the souvenir shops if you can) Regardless, kids will love it.\nDisneyland_HongKong\n\n\n670607296\n4\n2019-4\nUnited Kingdom\nthe location is not in the city, took around 1 hour from Kowlon, my kids like disneyland so much, everything is fine. but its really crowded and hot in Hong Kong\nDisneyland_HongKong\n\n\n670591897\n3\n2019-4\nSingapore\nHave been to Disney World, Disneyland Anaheim and Tokyo Disneyland but I feel that Disneyland Hong Kong is really too small to be called a Disneyland. It has way too few rides and attractions. Souvenirs, food and even entrance tickets are slightly more expensive than other Disneyland as well. Basically, this park is good only for small children and people who has never been to Disney. The food choices were acceptable, mostly fast food, and not too expensive. Bottled water, however, was VERY expensive but they do have water fountains around for you to refill your water bottles. The parade was pretty good. It was crowded not a problem but what was the problem was the people were just so rude, the pushing and shoving cutting in lines for the rides, gift shops, food stands was just to much to take. forget trying to see one of the shows its a free for all for seats, i don't see how Disney can let this happen, it was by far the worst managed Disney property.\nDisneyland_HongKong"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-glimpsedf",
    "href": "materials/03-intro-to-r.html#examine-the-data-glimpsedf",
    "title": "",
    "section": "Examine the Data (glimpse(df))",
    "text": "Examine the Data (glimpse(df))\n\n\nRows: 42,656\nColumns: 6\n$ Review_ID         &lt;dbl&gt; 670772142, 670682799, 670623270, 670607911, 67060729‚Ä¶\n$ Rating            &lt;dbl&gt; 4, 4, 4, 4, 4, 3, 5, 3, 2, 5, 5, 5, 4, 5, 5, 3, 4, 3‚Ä¶\n$ Year_Month        &lt;chr&gt; \"2019-4\", \"2019-5\", \"2019-4\", \"2019-4\", \"2019-4\", \"2‚Ä¶\n$ Reviewer_Location &lt;chr&gt; \"Australia\", \"Philippines\", \"United Arab Emirates\", ‚Ä¶\n$ Review_Text       &lt;chr&gt; \"If you've ever been to Disneyland anywhere you'll f‚Ä¶\n$ Branch            &lt;chr&gt; \"Disneyland_HongKong\", \"Disneyland_HongKong\", \"Disne‚Ä¶"
  },
  {
    "objectID": "materials/03-intro-to-r.html#examine-the-data-taildf",
    "href": "materials/03-intro-to-r.html#examine-the-data-taildf",
    "title": "",
    "section": "Examine the Data (tail(df))",
    "text": "Examine the Data (tail(df))\n\n\n\n\n\nReview_ID\nRating\nYear_Month\nReviewer_Location\nReview_Text\nBranch\n\n\n\n\n1879452\n5\nmissing\nUnited Kingdom\nDid the kids free trip last week in March no crowds great weather. Stayed at Hotel Cheyenne great value. Lots to see and do. Felt the Magic, bigtime. Breakfast included lots of choices for lunch and diner you get what you pay for. Try Billy Bobs buffet or Disney hotel (make reservations for that one) for a really good evening meal, well worth paying extra for.Everyone spoke good English. Character breakfast great. Always carry a camera and spare film and bottles of water. Loved the parades and shows or shorter lines for rides when parades are on.Also stayed at Golden Tulip Hotel Bussey st George 5 mins down the road. 35 Euros per person per night with breakfast. Across from train station Easy traveling for Paris Hotel gave lots of information on special price train tickets. Good dinner in hotel. Four adults and three kids went on this trip and we all came home happy.\nDisneyland_Paris\n\n\n1765031\n5\nmissing\nUnited Kingdom\ni went to disneyland paris in july 03 and thought it was brilliant. i visited all the hotels and stayed in the newport bay and also the kyriad hotels. the newport is a really nice hotel within walking distance of the parks. very big hotel. the kyriad is further away but still a really nice hotel..i saw all rooms at all hotels and they are all pretty much the same. thought the parks were brill and as it was july didn't really have to queue that much i thought. the food was the most expensive thing there. i did the character breakfast which is a must especially if you have young kids and also did buffalo bills which is a really good night. stayed up til late in the nightclub which i didn't think was expensive at all and it was free entry as we were staying in the disney hotel.. altogether a really good 4 nts that we were there even better that it was all free!!!!!! can't wait to go back\nDisneyland_Paris\n\n\n1659553\n5\nmissing\nCanada\n2 adults and 1 child of 11 visited Disneyland Paris beginning of Feb 04 and had an absolute fantastic time.We went on a Thursday for 3 nights and there were no queues until the Saturday when lots more people seemed to arrive.We stayed in the Sequioa Lodge which was really nice, drinks in the hotel were pretty expensive but we were expecting that and found it cheaper to buy alcohol from the in hotel shop!!The rides were fantastic much better than i ever expected and we did the park 1 day and the studios 1 day then anything that we wanted to do again we did on the 3rd day.The parades were amazing and i would highly recommend that you try and fit time in to watch at least the fantallusion show of an evening as it's just magical.Yes i agree with some of the other reviews that things were expensive but what theme park can you go to where prices are reasonable????All in all we had an absolute magical time, but would recommend that if you want to fit everything in go mid week and try to avoid childrens holidays.\nDisneyland_Paris\n\n\n1645894\n5\nmissing\nSouth Africa\nMy eleven year old daughter and myself went to visit my son in London and we decided to go on to Disneyland Paris. We stayed for two nights and three days at the Hotel Du Moulon, which was great value for money and close to Disneyland. The highlight of our stay was the Walt Disney Studios. Unfortunately, by the third day we had to rush to see everything, so I would suggest three nights and four days to do and see all. We went in May, which I would recommend to all, as the lines on most rides were not very long and the weather is also good.Colleen Smit\nDisneyland_Paris\n\n\n1618637\n4\nmissing\nUnited States\nThis hotel, part of the Disneyland Paris complex, is a wonderful place for families. Since we have 3 kids, we needed a room with a crew area . This consisted of a nice bath with separate toilet area from the shower tub, a large room with TV and 2 double beds, plus a smaller room with bunk beds and a 2nd TV. The rate was reasonable and included unlimited entry to the park. Also included was a wonderful breakfast. The service was fantastic. The only drawback throughout Europe was the size of their bath cloths. They are much too large. Larger than our hand towels. Carry your own wash cloths with you!\nDisneyland_Paris\n\n\n1536786\n4\nmissing\nUnited Kingdom\nI went to the Disneyparis resort, in 1996, with a small child. The minute you enter, the transport to disneyland paris, you are treated like a special guest. The compnay really know how to treat there guest from start to finsh. We arrive at the disneyland resort. The hotels are out of this world, like a storybook coming alive, in front of your eyes. The hotel Santa Fa, is based around a mexico villiage, all rooms are themed in a mexico style. Large beds and large rooms. the one disadvantage is no swimming pool, which would be have been great in a french climate( we went in June) 90 100 degrees everyday. the hotel has playgrounds and themed facilities. There is a nice walk to the disneyland parks and boardwalks. It takes around 20 mins on foot.We are revisting Disneyland paris resort in 2004, I would like to stay at this hotel, very friendly and helpful. It is a change from beach resort, with magic and fun as a added extra, disney magic is never forgotten,. Yours michelle Pilling\nDisneyland_Paris"
  },
  {
    "objectID": "materials/03-intro-to-r.html#r-vs.-python",
    "href": "materials/03-intro-to-r.html#r-vs.-python",
    "title": "",
    "section": "R vs.¬†Python",
    "text": "R vs.¬†Python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR is a programming language started by professors Ross Ihaka and Robert Gentleman as a programming language to teach introductory statistics at the University of Auckland. It was developed in the early 1990‚Äôs and open sourced in 1995.\nFor the purposes of this workshop, there are no significant differences in R vs.¬†Python other than the language and packages/libraries used. I chose to start with R because that‚Äôs where I‚Äôm most comfortable, it‚Äôs the language that I see Apra promoting, and the community is incredibly welcoming and diverse."
  },
  {
    "objectID": "materials/03-intro-to-r.html#an-aside-on-piping",
    "href": "materials/03-intro-to-r.html#an-aside-on-piping",
    "title": "",
    "section": "An aside on piping",
    "text": "An aside on piping\n\n%&gt;% is the traditional method that came from the `magrittr` package\n|&gt; the ‚Äúnative‚Äù pipe that was introduced to R in version 4.1\nBoth work by ‚Äòpiping‚Äô information from the left hand side (LHS) to the right hand side (RHS)"
  },
  {
    "objectID": "materials/03-intro-to-r.html#dplyr-functions",
    "href": "materials/03-intro-to-r.html#dplyr-functions",
    "title": "",
    "section": "dplyr functions",
    "text": "dplyr functions\n\nmutate() create variables (columns)\nselect() subset variables\nfilter() subset observations (rows) based on criteria\nsummarise() reduces multiple observations down to a single summary\narrange() change the ordering of observations"
  },
  {
    "objectID": "materials/03-intro-to-r.html#dplyr-vs-base-r",
    "href": "materials/03-intro-to-r.html#dplyr-vs-base-r",
    "title": "",
    "section": "dplyr vs ‚Äòbase R‚Äô",
    "text": "dplyr vs ‚Äòbase R‚Äô\n\n\n\n\n\n\n\nSource: dplyr base R"
  },
  {
    "objectID": "materials/03-intro-to-r.html#posit-cloud",
    "href": "materials/03-intro-to-r.html#posit-cloud",
    "title": "",
    "section": "Posit Cloud",
    "text": "Posit Cloud\n\n\n\n\n\n\nTip\n\n\nEverything in this workshop can be done through the virtual project. Scan the QR code or visit the URL to get started.\n\n\n\n\nhttps://posit.cloud/"
  },
  {
    "objectID": "materials/03-intro-to-r.html#what-are-packages",
    "href": "materials/03-intro-to-r.html#what-are-packages",
    "title": "",
    "section": "What are packages?",
    "text": "What are packages?\n\nLibraries of code\nExpand the ‚Äúbase R‚Äù code\nFor almost anything you need\nBeware of relying too heavily on niche packages"
  },
  {
    "objectID": "materials/03-intro-to-r.html#example-packages",
    "href": "materials/03-intro-to-r.html#example-packages",
    "title": "",
    "section": "Example packages",
    "text": "Example packages\n\n\n\nPackage\nDescription\n\n\n\n\nDBI\nConnect to databases\n\n\ngooglesheets\nAccess data in Google Sheets\n\n\njanitor\nClean up data\n\n\nopenxlsx\nRead, write, and edit .xlsx files\n\n\nshiny\nInteractive widgets"
  },
  {
    "objectID": "materials/03-intro-to-r.html#installing-and-using-packages",
    "href": "materials/03-intro-to-r.html#installing-and-using-packages",
    "title": "",
    "section": "Installing and using packages",
    "text": "Installing and using packages\nInstalling packages only needs to be done once.\ninstall.packages(\"DBI\")\nPackages need to be loaded either at the start of your session, or as you use them.\nlibrary(DBI)\nDBI::dbConnect()\n\n\nBeware of dependencies."
  },
  {
    "objectID": "materials/03-intro-to-r.html#community",
    "href": "materials/03-intro-to-r.html#community",
    "title": "",
    "section": "Community",
    "text": "Community\n\n\n\n\n\n\n\n‚ÄúArtwork by @allison_horst.‚Äù"
  },
  {
    "objectID": "materials/03-intro-to-r.html#tidyverse-packages",
    "href": "materials/03-intro-to-r.html#tidyverse-packages",
    "title": "",
    "section": "tidyverse packages",
    "text": "tidyverse packages\n\n\n\n\n\n\n\nSource: RStudio Education"
  },
  {
    "objectID": "materials/03-intro-to-r.html#column-names",
    "href": "materials/03-intro-to-r.html#column-names",
    "title": "",
    "section": "Column names",
    "text": "Column names\nSometimes it is nice to remind yourself of the names of your columns, or to be able to refer to them by their position.\n\ncolnames(penguins)\n\n\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\""
  },
  {
    "objectID": "materials/03-intro-to-r.html#examining-the-data-with-dplyr",
    "href": "materials/03-intro-to-r.html#examining-the-data-with-dplyr",
    "title": "",
    "section": "Examining the data with dplyr",
    "text": "Examining the data with dplyr\ndplyr also offers a function to view the data that is a little easier to use in the console.\n\nglimpse(penguins)\n\n\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "materials/03-intro-to-r.html#the-data",
    "href": "materials/03-intro-to-r.html#the-data",
    "title": "",
    "section": "The Data",
    "text": "The Data\n42,6561 reviews from Disney California, Hong Kong, and Paris\n\n\n\n\n\nSource: Kaggle\nDownsampled to 1,000 for this workshop"
  },
  {
    "objectID": "materials/03-intro-to-r.html#read-the-data",
    "href": "materials/03-intro-to-r.html#read-the-data",
    "title": "",
    "section": "Read the data",
    "text": "Read the data\n Open 03-intro-to-r/02-our-data.R in RStudio if you‚Äôd like to follow along.\n\n# Load libraries\nlibrary(tidyverse)\n\n# Read in the data\n# df &lt;- read_csv(\"DisneylandReviews.csv\")\nload(\"workshop_data.RData\")\n\n\n\n\n\n\nThe code to load the CSV is included for reference, but will not be used in this workshop."
  },
  {
    "objectID": "materials/03-intro-to-r.html#str",
    "href": "materials/03-intro-to-r.html#str",
    "title": "",
    "section": "str",
    "text": "str\nLook at the structure of the data using base R.\n\nstr(df)\n\n\n\nspc_tbl_ [1,000 √ó 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Review_ID        : num [1:1000] 3.06e+08 6.66e+08 2.93e+08 3.35e+08 3.94e+08 ...\n $ Rating           : num [1:1000] 5 3 3 1 3 5 5 5 5 5 ...\n $ Year_Month       : Date[1:1000], format: \"2015-08-01\" \"2018-10-01\" ...\n $ Reviewer_Location: chr [1:1000] \"Portugal\" \"United States\" \"United States\" \"United Kingdom\" ...\n $ Review_Text      : chr [1:1000] \"I  ve previously been to 3 Disney Resorts. So I had my expectations sky high for the original park. And they we\"| __truncated__ \"The Hong Kong Disneyland is quite small, there are too many people and the waiting line is long. it took averag\"| __truncated__ \"My wife, my 15 year old son, and I went to Disneyland Park on June 30, 2015; a hot, sunny, 95 degree day.We kne\"| __truncated__ \"Our family had the unfortunate experience of being in Paris on the weekend of 13th   16th November during the t\"| __truncated__ ...\n $ Branch           : chr [1:1000] \"Disneyland_California\" \"Disneyland_HongKong\" \"Disneyland_Paris\" \"Disneyland_Paris\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Review_ID = col_double(),\n  ..   Rating = col_double(),\n  ..   Year_Month = col_character(),\n  ..   Reviewer_Location = col_character(),\n  ..   Review_Text = col_character(),\n  ..   Branch = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt;"
  },
  {
    "objectID": "materials/03-intro-to-r.html#glimpse",
    "href": "materials/03-intro-to-r.html#glimpse",
    "title": "",
    "section": "glimpse",
    "text": "glimpse\nglimpse is a function from dplyr that allows for a different way to view your data.\n\nglimpse(df)\n\n\n\nRows: 1,000\nColumns: 6\n$ Review_ID         &lt;dbl&gt; 305683957, 666364898, 293082325, 334650140, 39355304‚Ä¶\n$ Rating            &lt;dbl&gt; 5, 3, 3, 1, 3, 5, 5, 5, 5, 5, 5, 3, 3, 5, 4, 3, 5, 4‚Ä¶\n$ Year_Month        &lt;date&gt; 2015-08-01, 2018-10-01, 2015-06-01, 2015-11-01, 201‚Ä¶\n$ Reviewer_Location &lt;chr&gt; \"Portugal\", \"United States\", \"United States\", \"Unite‚Ä¶\n$ Review_Text       &lt;chr&gt; \"I  ve previously been to 3 Disney Resorts. So I had‚Ä¶\n$ Branch            &lt;chr&gt; \"Disneyland_California\", \"Disneyland_HongKong\", \"Dis‚Ä¶"
  },
  {
    "objectID": "materials/03-intro-to-r.html#head",
    "href": "materials/03-intro-to-r.html#head",
    "title": "",
    "section": "head",
    "text": "head\nhead returns the first n-rows (defaults to 6).\n\nhead(df)\n\n\n\n# A tibble: 6 √ó 6\n  Review_ID Rating Year_Month Reviewer_Location Review_Text               Branch\n      &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;                     &lt;chr&gt; \n1 305683957      5 2015-08-01 Portugal          I  ve previously been to‚Ä¶ Disne‚Ä¶\n2 666364898      3 2018-10-01 United States     The Hong Kong Disneyland‚Ä¶ Disne‚Ä¶\n3 293082325      3 2015-06-01 United States     My wife, my 15 year old ‚Ä¶ Disne‚Ä¶\n4 334650140      1 2015-11-01 United Kingdom    Our family had the unfor‚Ä¶ Disne‚Ä¶\n5 393553042      3 2016-07-01 United States     HK Disney is very small ‚Ä¶ Disne‚Ä¶\n6 175685909      5 2013-08-01 United Kingdom    Nothing but fun fun fun!‚Ä¶ Disne‚Ä¶"
  },
  {
    "objectID": "materials/03-intro-to-r.html#tail",
    "href": "materials/03-intro-to-r.html#tail",
    "title": "",
    "section": "tail",
    "text": "tail\ntail returns the last n-rows (defaults to 6).\n\ntail(df)\n\n\n\n# A tibble: 6 √ó 6\n  Review_ID Rating Year_Month Reviewer_Location Review_Text               Branch\n      &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;                     &lt;chr&gt; \n1 132494563      4 2012-02-01 Canada            Our kids had a blast at ‚Ä¶ Disne‚Ä¶\n2 467174166      5 2017-03-01 United States     Was good to see the Euro‚Ä¶ Disne‚Ä¶\n3 665419841      5 2019-03-01 Singapore         this is a wonderful plac‚Ä¶ Disne‚Ä¶\n4 654308388      4 2019-02-01 Canada            Took my family and grand‚Ä¶ Disne‚Ä¶\n5 330107371      5 2015-11-01 Australia         An amazing experience fo‚Ä¶ Disne‚Ä¶\n6 446917318      5 2016-12-01 United Kingdom    Been here just before ch‚Ä¶ Disne‚Ä¶"
  },
  {
    "objectID": "materials/03-intro-to-r.html#where-are-reviewers-from",
    "href": "materials/03-intro-to-r.html#where-are-reviewers-from",
    "title": "",
    "section": "Where are reviewers from?",
    "text": "Where are reviewers from?\n\nunique(df$Reviewer_Location)\n\n\n\n [1] \"Portugal\"             \"United States\"        \"United Kingdom\"      \n [4] \"India\"                \"Australia\"            \"Austria\"             \n [7] \"New Zealand\"          \"Canada\"               \"Guam\"                \n[10] \"Thailand\"             \"Saudi Arabia\"         \"Singapore\"           \n[13] \"Switzerland\"          \"Indonesia\"            \"Egypt\"               \n[16] \"South Africa\"         \"Hong Kong\"            \"Philippines\"         \n[19] \"Israel\"               \"Brazil\"               \"Panama\"              \n[22] \"Malaysia\"             \"Finland\"              \"France\"              \n[25] \"Germany\"              \"Mauritius\"            \"Sweden\"              \n[28] \"Ireland\"              \"Macau\"                \"Cyprus\"              \n[31] \"Belgium\"              \"Bulgaria\"             \"United Arab Emirates\"\n[34] \"China\"                \"Malta\"                \"Hungary\"             \n[37] \"Peru\"                 \"Lebanon\"              \"Bahrain\"             \n[40] \"Nepal\"                \"Vietnam\"              \"Serbia\"              \n[43] \"Norway\"               \"Netherlands\"          \"Barbados\"            \n[46] \"Denmark\"              \"Bangladesh\"           \"Sri Lanka\"           \n[49] \"Argentina\"            \"Brunei\"               \"Greece\"              \n[52] \"Oman\"                 \"Spain\"                \"Romania\"             \n[55] \"Japan\"                \"Pakistan\""
  },
  {
    "objectID": "materials/04-r-text-mining.html#basic-histogram",
    "href": "materials/04-r-text-mining.html#basic-histogram",
    "title": "",
    "section": "Basic histogram",
    "text": "Basic histogram\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#add-title-and-labels",
    "href": "materials/04-r-text-mining.html#add-title-and-labels",
    "title": "",
    "section": "Add title and labels",
    "text": "Add title and labels\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar() +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#add-color",
    "href": "materials/04-r-text-mining.html#add-color",
    "title": "",
    "section": "Add color",
    "text": "Add color\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#add-a-theme",
    "href": "materials/04-r-text-mining.html#add-a-theme",
    "title": "",
    "section": "Add a theme",
    "text": "Add a theme\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\nAre there any thoughts or questions this raises?"
  },
  {
    "objectID": "materials/04-r-text-mining.html#histogram-by-park",
    "href": "materials/04-r-text-mining.html#histogram-by-park",
    "title": "",
    "section": "Histogram by park",
    "text": "Histogram by park"
  },
  {
    "objectID": "materials/04-r-text-mining.html#move-legend",
    "href": "materials/04-r-text-mining.html#move-legend",
    "title": "",
    "section": "Move legend",
    "text": "Move legend\n\n\ndf |&gt; \n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#prepare-the-data",
    "href": "materials/04-r-text-mining.html#prepare-the-data",
    "title": "",
    "section": "Prepare the data",
    "text": "Prepare the data\n\n\nratings_by_year &lt;- df |&gt; \n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt; \n  group_by(Park) |&gt; \n  count(Year) |&gt; \n  rename(Ratings = n)\n\nratings_by_year\n\n\n# A tibble: 29 √ó 3\n# Groups:   Park [3]\n   Park        Year Ratings\n   &lt;chr&gt;      &lt;dbl&gt;   &lt;int&gt;\n 1 California  2011      24\n 2 California  2012      59\n 3 California  2013      51\n 4 California  2014      63\n 5 California  2015      83\n 6 California  2016      68\n 7 California  2017      45\n 8 California  2018      36\n 9 California  2019      12\n10 Hong Kong   2010       1\n# ‚Ñπ 19 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#line-plot",
    "href": "materials/04-r-text-mining.html#line-plot",
    "title": "",
    "section": "Line plot",
    "text": "Line plot\nWhat if we wanted to look at the park ratings over time? What would we need to do?\n\nMake sure Year_Month is a date\nGroup by Park\nCount ratings per year\n\n\nratings_by_year &lt;- df |&gt; \n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt; \n  group_by(Park) |&gt; \n  count(Year) |&gt; \n  rename(Ratings = n)\n\nratings_by_year\n\n\n\n# A tibble: 29 √ó 3\n# Groups:   Park [3]\n   Park        Year Ratings\n   &lt;chr&gt;      &lt;dbl&gt;   &lt;int&gt;\n 1 California  2011      24\n 2 California  2012      59\n 3 California  2013      51\n 4 California  2014      63\n 5 California  2015      83\n 6 California  2016      68\n 7 California  2017      45\n 8 California  2018      36\n 9 California  2019      12\n10 Hong Kong   2010       1\n# ‚Ñπ 19 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#add-title-and-labels-1",
    "href": "materials/04-r-text-mining.html#add-title-and-labels-1",
    "title": "",
    "section": "Add title and labels",
    "text": "Add title and labels\n\n\nratings_by_year |&gt; \n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#custom-x-axis",
    "href": "materials/04-r-text-mining.html#custom-x-axis",
    "title": "",
    "section": "Custom x-axis",
    "text": "Custom x-axis\n\n\nratings_by_year |&gt; \n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\") +\n    scale_x_continuous(breaks = c(2010,\n                                  2011,\n                                  2012,\n                                  2013,\n                                  2014,\n                                  2015,\n                                  2016,\n                                  2017,\n                                  2018,\n                                  2019,\n                                  2020))"
  },
  {
    "objectID": "materials/04-r-text-mining.html#custom-theme",
    "href": "materials/04-r-text-mining.html#custom-theme",
    "title": "",
    "section": "Custom theme",
    "text": "Custom theme\n\n\ndf |&gt; \n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt; \n  group_by(Park) |&gt; \n  count(Year) |&gt; \n  rename(Ratings = n) |&gt; \n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\") +\n    scale_x_continuous(breaks = c(2010,\n                                  2011,\n                                  2012,\n                                  2013,\n                                  2014,\n                                  2015,\n                                  2016,\n                                  2017,\n                                  2018,\n                                  2019,\n                                  2020)) +\n  ggthemes::theme_hc()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#ridge-plot",
    "href": "materials/04-r-text-mining.html#ridge-plot",
    "title": "",
    "section": "Ridge plot",
    "text": "Ridge plot\n\n\ndf |&gt; \n  filter(Rating &lt; 4) |&gt; \n  mutate(Year_Month = ym(Year_Month),\n         Year = year(Year_Month)) |&gt; \n  group_by(Park, Year_Month) |&gt; \n  # summarise(avg_rating = mean(Rating, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = Year_Month, y = Park)) +\n  ggridges::geom_density_ridges(rel_min_height = 0.01,\n                                scale = 1.5) +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"\",\n       y = \"\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#look-at-one-review",
    "href": "materials/04-r-text-mining.html#look-at-one-review",
    "title": "",
    "section": "Look at one review",
    "text": "Look at one review\nBrackets allow us to isolate a single cell.\n\n\ndf$Review_Text[11]\n\n\n[1] \"I went there with 2 daughters   1 y.o. and 4 y.o. Both of them were very excited. Little one liked most of the rides (the only one she didn't like was  It's a little world . It was too long for her. Older one was super happy to see the real princesses :)\""
  },
  {
    "objectID": "materials/04-r-text-mining.html#unnest_tokens",
    "href": "materials/04-r-text-mining.html#unnest_tokens",
    "title": "",
    "section": "unnest_tokens",
    "text": "unnest_tokens\n\n‚ÄúI went there with 2 daughters 1 y.o and 4‚Ä¶‚Äù\n\n\n\n\nsample |&gt;\n  unnest_tokens(word, text) |&gt; \n  head(n = 10)\n\n\n# A tibble: 10 √ó 2\n    line word     \n   &lt;dbl&gt; &lt;chr&gt;    \n 1     1 i        \n 2     1 went     \n 3     1 there    \n 4     1 with     \n 5     1 2        \n 6     1 daughters\n 7     1 1        \n 8     1 y.o      \n 9     1 and      \n10     1 4"
  },
  {
    "objectID": "materials/04-r-text-mining.html#remove-stop-words",
    "href": "materials/04-r-text-mining.html#remove-stop-words",
    "title": "",
    "section": "Remove stop words",
    "text": "Remove stop words\n\n\n# Unnest tokens and remove stop words\ntidy_reviews &lt;- tidy_reviews |&gt;\n  anti_join(stop_words)\n\nhead(tidy_reviews)\n\n\n# A tibble: 6 √ó 3\n  Park       linenumber word        \n  &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;       \n1 California          1 ve          \n2 California          1 previously  \n3 California          1 3           \n4 California          1 disney      \n5 California          1 resorts     \n6 California          1 expectations"
  },
  {
    "objectID": "materials/04-r-text-mining.html#word-clouds-output",
    "href": "materials/04-r-text-mining.html#word-clouds-output",
    "title": "",
    "section": "Word Clouds",
    "text": "Word Clouds"
  },
  {
    "objectID": "materials/04-r-text-mining.html#set-up-word-cloud",
    "href": "materials/04-r-text-mining.html#set-up-word-cloud",
    "title": "",
    "section": "Set up word cloud",
    "text": "Set up word cloud\n\ntidy_reviews |&gt;\n  anti_join(stop_words) |&gt;\n  count(word) |&gt;\n  with(wordcloud(word, n, max.words = 40))\n\n\n\n\n\n\n\n\nWhat jumps out to you? How might we improve it?"
  },
  {
    "objectID": "materials/04-r-text-mining.html#removing-common-words",
    "href": "materials/04-r-text-mining.html#removing-common-words",
    "title": "",
    "section": "removing common words",
    "text": "removing common words\n\nwc_removals &lt;- c(\"day\", \"disney\", \"disneyland\", \"rides\")\n\ntidy_reviews |&gt;\n  anti_join(stop_words) |&gt;\n  filter(!word %in% wc_removals) |&gt; \n  count(word) |&gt;\n  with(wordcloud(word, n, max.words = 50))"
  },
  {
    "objectID": "materials/01-introduction.html#text-mining",
    "href": "materials/01-introduction.html#text-mining",
    "title": "",
    "section": "Text Mining",
    "text": "Text Mining\nText mining is the process of extracting quantitative data from qualitative information."
  },
  {
    "objectID": "materials/01-introduction.html#natural-language",
    "href": "materials/01-introduction.html#natural-language",
    "title": "",
    "section": "Natural Language",
    "text": "Natural Language\nA natural language, as opposed to an artificially created language such as R or Python, develops gradually and often without thought, over time.\n(Examples include English or Italian.)"
  },
  {
    "objectID": "materials/01-introduction.html#natural-language-processing-nlp",
    "href": "materials/01-introduction.html#natural-language-processing-nlp",
    "title": "",
    "section": "Natural Language Processing (NLP)",
    "text": "Natural Language Processing (NLP)\nThe process of understanding what text is saying, and being able to analyze it grammatically."
  },
  {
    "objectID": "materials/01-introduction.html#segmentationtokenization",
    "href": "materials/01-introduction.html#segmentationtokenization",
    "title": "",
    "section": "Segmentation/Tokenization",
    "text": "Segmentation/Tokenization\n\nthe process of splitting apart pieces of language.\n\n\nSentence segmentation is the process of breaking sentences apart using tokenizers to examine punctuation, abbreviations, and capitalization.\nWord tokenization involves breaking out the individual words of a sentence."
  },
  {
    "objectID": "materials/01-introduction.html#stop-words",
    "href": "materials/01-introduction.html#stop-words",
    "title": "",
    "section": "Stop Words",
    "text": "Stop Words\nStop words are filler words that don‚Äôt convey a lot of information (pronouns, articles, etc.)\nthe, and, of, a, he, she, for, to, that"
  },
  {
    "objectID": "materials/01-introduction.html#normalization",
    "href": "materials/01-introduction.html#normalization",
    "title": "",
    "section": "Normalization",
    "text": "Normalization\nNormalization involves standardizing text prior to analysis. It might include:\n\nExpanding contractions\nRemoving stop words\nCorrecting misspellings\nStemming (if required)"
  },
  {
    "objectID": "materials/01-introduction.html#stemsstemming",
    "href": "materials/01-introduction.html#stemsstemming",
    "title": "",
    "section": "Stems/Stemming",
    "text": "Stems/Stemming\n\nStems: the morpheme that supplies the main meaning of a word (jump in jumping)\nStemming: a tool that takes a word and returns the stem (running -&gt; run)"
  },
  {
    "objectID": "materials/01-introduction.html#term-frequency",
    "href": "materials/01-introduction.html#term-frequency",
    "title": "",
    "section": "Term Frequency",
    "text": "Term Frequency\nTerm frequency measures how often a term occurs in a document‚Äîin raw form, it is a simply a word count divided by the total number of words in the document.\n\\[\n\\frac{word\\_count}{total\\_words}\n\\]"
  },
  {
    "objectID": "materials/01-introduction.html#document-frequency",
    "href": "materials/01-introduction.html#document-frequency",
    "title": "",
    "section": "Document Frequency",
    "text": "Document Frequency\nDocument frequency measures how common the term is within a domain represented by a corpus of documents (C)."
  },
  {
    "objectID": "materials/01-introduction.html#corpus",
    "href": "materials/01-introduction.html#corpus",
    "title": "",
    "section": "Corpus",
    "text": "Corpus\nA corpus is a collection of documents that you want to perform NLP on."
  },
  {
    "objectID": "materials/01-introduction.html#inverse-document-frequency",
    "href": "materials/01-introduction.html#inverse-document-frequency",
    "title": "",
    "section": "Inverse Document Frequency",
    "text": "Inverse Document Frequency\nInverse document frequency is computed by dividing the total number of documents in the corpus by the number of documents containing our target term, and applying a log scale.\n\\[\nidf(t)=1+log\\frac{C}{1+df(t)}\n\\]"
  },
  {
    "objectID": "materials/01-introduction.html#term-frequency-inverse-document-frequency-tf-idf",
    "href": "materials/01-introduction.html#term-frequency-inverse-document-frequency-tf-idf",
    "title": "",
    "section": "Term Frequency-Inverse Document Frequency (TF-IDF)",
    "text": "Term Frequency-Inverse Document Frequency (TF-IDF)\nHigher term frequency and a lower document frequency leads to a higher TF-IDF.\n\\[\ntfidf=tf(idf)\n\\]"
  },
  {
    "objectID": "materials/01-introduction.html#similarity",
    "href": "materials/01-introduction.html#similarity",
    "title": "",
    "section": "_____ Similarity",
    "text": "_____ Similarity\n\nWord Similarity: similarity between individual words or tokens\nDocument Similarity: similarity between short phrases or documents\nJaccard Similarity: similarity and diversity of a sample data set by looking at how many terms the two documents share, compared to the total vocabulary\n\n$$\nJ(A, B)=\\frac{|A \\cap B|}{|A \\cup B|}=\\frac{|A \\cap B|}{|A|+|B|-|A \\cap B|}\n$$\n\nCosine Similarity: similarity between words \nLatent Semantic Analysis (LSA): an algorithm that reduces the dimensionality of the vector space in order to understand which words are most associated (i.e.¬†king:male, queen:female, doctor:male, nurse:female)"
  },
  {
    "objectID": "materials/01-introduction.html#natural-vs.-artificial-language",
    "href": "materials/01-introduction.html#natural-vs.-artificial-language",
    "title": "",
    "section": "Natural vs.¬†Artificial Language",
    "text": "Natural vs.¬†Artificial Language\n\nNatural languages are those that evolved or emerged gradually over time, largely unconsciously.\nArtificial languages are those that were designed, crafted, or invented with conscious purpose, largely all at once and not gradually."
  },
  {
    "objectID": "materials/01-introduction.html#natural-vs.-artificial-language-1",
    "href": "materials/01-introduction.html#natural-vs.-artificial-language-1",
    "title": "",
    "section": "Natural vs.¬†Artificial Language",
    "text": "Natural vs.¬†Artificial Language\n\n\n\nNatural Language\nArtificial Language\n\n\n\n\nEnglish\nJava\n\n\nChinese\nPython\n\n\nSpanish\nR\n\n\nGreek\nKlingon\n\n\nArabic\nElvish"
  },
  {
    "objectID": "materials/01-introduction.html#nlp-challenges",
    "href": "materials/01-introduction.html#nlp-challenges",
    "title": "",
    "section": "NLP Challenges",
    "text": "NLP Challenges\n\nLarge vocabulary\nComplex syntax\nIrregularities\nAmbiguous semantics\nEven more problems such as humor, irony, metaphor, connotation, neologisms"
  },
  {
    "objectID": "materials/01-introduction.html#tokens-tokenization",
    "href": "materials/01-introduction.html#tokens-tokenization",
    "title": "",
    "section": "Tokens & Tokenization",
    "text": "Tokens & Tokenization\nTokens are meaningful units of text, most commonly individual words.\nTokenization is the process of breaking text down into tokens."
  },
  {
    "objectID": "materials/01-introduction.html#morphemes",
    "href": "materials/01-introduction.html#morphemes",
    "title": "",
    "section": "Morphemes",
    "text": "Morphemes\nMorphemes are the units that our words are made of. (Not the same as syllables)\n\nCats = ‚ÄúCat‚Äù + ‚Äús‚Äù\nRunning = ‚ÄúRun‚Äù + ‚Äúing‚Äù\nDesirability = ‚ÄúDesire‚Äù + ‚Äúable‚Äù + ‚Äúity‚Äù"
  },
  {
    "objectID": "materials/01-introduction.html#morphemes-1",
    "href": "materials/01-introduction.html#morphemes-1",
    "title": "",
    "section": "Morphemes",
    "text": "Morphemes\n\n\n\n\n\n\n\nStems\nAffixes\n\n\n\n\n\nSupplies the main meaning\nCan sometimes be a word in itself (e.g., ‚Äújump‚Äù in ‚Äújumping‚Äù)\n\n\nAdds or alters meaning\nCannot usually be a word by itself (e.g., ‚Äú-ing‚Äù)"
  },
  {
    "objectID": "materials/01-introduction.html#stemsstemmer",
    "href": "materials/01-introduction.html#stemsstemmer",
    "title": "",
    "section": "Stems/Stemmer",
    "text": "Stems/Stemmer\n\nStems: the morpheme that supplies the main meaning of a word (jump in jumping)\nStemmer: a tool that takes a word and returns the stem (running -&gt; run)"
  },
  {
    "objectID": "materials/01-introduction.html#tf-idf-example",
    "href": "materials/01-introduction.html#tf-idf-example",
    "title": "",
    "section": "TF-IDF Example",
    "text": "TF-IDF Example\n\n\n\n\n\n\n\nSource: SMU MSDS Program"
  },
  {
    "objectID": "materials/01-introduction.html#tf-idf-example-1",
    "href": "materials/01-introduction.html#tf-idf-example-1",
    "title": "",
    "section": "TF-IDF Example",
    "text": "TF-IDF Example\n\n\n\n\n\n\n\nSportingNews\nWashington Examiner\n\n\n\n\n\nTrump\nCommander in Chief\nTaft\nNationals\npoliticians\nWhite House\nrace\nethnicity\n\n\nWashington Nationals\nMiami Marlins\nMLB\nTaft\npitch\nTrump\n1910\nWhite House"
  },
  {
    "objectID": "materials/04-r-text-mining.html#load-the-data",
    "href": "materials/04-r-text-mining.html#load-the-data",
    "title": "",
    "section": "Load the data",
    "text": "Load the data\n\n# Load data\nload(here::here(\"materials\", \"workshop_data.RData\"))\n\ndf &lt;- df |&gt;\n  mutate(Branch = case_match(Branch,\n                             \"Disneyland_California\" ~ \"California\",\n                             \"Disneyland_HongKong\" ~ \"Hong Kong\",\n                             \"Disneyland_Paris\" ~ \"Paris\")) |&gt;\n  rename(\"Park\" = Branch)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-word-counts",
    "href": "materials/04-r-text-mining.html#create-word-counts",
    "title": "",
    "section": "Create Word Counts",
    "text": "Create Word Counts\n\n\n# Perform word count\ntidy_reviews |&gt; \n  count(word, sort = TRUE) |&gt; \n  head()\n\n\n# A tibble: 6 √ó 2\n  word           n\n  &lt;chr&gt;      &lt;int&gt;\n1 park         989\n2 disney       844\n3 rides        808\n4 disneyland   681\n5 time         633\n6 day          608"
  },
  {
    "objectID": "materials/04-r-text-mining.html#set-up-bigrams",
    "href": "materials/04-r-text-mining.html#set-up-bigrams",
    "title": "",
    "section": "Set up bigrams",
    "text": "Set up bigrams\n\n\n# Unnest into bigrams\ntidy_bigrams &lt;- reviews |&gt; \n  unnest_tokens(bigram, \n                text, \n                token = \"ngrams\", \n                n = 2) |&gt; \n  filter(!is.na(bigram))\n\nhead(tidy_bigrams)\n\n\n# A tibble: 6 √ó 3\n  Park       linenumber bigram         \n  &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;          \n1 California          1 i ve           \n2 California          1 ve previously  \n3 California          1 previously been\n4 California          1 been to        \n5 California          1 to 3           \n6 California          1 3 disney"
  },
  {
    "objectID": "materials/04-r-text-mining.html#separate-words",
    "href": "materials/04-r-text-mining.html#separate-words",
    "title": "",
    "section": "Separate words",
    "text": "Separate words\n\n\n# Separate words\ntidy_bigrams &lt;- tidy_bigrams |&gt;\n  separate(bigram, \n           c(\"word1\", \n             \"word2\"), \n           sep = \" \")\n\nhead(tidy_bigrams)\n\n\n# A tibble: 6 √ó 4\n  Park       linenumber word1      word2     \n  &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     \n1 California          1 i          ve        \n2 California          1 ve         previously\n3 California          1 previously been      \n4 California          1 been       to        \n5 California          1 to         3         \n6 California          1 3          disney"
  },
  {
    "objectID": "materials/04-r-text-mining.html#remove-stop-words-1",
    "href": "materials/04-r-text-mining.html#remove-stop-words-1",
    "title": "",
    "section": "Remove stop words",
    "text": "Remove stop words\n\n\n# Remove stop words\ntidy_bigrams &lt;- tidy_bigrams |&gt;\n  filter(!word1 %in% stop_words$word) |&gt;\n  filter(!word2 %in% stop_words$word)\n\nhead(tidy_bigrams)\n\n\n# A tibble: 6 √ó 4\n  Park       linenumber word1        word2     \n  &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;     \n1 California          1 ve           previously\n2 California          1 3            disney    \n3 California          1 disney       resorts   \n4 California          1 expectations sky       \n5 California          1 original     park      \n6 California          1 magical      feeling"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reunite-terms",
    "href": "materials/04-r-text-mining.html#reunite-terms",
    "title": "",
    "section": "Reunite terms",
    "text": "Reunite terms\n\n\n# Reunite terms\ntidy_bigrams &lt;- tidy_bigrams |&gt;\n  unite(bigram, word1, word2, sep = \" \")\n\nhead(tidy_bigrams)\n\n\n# A tibble: 6 √ó 3\n  Park       linenumber bigram          \n  &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;           \n1 California          1 ve previously   \n2 California          1 3 disney        \n3 California          1 disney resorts  \n4 California          1 expectations sky\n5 California          1 original park   \n6 California          1 magical feeling"
  },
  {
    "objectID": "materials/04-r-text-mining.html#look-at-bigrams-by-park",
    "href": "materials/04-r-text-mining.html#look-at-bigrams-by-park",
    "title": "",
    "section": "Look at bigrams by park",
    "text": "Look at bigrams by park\n\ntidy_bigrams |&gt; \n  group_by(Park) |&gt; \n  count(bigram) |&gt; \n  arrange(desc(n)) |&gt; \n  head()\n\n\n\n# A tibble: 6 √ó 3\n# Groups:   Park [3]\n  Park       bigram                   n\n  &lt;chr&gt;      &lt;chr&gt;                &lt;int&gt;\n1 California fast pass               92\n2 Hong Kong  hong kong               75\n3 Paris      disneyland paris        69\n4 Paris      fast pass               49\n5 California space mountain          41\n6 California california adventure    40"
  },
  {
    "objectID": "materials/04-r-text-mining.html#total-words-per-review",
    "href": "materials/04-r-text-mining.html#total-words-per-review",
    "title": "",
    "section": "Total Words per Review",
    "text": "Total Words per Review\n\n\nreview_words &lt;- tidy_reviews %&gt;%\n  count(Park, word, sort = TRUE)\n\ntotal_words &lt;- review_words %&gt;% \n  group_by(Park) %&gt;% \n  summarize(total = sum(n))\n\nreview_words &lt;- left_join(review_words, total_words)\n\ngt(head(review_words))\n\n\n\n\n\n\n  \n    \n    \n      Park\n      word\n      n\n      total\n    \n  \n  \n    Paris\npark\n439\n18678\n    California\npark\n368\n17086\n    California\ndisneyland\n342\n17086\n    Paris\ndisney\n332\n18678\n    Paris\nrides\n332\n18678\n    California\ndisney\n322\n17086"
  },
  {
    "objectID": "materials/04-r-text-mining.html#review-length-by-park",
    "href": "materials/04-r-text-mining.html#review-length-by-park",
    "title": "",
    "section": "Review length by park",
    "text": "Review length by park\n\nggplot(review_words, \n       aes(n/total, \n           fill = Park)) +\n  geom_histogram(show.legend = FALSE) +\n  xlim(NA, 0.001) +\n  facet_wrap(~ Park, \n             ncol = 1, \n             scales = \"free_y\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#tf-idf",
    "href": "materials/04-r-text-mining.html#tf-idf",
    "title": "",
    "section": "TF-IDF",
    "text": "TF-IDF\n\n\nfreq_by_rank &lt;- review_words |&gt; \n  group_by(Park) |&gt; \n  mutate(rank = row_number(), \n         `term frequency` = n/total) |&gt; \n  ungroup()\n\ngt(head(freq_by_rank))\n\n\n\n\n\n\n  \n    \n    \n      Park\n      word\n      n\n      total\n      rank\n      term frequency\n    \n  \n  \n    Paris\npark\n439\n18678\n1\n0.02350359\n    California\npark\n368\n17086\n1\n0.02153810\n    California\ndisneyland\n342\n17086\n2\n0.02001639\n    Paris\ndisney\n332\n18678\n2\n0.01777492\n    Paris\nrides\n332\n18678\n3\n0.01777492\n    California\ndisney\n322\n17086\n3\n0.01884584"
  },
  {
    "objectID": "materials/04-r-text-mining.html#plot-tf-idf",
    "href": "materials/04-r-text-mining.html#plot-tf-idf",
    "title": "",
    "section": "Plot TF-IDF",
    "text": "Plot TF-IDF\n\n\nfreq_by_rank |&gt; \n  ggplot(aes(rank, \n             `term frequency`, \n             color = Park)) + \n  geom_line(size = 1.1, \n            alpha = 0.8, \n            show.legend = FALSE) + \n  scale_x_log10() +\n  scale_y_log10() +\n  theme_minimal()"
  },
  {
    "objectID": "materials/05-python-text-mining.html#general-purpose",
    "href": "materials/05-python-text-mining.html#general-purpose",
    "title": "",
    "section": "General Purpose",
    "text": "General Purpose\n\nfrom collections import Counter\nimport numpy as np\nimport os\nimport warnings\nwarnings.filterwarnings(action = 'ignore')"
  },
  {
    "objectID": "materials/05-python-text-mining.html#pandas",
    "href": "materials/05-python-text-mining.html#pandas",
    "title": "",
    "section": "Pandas",
    "text": "Pandas\n\nSimilar functions to the tidyverse\n\n\nimport pandas as pd"
  },
  {
    "objectID": "materials/05-python-text-mining.html#visualization",
    "href": "materials/05-python-text-mining.html#visualization",
    "title": "",
    "section": "Visualization",
    "text": "Visualization\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "materials/05-python-text-mining.html#text-mining",
    "href": "materials/05-python-text-mining.html#text-mining",
    "title": "",
    "section": "Text Mining",
    "text": "Text Mining\n\nimport nltk\n\nnltk.download('stopwords')\nnltk.download('wordnet')\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom wordcloud import WordCloud"
  },
  {
    "objectID": "materials/05-python-text-mining.html#view-files",
    "href": "materials/05-python-text-mining.html#view-files",
    "title": "",
    "section": "View Files",
    "text": "View Files\n\nos.listdir()\n\n['.Rhistory',\n 'workshop',\n '06-learning-more.qmd',\n '01-introduction.qmd',\n 'slide templates',\n 'images',\n '05-python-text-mining.qmd',\n '02-excel.qmd',\n 'resources_files',\n 'theme',\n '03-intro-to-r.qmd',\n 'static',\n '05-python-text-mining.ipynb',\n 'DisneylandReviews.csv',\n 'filter.lua',\n 'workshop_data.RData',\n '04-r-text-mining.qmd']"
  },
  {
    "objectID": "materials/05-python-text-mining.html#head",
    "href": "materials/05-python-text-mining.html#head",
    "title": "",
    "section": "Head",
    "text": "Head\n\ndf.head()\n\n\n\n\n\n\n\n\nReview_ID\nRating\nYear_Month\nReviewer_Location\nReview_Text\nBranch\n\n\n\n\n0\n670772142\n4\n2019-4\nAustralia\nIf you've ever been to Disneyland anywhere you...\nDisneyland_HongKong\n\n\n1\n670682799\n4\n2019-5\nPhilippines\nIts been a while since d last time we visit HK...\nDisneyland_HongKong\n\n\n2\n670623270\n4\n2019-4\nUnited Arab Emirates\nThanks God it wasn t too hot or too humid wh...\nDisneyland_HongKong\n\n\n3\n670607911\n4\n2019-4\nAustralia\nHK Disneyland is a great compact park. Unfortu...\nDisneyland_HongKong\n\n\n4\n670607296\n4\n2019-4\nUnited Kingdom\nthe location is not in the city, took around 1...\nDisneyland_HongKong"
  },
  {
    "objectID": "materials/05-python-text-mining.html#info",
    "href": "materials/05-python-text-mining.html#info",
    "title": "",
    "section": "Info",
    "text": "Info\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 42656 entries, 0 to 42655\nData columns (total 6 columns):\n #   Column             Non-Null Count  Dtype \n---  ------             --------------  ----- \n 0   Review_ID          42656 non-null  int64 \n 1   Rating             42656 non-null  int64 \n 2   Year_Month         42656 non-null  object\n 3   Reviewer_Location  42656 non-null  object\n 4   Review_Text        42656 non-null  object\n 5   Branch             42656 non-null  object\ndtypes: int64(2), object(4)\nmemory usage: 2.0+ MB"
  },
  {
    "objectID": "materials/05-python-text-mining.html#rows-columns",
    "href": "materials/05-python-text-mining.html#rows-columns",
    "title": "",
    "section": "Rows & Columns",
    "text": "Rows & Columns\n\ndf.shape\n\n(42656, 6)"
  },
  {
    "objectID": "materials/05-python-text-mining.html#convert-to-lowercase",
    "href": "materials/05-python-text-mining.html#convert-to-lowercase",
    "title": "",
    "section": "Convert to lowercase",
    "text": "Convert to lowercase\n\n# Convert to lowercase\ndf['Clean_Text'] = df['Review_Text'].apply(lambda x : ' '.join(x.lower() for x in x.split()))"
  },
  {
    "objectID": "materials/05-python-text-mining.html#remove-punctuation",
    "href": "materials/05-python-text-mining.html#remove-punctuation",
    "title": "",
    "section": "Remove punctuation",
    "text": "Remove punctuation\n\ndef remove_punctuations(text):\n  for char in string.punctuation:\n    text = text.replace(char, '')\n  return text\n\ndf['Clean_Text'] = df['Clean_Text'].apply(remove_punctuations)"
  },
  {
    "objectID": "materials/03-intro-to-r.html#open-the-file",
    "href": "materials/03-intro-to-r.html#open-the-file",
    "title": "",
    "section": "Open the file",
    "text": "Open the file\n Open intro.R in RStudio\n\n\n\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "materials/03-intro-to-r.html#running-the-code",
    "href": "materials/03-intro-to-r.html#running-the-code",
    "title": "",
    "section": "Running the code",
    "text": "Running the code\nTo run the code for this workshop, simply click on the row with your code, or select it, and press Ctrl/‚åò + Enter.\n\n\nIf you ever want to clear out your results and start fresh, go to Session ‚ûî Restart R"
  },
  {
    "objectID": "script.html",
    "href": "script.html",
    "title": "Workshop Script",
    "section": "",
    "text": "Why am I?\nWhat are my expectations?\nHow is this workshop going to be structured?\n\n\n\n\nIntro to Text Mining\nKeyword Searches in Excel\nGetting Started with R\nText Mining in R\nText Mining in Python\n\n\n\n\n\nWhat do you think of when I say text mining?\nHow much experience do you have with coding languages like R or Python?\nWhat types of things are you most interested in? (keywords, sentiment, ngrams, word clouds‚Ä¶)\n\n\n\nThis Python script is aimed at processing, cleaning, and visualizing textual data from a dataset called ‚Äúworkshop_data.csv‚Äù. The focus of the analysis is on reviews from a dataset, presumably about Disney parks. I‚Äôll summarize the code in steps:\n\nImports and Settings:\n\nEssential libraries and modules for data manipulation, visualization, and text processing are imported.\nWarnings are suppressed.\n\nData Loading:\n\nThe dataset workshop_data.csv is loaded into a dataframe called df.\n\nInitial Data Examination:\n\nThe script displays the first two rows of the dataframe and a summary of its columns.\n\nDate Conversion:\n\nA column named Year_Month is converted to a datetime format. Subsequently, two new columns Month and Year are derived from it.\n\nText Pre-processing:\n\nThe review texts are converted to lowercase.\nPunctuations from the review texts are removed.\nCommon English stop words (words that are commonly used but generally ignored in text mining) are loaded.\nCustom stop words, which appear to be specific to Disney parks, are defined.\nBoth sets of stop words are combined, and these words are removed from the review texts.\n\nTokenization:\n\nReview texts are tokenized, i.e., split into individual words.\n\nWord Frequency Calculation:\n\nThe frequency (i.e., number of words) in each cleaned review is calculated.\n\nWord Cloud Visualization:\n\nA word cloud is generated for both the original and cleaned review texts, providing a visual representation of the most frequently occurring words.\n\nReview Visualizations:\n\nThe number of reviews by each park branch (presumably different Disney park locations) is plotted.\nThe average rating given by reviewers each year, broken down by park branch, is plotted.\nThe 20 most frequently used words (after removing stop words) are plotted.\n\nN-grams Analysis:\n\n\nN-grams are continuous sequences of n items from a given sample of text or speech. The functions documentNgrams and plotNgrams are defined to create and visualize unigrams (single words) and bigrams (two-word combinations), respectively.\nThe script then plots the top unigrams and bigrams found in the cleaned review texts.\nA separate bigrams analysis is conducted and the 10 most common bigrams are displayed.\nA trigrams (three-word combinations) analysis is conducted, and the 10 most common trigrams are displayed.\n\nIn essence, this script is aimed at understanding and visualizing what people commonly talk about in the reviews, which can be essential for sentiment analysis or understanding customer feedback about Disney parks.\n\ndf['Frequency'] = df['Clean_Text'].apply(lambda x: len(str(x).split(' ')))\n\nAccess the Clean_Text column:\ndf['Clean_Text'] fetches the Clean_Text column from the dataframe df.\nUse of apply() method with a lambda function:\nThe apply() method is used to apply a function to each item in the series (or column). The function being applied is a lambda function.\nLet‚Äôs break down the lambda function:\n\nlambda x:: This declares an anonymous function (lambda function) where x represents an individual entry (a row) from the Clean_Text column.\nstr(x): This ensures that the data in x is of string type. It‚Äôs a safeguard in case any non-string values are present.\n.split(' '): This splits the string x into a list of words using space as the delimiter. For example, \"Hello World\".split(' ') would give ['Hello', 'World'].\nlen(...): This calculates the length of the list obtained after splitting the string. Essentially, it counts the number of words in the string.\n\nAssignment to a new column:\nThe result of the above operation (number of words for each entry in Clean_Text) is then assigned to a new column named Frequency in the dataframe df.\n\nIn simple terms, this line of code calculates the number of words in each entry of the Clean_Text column and stores this count in a new column called Frequency."
  },
  {
    "objectID": "script.html#overall-goals",
    "href": "script.html#overall-goals",
    "title": "Workshop Script",
    "section": "",
    "text": "Intro to Text Mining\nKeyword Searches in Excel\nGetting Started with R\nText Mining in R\nText Mining in Python"
  },
  {
    "objectID": "script.html#poll",
    "href": "script.html#poll",
    "title": "Workshop Script",
    "section": "",
    "text": "What do you think of when I say text mining?\nHow much experience do you have with coding languages like R or Python?\nWhat types of things are you most interested in? (keywords, sentiment, ngrams, word clouds‚Ä¶)\n\n\n\nThis Python script is aimed at processing, cleaning, and visualizing textual data from a dataset called ‚Äúworkshop_data.csv‚Äù. The focus of the analysis is on reviews from a dataset, presumably about Disney parks. I‚Äôll summarize the code in steps:\n\nImports and Settings:\n\nEssential libraries and modules for data manipulation, visualization, and text processing are imported.\nWarnings are suppressed.\n\nData Loading:\n\nThe dataset workshop_data.csv is loaded into a dataframe called df.\n\nInitial Data Examination:\n\nThe script displays the first two rows of the dataframe and a summary of its columns.\n\nDate Conversion:\n\nA column named Year_Month is converted to a datetime format. Subsequently, two new columns Month and Year are derived from it.\n\nText Pre-processing:\n\nThe review texts are converted to lowercase.\nPunctuations from the review texts are removed.\nCommon English stop words (words that are commonly used but generally ignored in text mining) are loaded.\nCustom stop words, which appear to be specific to Disney parks, are defined.\nBoth sets of stop words are combined, and these words are removed from the review texts.\n\nTokenization:\n\nReview texts are tokenized, i.e., split into individual words.\n\nWord Frequency Calculation:\n\nThe frequency (i.e., number of words) in each cleaned review is calculated.\n\nWord Cloud Visualization:\n\nA word cloud is generated for both the original and cleaned review texts, providing a visual representation of the most frequently occurring words.\n\nReview Visualizations:\n\nThe number of reviews by each park branch (presumably different Disney park locations) is plotted.\nThe average rating given by reviewers each year, broken down by park branch, is plotted.\nThe 20 most frequently used words (after removing stop words) are plotted.\n\nN-grams Analysis:\n\n\nN-grams are continuous sequences of n items from a given sample of text or speech. The functions documentNgrams and plotNgrams are defined to create and visualize unigrams (single words) and bigrams (two-word combinations), respectively.\nThe script then plots the top unigrams and bigrams found in the cleaned review texts.\nA separate bigrams analysis is conducted and the 10 most common bigrams are displayed.\nA trigrams (three-word combinations) analysis is conducted, and the 10 most common trigrams are displayed.\n\nIn essence, this script is aimed at understanding and visualizing what people commonly talk about in the reviews, which can be essential for sentiment analysis or understanding customer feedback about Disney parks.\n\ndf['Frequency'] = df['Clean_Text'].apply(lambda x: len(str(x).split(' ')))\n\nAccess the Clean_Text column:\ndf['Clean_Text'] fetches the Clean_Text column from the dataframe df.\nUse of apply() method with a lambda function:\nThe apply() method is used to apply a function to each item in the series (or column). The function being applied is a lambda function.\nLet‚Äôs break down the lambda function:\n\nlambda x:: This declares an anonymous function (lambda function) where x represents an individual entry (a row) from the Clean_Text column.\nstr(x): This ensures that the data in x is of string type. It‚Äôs a safeguard in case any non-string values are present.\n.split(' '): This splits the string x into a list of words using space as the delimiter. For example, \"Hello World\".split(' ') would give ['Hello', 'World'].\nlen(...): This calculates the length of the list obtained after splitting the string. Essentially, it counts the number of words in the string.\n\nAssignment to a new column:\nThe result of the above operation (number of words for each entry in Clean_Text) is then assigned to a new column named Frequency in the dataframe df.\n\nIn simple terms, this line of code calculates the number of words in each entry of the Clean_Text column and stores this count in a new column called Frequency."
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "R4DS (R for Data Science) by Hadley Wickham, Mine √áetinkaya-Rundel, and Garrett Grolemund\n\nTidy Text Mining by Julia Silge and David Robinson\n\nHappy Git and GitHub for the useR by Jenny Bryan\n\nggplot2: Elegant Graphics for Data Analysis (3e) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen"
  },
  {
    "objectID": "workshop-materials.html#materialsworkshop",
    "href": "workshop-materials.html#materialsworkshop",
    "title": "Workshop Materials",
    "section": "materials/workshop",
    "text": "materials/workshop\n\n\n\n\n\n\n\nfolder\nfile\n\n\n\n\nmaterials/workshop\n01-introduction\n\n\nmaterials/workshop\n02-excel\n\n\nmaterials/workshop\n03-intro-to-r\n\n\nmaterials/workshop\n04-r-text-mining\n\n\nmaterials/workshop\n05-python-text-mining\n\n\nmaterials/workshop\n06-learning-more"
  },
  {
    "objectID": "workshop-materials.html#excel",
    "href": "workshop-materials.html#excel",
    "title": "Workshop Materials",
    "section": "02-excel",
    "text": "02-excel\n\n\n\n\n\n\n\nfolder\nfile\n\n\n\n\n02-excel\nexcel-examples.xlsx"
  },
  {
    "objectID": "workshop-materials.html#python-text-mining",
    "href": "workshop-materials.html#python-text-mining",
    "title": "Workshop Materials",
    "section": "05-python-text-mining",
    "text": "05-python-text-mining\n\n\n\n\n\n\n\nfolder\nfile\n\n\n\n\n05-python-text-mining\npython-text-mining.py"
  },
  {
    "objectID": "workshop-materials.html#intro-to-r-03-intro-to-r",
    "href": "workshop-materials.html#intro-to-r-03-intro-to-r",
    "title": "Workshop Materials",
    "section": "03-intro-to-r ## 03-intro-to-r",
    "text": "03-intro-to-r ## 03-intro-to-r\n\n\n\n\n\n\n\nfolder\nfile\n\n\n\n\n03-intro-to-r\n01-intro.R\n\n\n03-intro-to-r\n02-our-data.R"
  },
  {
    "objectID": "workshop-materials.html#r-text-mining-04-r-text-mining-04-r-text-mining-04-r-text-mining-04-r-text-mining",
    "href": "workshop-materials.html#r-text-mining-04-r-text-mining-04-r-text-mining-04-r-text-mining-04-r-text-mining",
    "title": "Workshop Materials",
    "section": "04-r-text-mining ## 04-r-text-mining ## 04-r-text-mining ## 04-r-text-mining ## 04-r-text-mining",
    "text": "04-r-text-mining ## 04-r-text-mining ## 04-r-text-mining ## 04-r-text-mining ## 04-r-text-mining\n\n\n\n\n\n\n\nfolder\nfile\n\n\n\n\n04-r-text-mining\n01-unnest-tokens.R\n\n\n04-r-text-mining\n01-visualize.R\n\n\n04-r-text-mining\n02-bigrams.R\n\n\n04-r-text-mining\n03-sentiment-analysis.R\n\n\n04-r-text-mining\n04-term-frequency.R"
  },
  {
    "objectID": "resources.html#books",
    "href": "resources.html#books",
    "title": "Resources",
    "section": "",
    "text": "R4DS (R for Data Science) by Hadley Wickham, Mine √áetinkaya-Rundel, and Garrett Grolemund\n\nTidy Text Mining by Julia Silge and David Robinson\n\nHappy Git and GitHub for the useR by Jenny Bryan\n\nggplot2: Elegant Graphics for Data Analysis (3e) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen"
  },
  {
    "objectID": "resources.html#workshops",
    "href": "resources.html#workshops",
    "title": "Resources",
    "section": "Workshops",
    "text": "Workshops\nText Mining with Tidy Data Principles by Julia Silge\nR for Excel Users by Julie Lowndes and Allison Horst"
  },
  {
    "objectID": "materials/03-intro-to-r.html#package-help",
    "href": "materials/03-intro-to-r.html#package-help",
    "title": "",
    "section": "Package Help",
    "text": "Package Help\n?function-name"
  },
  {
    "objectID": "materials/03-intro-to-r.html#r-vs.-rstudio",
    "href": "materials/03-intro-to-r.html#r-vs.-rstudio",
    "title": "",
    "section": "R vs.¬†RStudio",
    "text": "R vs.¬†RStudio\n\nR is the language and needs to be installed before you can use RStudio\nCan be downloaded from CRAN (Comprehensive R Archive Network) (link)"
  },
  {
    "objectID": "materials/03-intro-to-r.html#cran",
    "href": "materials/03-intro-to-r.html#cran",
    "title": "",
    "section": "CRAN",
    "text": "CRAN"
  },
  {
    "objectID": "materials/03-intro-to-r.html#piping",
    "href": "materials/03-intro-to-r.html#piping",
    "title": "",
    "section": "Piping",
    "text": "Piping\n\n%&gt;% is the traditional method that came from the `magrittr` package\n|&gt; the ‚Äúnative‚Äù pipe that was introduced to R in version 4.1\nBoth work by ‚Äòpiping‚Äô information from the left hand side (LHS) to the right hand side (RHS)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-word-cloud",
    "href": "materials/04-r-text-mining.html#create-a-word-cloud",
    "title": "",
    "section": "Create a word cloud",
    "text": "Create a word cloud\n\ntidy_reviews |&gt;\n  count(word) |&gt;\n  with(wordcloud(word, \n                 n, \n                 max.words = 40,\n                 colors=brewer.pal(8, \"Dark2\")))\n\n\n\n\nWhat jumps out to you? How might we improve it?"
  },
  {
    "objectID": "materials/04-r-text-mining.html#re-create-the-word-cloud",
    "href": "materials/04-r-text-mining.html#re-create-the-word-cloud",
    "title": "",
    "section": "Re-create the word cloud",
    "text": "Re-create the word cloud\n\ntidy_reviews_cloud |&gt; \n  count(word) |&gt;\n  with(wordcloud(word, n, max.words = 40))\n\n\n\n\n\n\n\n\nWhat jumps out to you? How might we improve it?"
  },
  {
    "objectID": "materials/04-r-text-mining.html#custom-stop-words",
    "href": "materials/04-r-text-mining.html#custom-stop-words",
    "title": "",
    "section": "Custom stop words",
    "text": "Custom stop words\n\nStop word libraries are great starting points\nOrganization- or industry-specific terms may not be helpful\nCustom stop word lists can filter these out\n\n\nwc_removals &lt;- c(\"day\", \"disney\", \"disneyland\", \"rides\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#word-cloud-without-custom-stop-words",
    "href": "materials/04-r-text-mining.html#word-cloud-without-custom-stop-words",
    "title": "",
    "section": "Word Cloud without Custom Stop Words",
    "text": "Word Cloud without Custom Stop Words\n\nwc_removals &lt;- c(\"day\", \"disney\", \"disneyland\", \"rides\", \"park\")\n\ntidy_reviews |&gt;\n1  filter(!word %in% wc_removals) |&gt;\n  count(word) |&gt;\n  with(wordcloud(word, \n                 n, \n                 max.words = 50,\n                 colors=brewer.pal(8, \"Dark2\")))\n\n\n1\n\nThe %in% syntax allows you to look for a match inside a vector or column."
  },
  {
    "objectID": "materials/04-r-text-mining.html#remove-stop-words-2",
    "href": "materials/04-r-text-mining.html#remove-stop-words-2",
    "title": "",
    "section": "Remove stop words",
    "text": "Remove stop words\n\n# Remove stop words\ntidy_bigrams &lt;- tidy_bigrams |&gt;\n  filter(!word1 %in% stop_words$word) |&gt;\n  filter(!word2 %in% stop_words$word)\n\nhead(tidy_bigrams)\n\n\n\n# A tibble: 6 √ó 4\n  Park       linenumber word1  word2  \n  &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 California          1 line   ups    \n2 California          1 30     minutes\n3 California          1 street parade \n4 California          1 1      2      \n5 California          1 1      free   \n6 California          1 free   day"
  },
  {
    "objectID": "materials/04-r-text-mining.html#word-cloud-without-custom-stop-words-output",
    "href": "materials/04-r-text-mining.html#word-cloud-without-custom-stop-words-output",
    "title": "",
    "section": "Word Cloud without Custom Stop Words",
    "text": "Word Cloud without Custom Stop Words"
  },
  {
    "objectID": "materials/04-r-text-mining.html#look-at-top-bigrams-by-park",
    "href": "materials/04-r-text-mining.html#look-at-top-bigrams-by-park",
    "title": "",
    "section": "Look at top bigrams by park",
    "text": "Look at top bigrams by park\n\n\ntidy_bigrams |&gt; \n  group_by(Park) |&gt; \n  count(bigram) |&gt; \n  arrange(desc(n)) |&gt; \n  head()\n\n\n# A tibble: 6 √ó 3\n# Groups:   Park [3]\n  Park       bigram                   n\n  &lt;chr&gt;      &lt;chr&gt;                &lt;int&gt;\n1 Paris      disneyland paris        66\n2 Hong Kong  hong kong               58\n3 California fast pass               54\n4 California disney world            51\n5 Paris      fast pass               43\n6 California california adventure    37"
  },
  {
    "objectID": "materials/04-r-text-mining.html#plot-tf-idf-output",
    "href": "materials/04-r-text-mining.html#plot-tf-idf-output",
    "title": "",
    "section": "Plot TF-IDF",
    "text": "Plot TF-IDF"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bigram-tf-idf",
    "href": "materials/04-r-text-mining.html#bigram-tf-idf",
    "title": "",
    "section": "Bigram TF-IDF",
    "text": "Bigram TF-IDF\n\n\ntidy_bigrams |&gt; \n  count(Park, bigram) |&gt; \n  bind_tf_idf(bigram, Park, n) |&gt; \n  arrange(desc(tf_idf)) |&gt; \n  head() |&gt; \n  gt()\n\n\n\n\n\n\n  \n    \n    \n      Park\n      bigram\n      n\n      tf\n      idf\n      tf_idf\n    \n  \n  \n    Hong Kong\nkong disneyland\n19\n0.006254115\n1.0986123\n0.006870847\n    California\nsplash mountain\n22\n0.004303599\n1.0986123\n0.004727987\n    Paris\ndisneyland paris\n66\n0.011591149\n0.4054651\n0.004699806\n    Paris\ndisney studios\n22\n0.003863716\n1.0986123\n0.004244726\n    Hong Kong\nmystic manor\n11\n0.003620803\n1.0986123\n0.003977859\n    Hong Kong\nocean park\n11\n0.003620803\n1.0986123\n0.003977859"
  },
  {
    "objectID": "materials/03-intro-to-r.html#other-ways-to-view-the-data",
    "href": "materials/03-intro-to-r.html#other-ways-to-view-the-data",
    "title": "",
    "section": "Other ways to view the data",
    "text": "Other ways to view the data\n\nstr is a base-R method, similar to glimpse\nview will open the data in a new tab, similar to Excel\n\n\nstr(penguins)\n\n\n\ntibble [344 √ó 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ..."
  },
  {
    "objectID": "materials/03-intro-to-r.html#piping-functions",
    "href": "materials/03-intro-to-r.html#piping-functions",
    "title": "",
    "section": "Piping functions",
    "text": "Piping functions\n\n%&gt;% is the traditional method that came from the `magrittr` package\n|&gt; the ‚Äúnative‚Äù pipe that was introduced to R in version 4.1\nBoth work by ‚Äòpiping‚Äô information from the left hand side (LHS) to the right hand side (RHS)"
  },
  {
    "objectID": "materials/03-intro-to-r.html#making-new-variables-output",
    "href": "materials/03-intro-to-r.html#making-new-variables-output",
    "title": "",
    "section": "Making new variables",
    "text": "Making new variables"
  },
  {
    "objectID": "materials/03-intro-to-r.html#making-new-variables-2",
    "href": "materials/03-intro-to-r.html#making-new-variables-2",
    "title": "",
    "section": "Making new variables",
    "text": "Making new variables\nWe‚Äôll use the following as our cutoffs:\n\n\n\nDescription\nLength (mm)\n\n\n\n\nshort\nless than 190\n\n\naverage\nbetween 190 and 213\n\n\nlong\nmore than 213"
  },
  {
    "objectID": "materials/05-python-text-mining.html#load-the-data",
    "href": "materials/05-python-text-mining.html#load-the-data",
    "title": "",
    "section": "Load the data",
    "text": "Load the data\n\n# Import the data\ndf=pd.read_csv(\"workshop_data.csv\", encoding='latin-1')"
  },
  {
    "objectID": "materials/05-python-text-mining.html#examine-the-data",
    "href": "materials/05-python-text-mining.html#examine-the-data",
    "title": "",
    "section": "Examine the data",
    "text": "Examine the data\n\ndf.head(n = 2)\n\n\n\n\n\n\n\n\nReview_ID\nRating\nYear_Month\nReviewer_Location\nReview_Text\nBranch\n\n\n\n\n0\n305683957\n5\n2015-08-01\nPortugal\nI ve previously been to 3 Disney Resorts. So ...\nDisneyland_California\n\n\n1\n666364898\n3\n2018-10-01\nUnited States\nThe Hong Kong Disneyland is quite small, there...\nDisneyland_HongKong"
  },
  {
    "objectID": "materials/05-python-text-mining.html#examine-the-data-1",
    "href": "materials/05-python-text-mining.html#examine-the-data-1",
    "title": "",
    "section": "Examine the data",
    "text": "Examine the data\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1000 entries, 0 to 999\nData columns (total 6 columns):\n #   Column             Non-Null Count  Dtype \n---  ------             --------------  ----- \n 0   Review_ID          1000 non-null   int64 \n 1   Rating             1000 non-null   int64 \n 2   Year_Month         1000 non-null   object\n 3   Reviewer_Location  1000 non-null   object\n 4   Review_Text        1000 non-null   object\n 5   Branch             1000 non-null   object\ndtypes: int64(2), object(4)\nmemory usage: 47.0+ KB"
  },
  {
    "objectID": "materials/05-python-text-mining.html#examine-the-data-2",
    "href": "materials/05-python-text-mining.html#examine-the-data-2",
    "title": "",
    "section": "Examine the data",
    "text": "Examine the data\n\ndf.shape\n\n(1000, 6)"
  },
  {
    "objectID": "materials/05-python-text-mining.html#most-common-words-output",
    "href": "materials/05-python-text-mining.html#most-common-words-output",
    "title": "",
    "section": "Most Common Words",
    "text": "Most Common Words"
  },
  {
    "objectID": "materials/05-python-text-mining.html#word-cloud-output",
    "href": "materials/05-python-text-mining.html#word-cloud-output",
    "title": "",
    "section": "Word Cloud",
    "text": "Word Cloud"
  },
  {
    "objectID": "materials/03-intro-to-r.html#reading-data-into-r",
    "href": "materials/03-intro-to-r.html#reading-data-into-r",
    "title": "",
    "section": "Reading data into R",
    "text": "Reading data into R"
  },
  {
    "objectID": "materials/03-intro-to-r.html#reading-data-into-r-1",
    "href": "materials/03-intro-to-r.html#reading-data-into-r-1",
    "title": "",
    "section": "Reading data into R",
    "text": "Reading data into R"
  },
  {
    "objectID": "materials/03-intro-to-r.html#reading-data-into-r-2",
    "href": "materials/03-intro-to-r.html#reading-data-into-r-2",
    "title": "",
    "section": "Reading data into R",
    "text": "Reading data into R"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-visualization",
    "href": "materials/04-r-text-mining.html#create-a-visualization",
    "title": "",
    "section": "Create a visualization",
    "text": "Create a visualization\n#| label: create-visualization\n#| echo: false\n#| eval: false\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  theme_minimal()\n\n\ndf |&gt; \n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-visualization-1",
    "href": "materials/04-r-text-mining.html#create-a-visualization-1",
    "title": "",
    "section": "Create a Visualization",
    "text": "Create a Visualization\n\n\n\ndf\n\n\n\n\n# A tibble: 1,000 √ó 6\n   Review_ID Rating Year_Month Reviewer_Location Review_Text               Park \n       &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;                     &lt;chr&gt;\n 1 305683957      5 2015-08-01 Portugal          I  ve previously been to‚Ä¶ Cali‚Ä¶\n 2 666364898      3 2018-10-01 United States     The Hong Kong Disneyland‚Ä¶ Hong‚Ä¶\n 3 293082325      3 2015-06-01 United States     My wife, my 15 year old ‚Ä¶ Paris\n 4 334650140      1 2015-11-01 United Kingdom    Our family had the unfor‚Ä¶ Paris\n 5 393553042      3 2016-07-01 United States     HK Disney is very small ‚Ä¶ Hong‚Ä¶\n 6 175685909      5 2013-08-01 United Kingdom    Nothing but fun fun fun!‚Ä¶ Paris\n 7 150353289      5 2013-01-01 India             Should not miss the Disn‚Ä¶ Hong‚Ä¶\n 8 224797068      5 2014-08-01 United Kingdom    everything   i am disney‚Ä¶ Paris\n 9 310708679      5 2015-04-01 United Kingdom    Wow! What a great experi‚Ä¶ Paris\n10 126717664      5 2012-03-01 United States     I loved everything! :)  ‚Ä¶ Cali‚Ä¶\n# ‚Ñπ 990 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-visualization-2",
    "href": "materials/04-r-text-mining.html#create-a-visualization-2",
    "title": "",
    "section": "Create a Visualization",
    "text": "Create a Visualization\n\n\n\ndf |&gt;\n  ggplot(aes(Rating))"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-visualization-3",
    "href": "materials/04-r-text-mining.html#create-a-visualization-3",
    "title": "",
    "section": "Create a Visualization",
    "text": "Create a Visualization\n\n\n\ndf |&gt;\n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-visualization-4",
    "href": "materials/04-r-text-mining.html#create-a-visualization-4",
    "title": "",
    "section": "Create a Visualization",
    "text": "Create a Visualization\n\n\n\ndf |&gt;\n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-visualization-5",
    "href": "materials/04-r-text-mining.html#create-a-visualization-5",
    "title": "",
    "section": "Create a Visualization",
    "text": "Create a Visualization\n\n\n\ndf |&gt;\n  ggplot(aes(Rating)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#setup",
    "href": "materials/04-r-text-mining.html#setup",
    "title": "",
    "section": "Setup",
    "text": "Setup\n Open text-mining.R in RStudio to follow along."
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-basic-histogram",
    "href": "materials/04-r-text-mining.html#create-a-basic-histogram",
    "title": "",
    "section": "Create a basic histogram",
    "text": "Create a basic histogram"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-basic-histogram-1",
    "href": "materials/04-r-text-mining.html#create-a-basic-histogram-1",
    "title": "",
    "section": "Create a basic histogram",
    "text": "Create a basic histogram\n\n\n\nggplot(df, aes(x = Rating))"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-basic-histogram-2",
    "href": "materials/04-r-text-mining.html#create-a-basic-histogram-2",
    "title": "",
    "section": "Create a basic histogram",
    "text": "Create a basic histogram\n\n\n\nggplot(df, aes(x = Rating)) +\n  geom_bar()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-basic-histogram-3",
    "href": "materials/04-r-text-mining.html#create-a-basic-histogram-3",
    "title": "",
    "section": "Create a basic histogram",
    "text": "Create a basic histogram\n\n\n\nggplot(df, aes(x = Rating)) +\n  geom_bar() +\n  geom_bar(\n    fill = \"steelblue\",\n    color = \"black\"\n  )"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-basic-histogram-4",
    "href": "materials/04-r-text-mining.html#create-a-basic-histogram-4",
    "title": "",
    "section": "Create a basic histogram",
    "text": "Create a basic histogram\n\n\n\nggplot(df, aes(x = Rating)) +\n  geom_bar() +\n  geom_bar(\n    fill = \"steelblue\",\n    color = \"black\"\n  ) +\n  labs(\n    title = \"Distribution of Ratings\",\n    x = \"Rating\",\n    y = \"Count\"\n  )"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-basic-histogram-5",
    "href": "materials/04-r-text-mining.html#create-a-basic-histogram-5",
    "title": "",
    "section": "Create a basic histogram",
    "text": "Create a basic histogram\n\n\n\nggplot(df, aes(x = Rating)) +\n  geom_bar() +\n  geom_bar(\n    fill = \"steelblue\",\n    color = \"black\"\n  ) +\n  labs(\n    title = \"Distribution of Ratings\",\n    x = \"Rating\",\n    y = \"Count\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-basic-histogram-6",
    "href": "materials/04-r-text-mining.html#create-a-basic-histogram-6",
    "title": "",
    "section": "Create a basic histogram",
    "text": "Create a basic histogram\n\n\n\ndf |&gt;\n  ggplot(aes(x = Rating)) +\n  geom_bar() +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-basic-histogram-7",
    "href": "materials/04-r-text-mining.html#create-a-basic-histogram-7",
    "title": "",
    "section": "Create a basic histogram",
    "text": "Create a basic histogram\n\n\n\ndf |&gt;\n  ggplot(aes(x = Rating)) +\n  geom_bar() +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Ratings\",\n       x = \"Rating\",\n       y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-histogram-by-park",
    "href": "materials/04-r-text-mining.html#create-a-histogram-by-park",
    "title": "",
    "section": "Create a Histogram by Park",
    "text": "Create a Histogram by Park\n\n\n\ndf\n\n\n\n\n# A tibble: 1,000 √ó 6\n   Review_ID Rating Year_Month Reviewer_Location Review_Text               Park \n       &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;                     &lt;chr&gt;\n 1 305683957      5 2015-08-01 Portugal          I  ve previously been to‚Ä¶ Cali‚Ä¶\n 2 666364898      3 2018-10-01 United States     The Hong Kong Disneyland‚Ä¶ Hong‚Ä¶\n 3 293082325      3 2015-06-01 United States     My wife, my 15 year old ‚Ä¶ Paris\n 4 334650140      1 2015-11-01 United Kingdom    Our family had the unfor‚Ä¶ Paris\n 5 393553042      3 2016-07-01 United States     HK Disney is very small ‚Ä¶ Hong‚Ä¶\n 6 175685909      5 2013-08-01 United Kingdom    Nothing but fun fun fun!‚Ä¶ Paris\n 7 150353289      5 2013-01-01 India             Should not miss the Disn‚Ä¶ Hong‚Ä¶\n 8 224797068      5 2014-08-01 United Kingdom    everything   i am disney‚Ä¶ Paris\n 9 310708679      5 2015-04-01 United Kingdom    Wow! What a great experi‚Ä¶ Paris\n10 126717664      5 2012-03-01 United States     I loved everything! :)  ‚Ä¶ Cali‚Ä¶\n# ‚Ñπ 990 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-histogram-by-park-1",
    "href": "materials/04-r-text-mining.html#create-a-histogram-by-park-1",
    "title": "",
    "section": "Create a Histogram by Park",
    "text": "Create a Histogram by Park\n\n\n\ndf |&gt;\n  ggplot(aes(Rating, fill = Park))"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-histogram-by-park-2",
    "href": "materials/04-r-text-mining.html#create-a-histogram-by-park-2",
    "title": "",
    "section": "Create a Histogram by Park",
    "text": "Create a Histogram by Park\n\n\n\ndf |&gt;\n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-histogram-by-park-3",
    "href": "materials/04-r-text-mining.html#create-a-histogram-by-park-3",
    "title": "",
    "section": "Create a Histogram by Park",
    "text": "Create a Histogram by Park\n\n\n\ndf |&gt;\n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar() +\n  geom_bar(color = \"black\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-histogram-by-park-4",
    "href": "materials/04-r-text-mining.html#create-a-histogram-by-park-4",
    "title": "",
    "section": "Create a Histogram by Park",
    "text": "Create a Histogram by Park\n\n\n\ndf |&gt;\n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar() +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-histogram-by-park-5",
    "href": "materials/04-r-text-mining.html#create-a-histogram-by-park-5",
    "title": "",
    "section": "Create a Histogram by Park",
    "text": "Create a Histogram by Park\n\n\n\ndf |&gt;\n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar() +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\") +\n  scale_fill_brewer(palette = 3)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-histogram-by-park-6",
    "href": "materials/04-r-text-mining.html#create-a-histogram-by-park-6",
    "title": "",
    "section": "Create a Histogram by Park",
    "text": "Create a Histogram by Park\n\n\n\ndf |&gt;\n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar() +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\") +\n  scale_fill_brewer(palette = 3) +\n  theme_minimal()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-histogram-by-park-7",
    "href": "materials/04-r-text-mining.html#create-a-histogram-by-park-7",
    "title": "",
    "section": "Create a Histogram by Park",
    "text": "Create a Histogram by Park\n\n\n\ndf |&gt;\n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar() +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\") +\n  scale_fill_brewer(palette = 3) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#line-plot-1",
    "href": "materials/04-r-text-mining.html#line-plot-1",
    "title": "",
    "section": "Line plot",
    "text": "Line plot\n\n\nratings_by_year |&gt; \n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\") +\n    scale_x_continuous(breaks = c(2010,\n                                  2011,\n                                  2012,\n                                  2013,\n                                  2014,\n                                  2015,\n                                  2016,\n                                  2017,\n                                  2018,\n                                  2019,\n                                  2020)) +\n  ggthemes::theme_hc()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#park-reviews-by-year",
    "href": "materials/04-r-text-mining.html#park-reviews-by-year",
    "title": "",
    "section": "Park Reviews by Year",
    "text": "Park Reviews by Year\n\n\n\nratings_by_year\n\n\n\n\n# A tibble: 29 √ó 3\n# Groups:   Park [3]\n   Park        Year Ratings\n   &lt;chr&gt;      &lt;dbl&gt;   &lt;int&gt;\n 1 California  2011      24\n 2 California  2012      59\n 3 California  2013      51\n 4 California  2014      63\n 5 California  2015      83\n 6 California  2016      68\n 7 California  2017      45\n 8 California  2018      36\n 9 California  2019      12\n10 Hong Kong   2010       1\n# ‚Ñπ 19 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#park-reviews-by-year-1",
    "href": "materials/04-r-text-mining.html#park-reviews-by-year-1",
    "title": "",
    "section": "Park Reviews by Year",
    "text": "Park Reviews by Year\n\n\n\nratings_by_year |&gt;\n  ggplot(aes(Year, Ratings, color = Park))"
  },
  {
    "objectID": "materials/04-r-text-mining.html#park-reviews-by-year-2",
    "href": "materials/04-r-text-mining.html#park-reviews-by-year-2",
    "title": "",
    "section": "Park Reviews by Year",
    "text": "Park Reviews by Year\n\n\n\nratings_by_year |&gt;\n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#park-reviews-by-year-3",
    "href": "materials/04-r-text-mining.html#park-reviews-by-year-3",
    "title": "",
    "section": "Park Reviews by Year",
    "text": "Park Reviews by Year\n\n\n\nratings_by_year |&gt;\n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#park-reviews-by-year-4",
    "href": "materials/04-r-text-mining.html#park-reviews-by-year-4",
    "title": "",
    "section": "Park Reviews by Year",
    "text": "Park Reviews by Year\n\n\n\nratings_by_year |&gt;\n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\") +\n    scale_x_continuous(breaks = c(2010,\n                                  2011,\n                                  2012,\n                                  2013,\n                                  2014,\n                                  2015,\n                                  2016,\n                                  2017,\n                                  2018,\n                                  2019,\n                                  2020))"
  },
  {
    "objectID": "materials/04-r-text-mining.html#park-reviews-by-year-5",
    "href": "materials/04-r-text-mining.html#park-reviews-by-year-5",
    "title": "",
    "section": "Park Reviews by Year",
    "text": "Park Reviews by Year\n\n\n\nratings_by_year |&gt;\n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\") +\n    scale_x_continuous(breaks = c(2010,\n                                  2011,\n                                  2012,\n                                  2013,\n                                  2014,\n                                  2015,\n                                  2016,\n                                  2017,\n                                  2018,\n                                  2019,\n                                  2020)) +\n  ggthemes::theme_hc()"
  },
  {
    "objectID": "resources.html#cheat-sheets",
    "href": "resources.html#cheat-sheets",
    "title": "Resources",
    "section": "Cheat Sheets",
    "text": "Cheat Sheets\nPosit Primers\nPosit Cheat Sheets"
  },
  {
    "objectID": "materials/04-r-text-mining.html#histogram-by-park-1",
    "href": "materials/04-r-text-mining.html#histogram-by-park-1",
    "title": "",
    "section": "Histogram by park",
    "text": "Histogram by park\n\n\n\nggplot(df, aes(Rating,\n  fill = Park\n))"
  },
  {
    "objectID": "materials/04-r-text-mining.html#histogram-by-park-2",
    "href": "materials/04-r-text-mining.html#histogram-by-park-2",
    "title": "",
    "section": "Histogram by park",
    "text": "Histogram by park\n\n\n\nggplot(df, aes(Rating,\n  fill = Park\n)) +\n  geom_bar()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#histogram-by-park-3",
    "href": "materials/04-r-text-mining.html#histogram-by-park-3",
    "title": "",
    "section": "Histogram by park",
    "text": "Histogram by park\n\n\n\nggplot(df, aes(Rating,\n  fill = Park\n)) +\n  geom_bar() +\n  geom_bar(color = \"black\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#histogram-by-park-4",
    "href": "materials/04-r-text-mining.html#histogram-by-park-4",
    "title": "",
    "section": "Histogram by park",
    "text": "Histogram by park\n\n\n\nggplot(df, aes(Rating,\n  fill = Park\n)) +\n  geom_bar() +\n  geom_bar(color = \"black\") +\n  labs(\n    title = \"Distribution of Ratings by Park\",\n    x = \"Rating\",\n    y = \"Count\",\n    fill = \"Park\"\n  )"
  },
  {
    "objectID": "materials/04-r-text-mining.html#histogram-by-park-5",
    "href": "materials/04-r-text-mining.html#histogram-by-park-5",
    "title": "",
    "section": "Histogram by park",
    "text": "Histogram by park\n\n\n\nggplot(df, aes(Rating,\n  fill = Park\n)) +\n  geom_bar() +\n  geom_bar(color = \"black\") +\n  labs(\n    title = \"Distribution of Ratings by Park\",\n    x = \"Rating\",\n    y = \"Count\",\n    fill = \"Park\"\n  ) +\n  scale_fill_brewer(palette = 3)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#histogram-by-park-6",
    "href": "materials/04-r-text-mining.html#histogram-by-park-6",
    "title": "",
    "section": "Histogram by park",
    "text": "Histogram by park\n\n\n\nggplot(df, aes(Rating,\n  fill = Park\n)) +\n  geom_bar() +\n  geom_bar(color = \"black\") +\n  labs(\n    title = \"Distribution of Ratings by Park\",\n    x = \"Rating\",\n    y = \"Count\",\n    fill = \"Park\"\n  ) +\n  scale_fill_brewer(palette = 3) +\n  theme_bw()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#histogram-by-park-7",
    "href": "materials/04-r-text-mining.html#histogram-by-park-7",
    "title": "",
    "section": "Histogram by park",
    "text": "Histogram by park\n\n\n\nggplot(df, aes(Rating,\n  fill = Park\n)) +\n  geom_bar() +\n  geom_bar(color = \"black\") +\n  labs(\n    title = \"Distribution of Ratings by Park\",\n    x = \"Rating\",\n    y = \"Count\",\n    fill = \"Park\"\n  ) +\n  scale_fill_brewer(palette = 3) +\n  theme_bw() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#histogram-by-park-8",
    "href": "materials/04-r-text-mining.html#histogram-by-park-8",
    "title": "",
    "section": "Histogram by park",
    "text": "Histogram by park\n\n\n\ndf |&gt;\n  ggplot(aes(Rating, fill = Park)) +\n  geom_bar() +\n  geom_bar(color = \"black\") +\n  labs(title = \"Distribution of Ratings by Park\",\n       x = \"Rating\",\n       y = \"Count\",\n       fill = \"Park\") +\n  scale_fill_brewer(palette = 3) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year",
    "href": "materials/04-r-text-mining.html#reviews-by-year",
    "title": "",
    "section": "Reviews by year",
    "text": "Reviews by year\nWhat if we wanted to look at the park ratings over time? What would we need to do?\n\nMake sure Year_Month is a date\nGroup by Park\nCount ratings per year"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-1",
    "href": "materials/04-r-text-mining.html#reviews-by-year-1",
    "title": "",
    "section": "Reviews by year",
    "text": "Reviews by year\n\n\nratings_by_year &lt;- df |&gt; \n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt; \n  group_by(Park) |&gt; \n  count(Year) |&gt; \n  rename(Ratings = n)\n\nratings_by_year\n\n\n# A tibble: 29 √ó 3\n# Groups:   Park [3]\n   Park        Year Ratings\n   &lt;chr&gt;      &lt;dbl&gt;   &lt;int&gt;\n 1 California  2011      24\n 2 California  2012      59\n 3 California  2013      51\n 4 California  2014      63\n 5 California  2015      83\n 6 California  2016      68\n 7 California  2017      45\n 8 California  2018      36\n 9 California  2019      12\n10 Hong Kong   2010       1\n# ‚Ñπ 19 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-2",
    "href": "materials/04-r-text-mining.html#reviews-by-year-2",
    "title": "",
    "section": "Reviews by year",
    "text": "Reviews by year"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-3",
    "href": "materials/04-r-text-mining.html#reviews-by-year-3",
    "title": "",
    "section": "Reviews by year",
    "text": "Reviews by year\n\n\n\nggplot(\n  ratings_by_year,\n  aes(Year,\n    Ratings,\n    color = Park\n  )\n)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-4",
    "href": "materials/04-r-text-mining.html#reviews-by-year-4",
    "title": "",
    "section": "Reviews by year",
    "text": "Reviews by year\n\n\n\nggplot(\n  ratings_by_year,\n  aes(Year,\n    Ratings,\n    color = Park\n  )\n) +\n  geom_line()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-5",
    "href": "materials/04-r-text-mining.html#reviews-by-year-5",
    "title": "",
    "section": "Reviews by year",
    "text": "Reviews by year\n\n\n\nggplot(\n  ratings_by_year,\n  aes(Year,\n    Ratings,\n    color = Park\n  )\n) +\n  geom_line() +\n  labs(\n    title = \"Ratings by Park per Year\",\n    x = \"Year\",\n    y = \"Ratings\"\n  )"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-6",
    "href": "materials/04-r-text-mining.html#reviews-by-year-6",
    "title": "",
    "section": "Reviews by year",
    "text": "Reviews by year\n\n\n\nggplot(\n  ratings_by_year,\n  aes(Year,\n    Ratings,\n    color = Park\n  )\n) +\n  geom_line() +\n  labs(\n    title = \"Ratings by Park per Year\",\n    x = \"Year\",\n    y = \"Ratings\"\n  ) +\n  scale_x_continuous(\n    breaks = c(\n      2010,\n      2011,\n      2012,\n      2013,\n      2014,\n      2015,\n      2016,\n      2017,\n      2018,\n      2019,\n      2020\n    )\n  )"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-7",
    "href": "materials/04-r-text-mining.html#reviews-by-year-7",
    "title": "",
    "section": "Reviews by year",
    "text": "Reviews by year\n\n\n\nggplot(\n  ratings_by_year,\n  aes(Year,\n    Ratings,\n    color = Park\n  )\n) +\n  geom_line() +\n  labs(\n    title = \"Ratings by Park per Year\",\n    x = \"Year\",\n    y = \"Ratings\"\n  ) +\n  scale_x_continuous(\n    breaks = c(\n      2010,\n      2011,\n      2012,\n      2013,\n      2014,\n      2015,\n      2016,\n      2017,\n      2018,\n      2019,\n      2020\n    )\n  ) +\n  ggthemes::theme_economist()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-8",
    "href": "materials/04-r-text-mining.html#reviews-by-year-8",
    "title": "",
    "section": "Reviews by year",
    "text": "Reviews by year\n\n\n\nratings_by_year |&gt;\n  ggplot(aes(Year, Ratings, color = Park)) +\n  geom_line() +\n  labs(title = \"Ratings by Park per Year\",\n       x = \"Year\",\n       y = \"Ratings\") +\n    scale_x_continuous(breaks = c(2010,\n                                  2011,\n                                  2012,\n                                  2013,\n                                  2014,\n                                  2015,\n                                  2016,\n                                  2017,\n                                  2018,\n                                  2019,\n                                  2020)) +\n  ggthemes::theme_hc()"
  },
  {
    "objectID": "materials/04-r-text-mining.html#setup-1",
    "href": "materials/04-r-text-mining.html#setup-1",
    "title": "",
    "section": "Setup",
    "text": "Setup\n\n\n\n\n\n\nTip\n\n\nBefore we get started, it‚Äôs a good idea to Restart R. That way nothing we did before carries through this section. (Session ‚ûî Restart R)\n\n\n\n\n# Install packages\n# install.packages(\"tidyverse\")\n# install.packages(\"tidytext\")\n# install.packages(\"wordcloud\")\n# install.packages(\"here\")\n\n# Load libraries\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(wordcloud)\nlibrary(here)"
  },
  {
    "objectID": "materials/01-introduction.html#word-and-document-similarity",
    "href": "materials/01-introduction.html#word-and-document-similarity",
    "title": "",
    "section": "Word and document similarity",
    "text": "Word and document similarity\n\nWord Similarity: similarity between individual words or tokens\nDocument Similarity: similarity between short phrases or documents"
  },
  {
    "objectID": "materials/01-introduction.html#jaccard-similarity",
    "href": "materials/01-introduction.html#jaccard-similarity",
    "title": "",
    "section": "Jaccard Similarity",
    "text": "Jaccard Similarity\nCalculates the similarity and diversity of a sample data set by looking at how many terms the two documents share, compared to the total vocabulary \\[J(A, B)=\\frac{|A \\cap B|}{|A \\cup B|}=\\frac{|A \\cap B|}{|A|+|B|-|A \\cap B|}\\]"
  },
  {
    "objectID": "materials/01-introduction.html#cosine-similarity",
    "href": "materials/01-introduction.html#cosine-similarity",
    "title": "",
    "section": "Cosine Similarity",
    "text": "Cosine Similarity\nCalculates the similarity between words \\[\\cos (\\theta)=\\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\|\\|\\mathbf{B}\\|}=\\frac{\\sum_{i=1}^n A_i B_i}{\\sqrt{\\sum_{i=1}^n A_i^2 \\cdot \\sum_{i=1}^n B_i^2}}\\]"
  },
  {
    "objectID": "materials/01-introduction.html#latent-semantic-analysis-lsa",
    "href": "materials/01-introduction.html#latent-semantic-analysis-lsa",
    "title": "",
    "section": "Latent Semantic Analysis (LSA):",
    "text": "Latent Semantic Analysis (LSA):\nAn algorithm that reduces the dimensionality of the vector space in order to understand which words are most associated (i.e.¬†king:male, queen:female, doctor:male, nurse:female)"
  },
  {
    "objectID": "materials/02-excel.html#chatgpt-for-code-formula-help",
    "href": "materials/02-excel.html#chatgpt-for-code-formula-help",
    "title": "",
    "section": "ChatGPT for Code & Formula Help",
    "text": "ChatGPT for Code & Formula Help\n\n\n\n\n\n\nWarning\n\n\nAssume that everything you put into ChatGPT (or other LLMs) is public. Do not enter confidential or proprietary information into it.\n\n\n\nTell ChatGPT what is is you need assistance with:"
  },
  {
    "objectID": "materials/02-excel.html#lets-try",
    "href": "materials/02-excel.html#lets-try",
    "title": "",
    "section": "Let‚Äôs Try!",
    "text": "Let‚Äôs Try!\n Open 02-excel/excel-examples.xlsx if you‚Äôd like to follow along.\n\n\nIntroduction to Text Mining"
  },
  {
    "objectID": "materials/04-r-text-mining.html#create-a-word-cloud-output",
    "href": "materials/04-r-text-mining.html#create-a-word-cloud-output",
    "title": "",
    "section": "Create a word cloud",
    "text": "Create a word cloud"
  },
  {
    "objectID": "materials/04-r-text-mining.html#review-length-by-park-output",
    "href": "materials/04-r-text-mining.html#review-length-by-park-output",
    "title": "",
    "section": "Review length by park",
    "text": "Review length by park"
  },
  {
    "objectID": "materials/04-r-text-mining.html#sentiment-analysis-4",
    "href": "materials/04-r-text-mining.html#sentiment-analysis-4",
    "title": "",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\n\n\nggplot(tidy_reviews_sentiment, aes(index, sentiment, fill = Park)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ Park, ncol = 1, scales = \"free_x\") +\n  labs(title = \"Sentiment Analysis by Park\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nIntroduction to Text Mining"
  },
  {
    "objectID": "materials/03-intro-to-r.html#piping-functions-1",
    "href": "materials/03-intro-to-r.html#piping-functions-1",
    "title": "",
    "section": "Piping functions",
    "text": "Piping functions\n\npenguins |&gt; \n  filter(sex == \"female\") |&gt; \n  arrange(flipper_length_mm) |&gt; \n  head()\n\n\n\n# A tibble: 6 √ó 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe              37.9          18.6               172        3150\n2 Adelie    Biscoe              37.8          18.3               174        3400\n3 Adelie    Torgersen           40.2          17                 176        3450\n4 Adelie    Dream               39.5          16.7               178        3250\n5 Adelie    Dream               33.1          16.1               178        2900\n6 Chinstrap Dream               46.1          18.2               178        3250\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "materials/03-intro-to-r.html#making-new-variables-3",
    "href": "materials/03-intro-to-r.html#making-new-variables-3",
    "title": "",
    "section": "Making new variables",
    "text": "Making new variables\n\n\nflippers &lt;- penguins |&gt;\n  mutate(flipper_length = case_when(\n    flipper_length_mm &lt; 190 ~ \"short\",\n    flipper_length_mm &gt;= 190 &\n      flipper_length_mm &lt; 213 ~ \"average\",\n    flipper_length_mm &gt; 213 ~ \"long\"\n  ))\n\nflippers |&gt;\n  select(flipper_length_mm, \n         flipper_length) |&gt;\n  head()\n\n\n# A tibble: 6 √ó 2\n  flipper_length_mm flipper_length\n              &lt;int&gt; &lt;chr&gt;         \n1               181 short         \n2               186 short         \n3               195 average       \n4                NA &lt;NA&gt;          \n5               193 average       \n6               190 average"
  },
  {
    "objectID": "materials/03-intro-to-r.html#summarize-the-data",
    "href": "materials/03-intro-to-r.html#summarize-the-data",
    "title": "",
    "section": "Summarize the data",
    "text": "Summarize the data\n\n\nflippers |&gt; \n  count(flipper_length)\n\n\n# A tibble: 4 √ó 2\n  flipper_length     n\n  &lt;chr&gt;          &lt;int&gt;\n1 average          174\n2 long              85\n3 short             77\n4 &lt;NA&gt;               8"
  },
  {
    "objectID": "materials/03-intro-to-r.html#summarize-the-data-1",
    "href": "materials/03-intro-to-r.html#summarize-the-data-1",
    "title": "",
    "section": "Summarize the data",
    "text": "Summarize the data\n\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(avg_flipper_length = \n              mean(flipper_length_mm))\n\n\n# A tibble: 3 √ó 2\n  species   avg_flipper_length\n  &lt;fct&gt;                  &lt;dbl&gt;\n1 Adelie                   NA \n2 Chinstrap               196.\n3 Gentoo                   NA"
  },
  {
    "objectID": "materials/03-intro-to-r.html#summarize-the-data-2",
    "href": "materials/03-intro-to-r.html#summarize-the-data-2",
    "title": "",
    "section": "Summarize the data",
    "text": "Summarize the data\n\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(avg_flipper_length = \n              mean(flipper_length_mm, \n1                   na.rm = TRUE))\n\n\n\n1\n\nBy default, summarise includes all records, regardless of whether they have a value or not. We need to explicitly tell R to exclude them.\n\n\n\n\n# A tibble: 3 √ó 2\n  species   avg_flipper_length\n  &lt;fct&gt;                  &lt;dbl&gt;\n1 Adelie                  190.\n2 Chinstrap               196.\n3 Gentoo                  217."
  },
  {
    "objectID": "materials/05-python-text-mining.html#general-libraries",
    "href": "materials/05-python-text-mining.html#general-libraries",
    "title": "",
    "section": "",
    "text": "# General purpose\nfrom collections import Counter\nimport numpy as np\nimport os\nimport warnings\nwarnings.filterwarnings(action = 'ignore')\n\n# Data wrangling\nimport pandas as pd  # similar to tidyverse\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "materials/05-python-text-mining.html#text-mining-libraries",
    "href": "materials/05-python-text-mining.html#text-mining-libraries",
    "title": "",
    "section": "",
    "text": "import nltk\nimport string\n\nnltk.download(\"omw-1.4\")\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')\n\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tokenize import WordPunctTokenizer\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nfrom textblob import TextBlob\nfrom textblob import Word"
  },
  {
    "objectID": "materials/05-python-text-mining.html#normalize-reviews",
    "href": "materials/05-python-text-mining.html#normalize-reviews",
    "title": "",
    "section": "Normalize reviews",
    "text": "Normalize reviews\n\n# Convert to lowercase\ndf['Clean_Text'] = df['Review_Text'].apply(lambda x : ' '.join(x.lower() for x in x.split()))\n\n# Remove numbers\ndf['Clean_Text'] = df['Clean_Text'].str.replace('\\d','')\n\n# Remove punctuation\ndf['Clean_Text'] = df['Clean_Text'].str.replace('[^\\w\\s]', '')"
  },
  {
    "objectID": "materials/05-python-text-mining.html#lemmatization",
    "href": "materials/05-python-text-mining.html#lemmatization",
    "title": "",
    "section": "Lemmatization",
    "text": "Lemmatization\n\ndf['Clean_Text'] = df['Clean_Text'].apply(lambda x: ' '.join([Word(x).lemmatize()]))\n\ndf['Clean_Text'].head()\n\n0    previously 3 resorts expectations sky high ori...\n1    hong kong quite small many people waiting line...\n2    wife 15 year old son went june 30 2015 hot sun...\n3    family unfortunate experience paris weekend 13...\n4    hk small lines big attractions long enjoy took...\nName: Clean_Text, dtype: object"
  },
  {
    "objectID": "materials/05-python-text-mining.html#tokenization",
    "href": "materials/05-python-text-mining.html#tokenization",
    "title": "",
    "section": "Tokenization",
    "text": "Tokenization\n\ndf['Tokens'] = df['Clean_Text'].apply(lambda x: TextBlob(x).words)\n\ndf['Tokens'].head()\n\n0    [previously, 3, resorts, expectations, sky, hi...\n1    [hong, kong, quite, small, many, people, waiti...\n2    [wife, 15, year, old, son, went, june, 30, 201...\n3    [family, unfortunate, experience, paris, weeke...\n4    [hk, small, lines, big, attractions, long, enj...\nName: Tokens, dtype: object"
  },
  {
    "objectID": "materials/05-python-text-mining.html#frequency",
    "href": "materials/05-python-text-mining.html#frequency",
    "title": "",
    "section": "Frequency",
    "text": "Frequency\n\ndf['Frequency'] = df['Clean_Text'].apply(lambda x: len(str(x).split(' '))) \n\ndf['Frequency'].head()\n\n0    44\n1    19\n2    72\n3    56\n4    17\nName: Frequency, dtype: int64"
  },
  {
    "objectID": "materials/05-python-text-mining.html#convert-words-to-single-text",
    "href": "materials/05-python-text-mining.html#convert-words-to-single-text",
    "title": "",
    "section": "Convert words to single text",
    "text": "Convert words to single text\n\nall_review_text = ' '.join(i for i in df.Review_Text)\nall_clean_text = ' '.join(i for i in df.Clean_Text)"
  },
  {
    "objectID": "materials/05-python-text-mining.html#n-grams",
    "href": "materials/05-python-text-mining.html#n-grams",
    "title": "",
    "section": "N-Grams",
    "text": "N-Grams\n\nplotNgrams(df['Clean_Text'])"
  },
  {
    "objectID": "materials/05-python-text-mining.html#convert-dates",
    "href": "materials/05-python-text-mining.html#convert-dates",
    "title": "",
    "section": "Convert dates",
    "text": "Convert dates\n\ndf.Year_Month=df.Year_Month.apply(pd.to_datetime, errors ='coerce')\n\ndf['Month']=df.Year_Month.dt.month\ndf['Year']=df.Year_Month.dt.year"
  },
  {
    "objectID": "materials/05-python-text-mining.html#reviews-by-park",
    "href": "materials/05-python-text-mining.html#reviews-by-park",
    "title": "",
    "section": "Reviews by park",
    "text": "Reviews by park\n\nsns.set(rc = {'figure.figsize':(15, 5)})\nsns.countplot(x=df[\"Branch\"])\n\n&lt;Axes: xlabel='Branch', ylabel='count'&gt;"
  },
  {
    "objectID": "materials/05-python-text-mining.html#ratings-by-year",
    "href": "materials/05-python-text-mining.html#ratings-by-year",
    "title": "",
    "section": "Ratings by year",
    "text": "Ratings by year\n\nsns.lineplot(data=df, x=\"Year\", y=\"Rating\", hue=\"Branch\").set(title=\"Ratings per Year\");"
  },
  {
    "objectID": "materials/05-python-text-mining.html#word-cloud-all-words",
    "href": "materials/05-python-text-mining.html#word-cloud-all-words",
    "title": "",
    "section": "Word cloud (all words)",
    "text": "Word cloud (all words)\n\nwordcloud = WordCloud(\n    colormap=\"Set2\",\n    collocations=False).generate(all_review_text)\n\nplt.figure(figsize=[11,11])\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"Disney Park Reviews\")\nplt.show()"
  },
  {
    "objectID": "materials/05-python-text-mining.html#word-cloud-all-words-output",
    "href": "materials/05-python-text-mining.html#word-cloud-all-words-output",
    "title": "",
    "section": "Word cloud (all words)",
    "text": "Word cloud (all words)"
  },
  {
    "objectID": "materials/05-python-text-mining.html#word-cloud-less-stop-words",
    "href": "materials/05-python-text-mining.html#word-cloud-less-stop-words",
    "title": "",
    "section": "Word cloud (less stop words)",
    "text": "Word cloud (less stop words)\n\nwordcloud = WordCloud(\n    colormap=\"Set2\",\n    collocations=False).generate(all_clean_text)\n\nplt.figure(figsize=[11,11])\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"Disney Park Reviews\")\nplt.show()"
  },
  {
    "objectID": "materials/05-python-text-mining.html#word-cloud-less-stop-words-output",
    "href": "materials/05-python-text-mining.html#word-cloud-less-stop-words-output",
    "title": "",
    "section": "Word cloud (less stop words)",
    "text": "Word cloud (less stop words)"
  },
  {
    "objectID": "materials/05-python-text-mining.html#most-common-words-less-stop-words",
    "href": "materials/05-python-text-mining.html#most-common-words-less-stop-words",
    "title": "",
    "section": "Most common words (less stop words)",
    "text": "Most common words (less stop words)\n\nmost_common = Counter(' '.join(df['Clean_Text']).split()).most_common(20)\n\nmost_common_df = pd.DataFrame(most_common, columns = ['Words', 'Freq'])\n\nsns.barplot(data = most_common_df, x = 'Words', y = 'Freq')\nplt.title('20 Most Common Words')\nplt.xticks(rotation = 60)\nplt.show()"
  },
  {
    "objectID": "materials/05-python-text-mining.html#most-common-words-less-stop-words-output",
    "href": "materials/05-python-text-mining.html#most-common-words-less-stop-words-output",
    "title": "",
    "section": "Most common words (less stop words)",
    "text": "Most common words (less stop words)"
  },
  {
    "objectID": "materials/05-python-text-mining.html#bigrams",
    "href": "materials/05-python-text-mining.html#bigrams",
    "title": "",
    "section": "Bigrams",
    "text": "Bigrams\n\nbigrams = ngrams(word_tokenize(df['Clean_Text'].sum()), 2)\nbigrams_freq = Counter(bigrams)\nbigrams_freq.most_common(10)\n\n[(('fast', 'pass'), 101),\n (('year', 'old'), 81),\n (('space', 'mountain'), 62),\n (('hong', 'kong'), 54),\n (('main', 'street'), 50),\n (('small', 'world'), 49),\n (('go', 'back'), 47),\n (('fast', 'passes'), 46),\n (('make', 'sure'), 46),\n (('cast', 'members'), 44)]"
  },
  {
    "objectID": "materials/05-python-text-mining.html#trigrams",
    "href": "materials/05-python-text-mining.html#trigrams",
    "title": "",
    "section": "Trigrams",
    "text": "Trigrams\n\ntrigrams = ngrams(word_tokenize(df['Clean_Text'].sum()), 3)\ntrigrams_freq = Counter(trigrams)\ntrigrams_freq.most_common(10)\n\n[(('happiest', 'place', 'earth'), 25),\n (('big', 'thunder', 'mountain'), 19),\n (('use', 'fast', 'pass'), 14),\n (('fast', 'pass', 'system'), 13),\n (('cant', 'wait', 'go'), 10),\n (('get', 'fast', 'pass'), 10),\n (('make', 'sure', 'get'), 10),\n (('year', 'old', 'daughter'), 10),\n (('2', 'year', 'old'), 9),\n (('8', 'year', 'old'), 9)]"
  },
  {
    "objectID": "materials/03-intro-to-r.html#other-ways-to-view-the-data-1",
    "href": "materials/03-intro-to-r.html#other-ways-to-view-the-data-1",
    "title": "",
    "section": "Other ways to view the data",
    "text": "Other ways to view the data\n\nview(penguins)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-an-aside",
    "href": "materials/04-r-text-mining.html#reviews-by-year-an-aside",
    "title": "",
    "section": "Reviews by year (an aside)",
    "text": "Reviews by year (an aside)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#section",
    "href": "materials/04-r-text-mining.html#section",
    "title": "",
    "section": "",
    "text": "df\n\n\n\n\n# A tibble: 1,000 √ó 6\n   Review_ID Rating Year_Month Reviewer_Location Review_Text               Park \n       &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;                     &lt;chr&gt;\n 1 305683957      5 2015-08-01 Portugal          I  ve previously been to‚Ä¶ Cali‚Ä¶\n 2 666364898      3 2018-10-01 United States     The Hong Kong Disneyland‚Ä¶ Hong‚Ä¶\n 3 293082325      3 2015-06-01 United States     My wife, my 15 year old ‚Ä¶ Paris\n 4 334650140      1 2015-11-01 United Kingdom    Our family had the unfor‚Ä¶ Paris\n 5 393553042      3 2016-07-01 United States     HK Disney is very small ‚Ä¶ Hong‚Ä¶\n 6 175685909      5 2013-08-01 United Kingdom    Nothing but fun fun fun!‚Ä¶ Paris\n 7 150353289      5 2013-01-01 India             Should not miss the Disn‚Ä¶ Hong‚Ä¶\n 8 224797068      5 2014-08-01 United Kingdom    everything   i am disney‚Ä¶ Paris\n 9 310708679      5 2015-04-01 United Kingdom    Wow! What a great experi‚Ä¶ Paris\n10 126717664      5 2012-03-01 United States     I loved everything! :)  ‚Ä¶ Cali‚Ä¶\n# ‚Ñπ 990 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#section-1",
    "href": "materials/04-r-text-mining.html#section-1",
    "title": "",
    "section": "",
    "text": "df |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month))\n\n\n\n\n# A tibble: 1,000 √ó 8\n   Review_ID Rating Year_Month Reviewer_Location Review_Text   Park   Year Month\n       &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 305683957      5 2015-08-01 Portugal          I  ve previo‚Ä¶ Cali‚Ä¶  2015     8\n 2 666364898      3 2018-10-01 United States     The Hong Kon‚Ä¶ Hong‚Ä¶  2018    10\n 3 293082325      3 2015-06-01 United States     My wife, my ‚Ä¶ Paris  2015     6\n 4 334650140      1 2015-11-01 United Kingdom    Our family h‚Ä¶ Paris  2015    11\n 5 393553042      3 2016-07-01 United States     HK Disney is‚Ä¶ Hong‚Ä¶  2016     7\n 6 175685909      5 2013-08-01 United Kingdom    Nothing but ‚Ä¶ Paris  2013     8\n 7 150353289      5 2013-01-01 India             Should not m‚Ä¶ Hong‚Ä¶  2013     1\n 8 224797068      5 2014-08-01 United Kingdom    everything  ‚Ä¶ Paris  2014     8\n 9 310708679      5 2015-04-01 United Kingdom    Wow! What a ‚Ä¶ Paris  2015     4\n10 126717664      5 2012-03-01 United States     I loved ever‚Ä¶ Cali‚Ä¶  2012     3\n# ‚Ñπ 990 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#section-2",
    "href": "materials/04-r-text-mining.html#section-2",
    "title": "",
    "section": "",
    "text": "df |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park)\n\n\n\n\n# A tibble: 1,000 √ó 8\n# Groups:   Park [3]\n   Review_ID Rating Year_Month Reviewer_Location Review_Text   Park   Year Month\n       &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 305683957      5 2015-08-01 Portugal          I  ve previo‚Ä¶ Cali‚Ä¶  2015     8\n 2 666364898      3 2018-10-01 United States     The Hong Kon‚Ä¶ Hong‚Ä¶  2018    10\n 3 293082325      3 2015-06-01 United States     My wife, my ‚Ä¶ Paris  2015     6\n 4 334650140      1 2015-11-01 United Kingdom    Our family h‚Ä¶ Paris  2015    11\n 5 393553042      3 2016-07-01 United States     HK Disney is‚Ä¶ Hong‚Ä¶  2016     7\n 6 175685909      5 2013-08-01 United Kingdom    Nothing but ‚Ä¶ Paris  2013     8\n 7 150353289      5 2013-01-01 India             Should not m‚Ä¶ Hong‚Ä¶  2013     1\n 8 224797068      5 2014-08-01 United Kingdom    everything  ‚Ä¶ Paris  2014     8\n 9 310708679      5 2015-04-01 United Kingdom    Wow! What a ‚Ä¶ Paris  2015     4\n10 126717664      5 2012-03-01 United States     I loved ever‚Ä¶ Cali‚Ä¶  2012     3\n# ‚Ñπ 990 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#section-3",
    "href": "materials/04-r-text-mining.html#section-3",
    "title": "",
    "section": "",
    "text": "df |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park) |&gt;\n  count(Year)\n\n\n\n\n# A tibble: 29 √ó 3\n# Groups:   Park [3]\n   Park        Year     n\n   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;\n 1 California  2011    24\n 2 California  2012    59\n 3 California  2013    51\n 4 California  2014    63\n 5 California  2015    83\n 6 California  2016    68\n 7 California  2017    45\n 8 California  2018    36\n 9 California  2019    12\n10 Hong Kong   2010     1\n# ‚Ñπ 19 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#section-4",
    "href": "materials/04-r-text-mining.html#section-4",
    "title": "",
    "section": "",
    "text": "df |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park) |&gt;\n  count(Year) |&gt;\n  rename(Ratings = n)\n\n\n\n\n# A tibble: 29 √ó 3\n# Groups:   Park [3]\n   Park        Year Ratings\n   &lt;chr&gt;      &lt;dbl&gt;   &lt;int&gt;\n 1 California  2011      24\n 2 California  2012      59\n 3 California  2013      51\n 4 California  2014      63\n 5 California  2015      83\n 6 California  2016      68\n 7 California  2017      45\n 8 California  2018      36\n 9 California  2019      12\n10 Hong Kong   2010       1\n# ‚Ñπ 19 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#section-5",
    "href": "materials/04-r-text-mining.html#section-5",
    "title": "",
    "section": "",
    "text": "df |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park) |&gt;\n  count(Year) |&gt;\n  rename(Ratings = n) |&gt;\n  pivot_wider(names_from = Park,\n              values_from = Ratings)\n\n\n\n\n# A tibble: 10 √ó 4\n    Year California `Hong Kong` Paris\n   &lt;dbl&gt;      &lt;int&gt;       &lt;int&gt; &lt;int&gt;\n 1  2011         24          10    19\n 2  2012         59          19    32\n 3  2013         51          16    29\n 4  2014         63          32    55\n 5  2015         83          39    53\n 6  2016         68          48    54\n 7  2017         45          43    42\n 8  2018         36          21    31\n 9  2019         12           6     7\n10  2010         NA           1     2"
  },
  {
    "objectID": "materials/04-r-text-mining.html#section-6",
    "href": "materials/04-r-text-mining.html#section-6",
    "title": "",
    "section": "",
    "text": "df |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park) |&gt;\n  count(Year) |&gt;\n  rename(Ratings = n) |&gt;\n  pivot_wider(names_from = Park,\n              values_from = Ratings) |&gt;\n  arrange(desc(Year))\n\n\n\n\n# A tibble: 10 √ó 4\n    Year California `Hong Kong` Paris\n   &lt;dbl&gt;      &lt;int&gt;       &lt;int&gt; &lt;int&gt;\n 1  2019         12           6     7\n 2  2018         36          21    31\n 3  2017         45          43    42\n 4  2016         68          48    54\n 5  2015         83          39    53\n 6  2014         63          32    55\n 7  2013         51          16    29\n 8  2012         59          19    32\n 9  2011         24          10    19\n10  2010         NA           1     2"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-an-aside-1",
    "href": "materials/04-r-text-mining.html#reviews-by-year-an-aside-1",
    "title": "",
    "section": "Reviews by year (an aside)",
    "text": "Reviews by year (an aside)\n\n\n\ndf\n\n\n\n\n# A tibble: 1,000 √ó 6\n   Review_ID Rating Year_Month Reviewer_Location Review_Text               Park \n       &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;                     &lt;chr&gt;\n 1 305683957      5 2015-08-01 Portugal          I  ve previously been to‚Ä¶ Cali‚Ä¶\n 2 666364898      3 2018-10-01 United States     The Hong Kong Disneyland‚Ä¶ Hong‚Ä¶\n 3 293082325      3 2015-06-01 United States     My wife, my 15 year old ‚Ä¶ Paris\n 4 334650140      1 2015-11-01 United Kingdom    Our family had the unfor‚Ä¶ Paris\n 5 393553042      3 2016-07-01 United States     HK Disney is very small ‚Ä¶ Hong‚Ä¶\n 6 175685909      5 2013-08-01 United Kingdom    Nothing but fun fun fun!‚Ä¶ Paris\n 7 150353289      5 2013-01-01 India             Should not miss the Disn‚Ä¶ Hong‚Ä¶\n 8 224797068      5 2014-08-01 United Kingdom    everything   i am disney‚Ä¶ Paris\n 9 310708679      5 2015-04-01 United Kingdom    Wow! What a great experi‚Ä¶ Paris\n10 126717664      5 2012-03-01 United States     I loved everything! :)  ‚Ä¶ Cali‚Ä¶\n# ‚Ñπ 990 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-an-aside-2",
    "href": "materials/04-r-text-mining.html#reviews-by-year-an-aside-2",
    "title": "",
    "section": "Reviews by year (an aside)",
    "text": "Reviews by year (an aside)\n\n\n\ndf |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month))\n\n\n\n\n# A tibble: 1,000 √ó 8\n   Review_ID Rating Year_Month Reviewer_Location Review_Text   Park   Year Month\n       &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 305683957      5 2015-08-01 Portugal          I  ve previo‚Ä¶ Cali‚Ä¶  2015     8\n 2 666364898      3 2018-10-01 United States     The Hong Kon‚Ä¶ Hong‚Ä¶  2018    10\n 3 293082325      3 2015-06-01 United States     My wife, my ‚Ä¶ Paris  2015     6\n 4 334650140      1 2015-11-01 United Kingdom    Our family h‚Ä¶ Paris  2015    11\n 5 393553042      3 2016-07-01 United States     HK Disney is‚Ä¶ Hong‚Ä¶  2016     7\n 6 175685909      5 2013-08-01 United Kingdom    Nothing but ‚Ä¶ Paris  2013     8\n 7 150353289      5 2013-01-01 India             Should not m‚Ä¶ Hong‚Ä¶  2013     1\n 8 224797068      5 2014-08-01 United Kingdom    everything  ‚Ä¶ Paris  2014     8\n 9 310708679      5 2015-04-01 United Kingdom    Wow! What a ‚Ä¶ Paris  2015     4\n10 126717664      5 2012-03-01 United States     I loved ever‚Ä¶ Cali‚Ä¶  2012     3\n# ‚Ñπ 990 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-an-aside-3",
    "href": "materials/04-r-text-mining.html#reviews-by-year-an-aside-3",
    "title": "",
    "section": "Reviews by year (an aside)",
    "text": "Reviews by year (an aside)\n\n\n\ndf |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park)\n\n\n\n\n# A tibble: 1,000 √ó 8\n# Groups:   Park [3]\n   Review_ID Rating Year_Month Reviewer_Location Review_Text   Park   Year Month\n       &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 305683957      5 2015-08-01 Portugal          I  ve previo‚Ä¶ Cali‚Ä¶  2015     8\n 2 666364898      3 2018-10-01 United States     The Hong Kon‚Ä¶ Hong‚Ä¶  2018    10\n 3 293082325      3 2015-06-01 United States     My wife, my ‚Ä¶ Paris  2015     6\n 4 334650140      1 2015-11-01 United Kingdom    Our family h‚Ä¶ Paris  2015    11\n 5 393553042      3 2016-07-01 United States     HK Disney is‚Ä¶ Hong‚Ä¶  2016     7\n 6 175685909      5 2013-08-01 United Kingdom    Nothing but ‚Ä¶ Paris  2013     8\n 7 150353289      5 2013-01-01 India             Should not m‚Ä¶ Hong‚Ä¶  2013     1\n 8 224797068      5 2014-08-01 United Kingdom    everything  ‚Ä¶ Paris  2014     8\n 9 310708679      5 2015-04-01 United Kingdom    Wow! What a ‚Ä¶ Paris  2015     4\n10 126717664      5 2012-03-01 United States     I loved ever‚Ä¶ Cali‚Ä¶  2012     3\n# ‚Ñπ 990 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-an-aside-4",
    "href": "materials/04-r-text-mining.html#reviews-by-year-an-aside-4",
    "title": "",
    "section": "Reviews by year (an aside)",
    "text": "Reviews by year (an aside)\n\n\n\ndf |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park) |&gt;\n  count(Year)\n\n\n\n\n# A tibble: 29 √ó 3\n# Groups:   Park [3]\n   Park        Year     n\n   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;\n 1 California  2011    24\n 2 California  2012    59\n 3 California  2013    51\n 4 California  2014    63\n 5 California  2015    83\n 6 California  2016    68\n 7 California  2017    45\n 8 California  2018    36\n 9 California  2019    12\n10 Hong Kong   2010     1\n# ‚Ñπ 19 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-an-aside-5",
    "href": "materials/04-r-text-mining.html#reviews-by-year-an-aside-5",
    "title": "",
    "section": "Reviews by year (an aside)",
    "text": "Reviews by year (an aside)\n\n\n\ndf |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park) |&gt;\n  count(Year) |&gt;\n  rename(Ratings = n)\n\n\n\n\n# A tibble: 29 √ó 3\n# Groups:   Park [3]\n   Park        Year Ratings\n   &lt;chr&gt;      &lt;dbl&gt;   &lt;int&gt;\n 1 California  2011      24\n 2 California  2012      59\n 3 California  2013      51\n 4 California  2014      63\n 5 California  2015      83\n 6 California  2016      68\n 7 California  2017      45\n 8 California  2018      36\n 9 California  2019      12\n10 Hong Kong   2010       1\n# ‚Ñπ 19 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-an-aside-6",
    "href": "materials/04-r-text-mining.html#reviews-by-year-an-aside-6",
    "title": "",
    "section": "Reviews by year (an aside)",
    "text": "Reviews by year (an aside)\n\n\n\ndf |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park) |&gt;\n  count(Year) |&gt;\n  rename(Ratings = n) |&gt;\n  pivot_wider(names_from = Park,\n              values_from = Ratings)\n\n\n\n\n# A tibble: 10 √ó 4\n    Year California `Hong Kong` Paris\n   &lt;dbl&gt;      &lt;int&gt;       &lt;int&gt; &lt;int&gt;\n 1  2011         24          10    19\n 2  2012         59          19    32\n 3  2013         51          16    29\n 4  2014         63          32    55\n 5  2015         83          39    53\n 6  2016         68          48    54\n 7  2017         45          43    42\n 8  2018         36          21    31\n 9  2019         12           6     7\n10  2010         NA           1     2"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-by-year-an-aside-7",
    "href": "materials/04-r-text-mining.html#reviews-by-year-an-aside-7",
    "title": "",
    "section": "Reviews by year (an aside)",
    "text": "Reviews by year (an aside)\n\n\n\ndf |&gt;\n  mutate(Year = year(Year_Month),\n         Month = month(Year_Month)) |&gt;\n  group_by(Park) |&gt;\n  count(Year) |&gt;\n  rename(Ratings = n) |&gt;\n  pivot_wider(names_from = Park,\n              values_from = Ratings) |&gt;\n  arrange(desc(Year))\n\n\n\n\n# A tibble: 10 √ó 4\n    Year California `Hong Kong` Paris\n   &lt;dbl&gt;      &lt;int&gt;       &lt;int&gt; &lt;int&gt;\n 1  2019         12           6     7\n 2  2018         36          21    31\n 3  2017         45          43    42\n 4  2016         68          48    54\n 5  2015         83          39    53\n 6  2014         63          32    55\n 7  2013         51          16    29\n 8  2012         59          19    32\n 9  2011         24          10    19\n10  2010         NA           1     2"
  },
  {
    "objectID": "materials/04-r-text-mining.html#what-are-n-grams",
    "href": "materials/04-r-text-mining.html#what-are-n-grams",
    "title": "",
    "section": "What are n-grams?",
    "text": "What are n-grams?\n\nA continuous sequence of n words\nCan be used ‚Äòas is‚Äô, or run through a stemmer to get morphemes\nOffers more context than single words"
  },
  {
    "objectID": "materials/04-r-text-mining.html#libraries",
    "href": "materials/04-r-text-mining.html#libraries",
    "title": "",
    "section": "Libraries",
    "text": "Libraries\n\nAFINN\nbing\nloughran\nnrc\nSentiWordNet\nWordNet"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn",
    "href": "materials/04-r-text-mining.html#afinn",
    "title": "",
    "section": "AFINN",
    "text": "AFINN\n\n\nget_sentiments(lexicon = \"afinn\") |&gt; \n  sample_n(10)\n\n\n# A tibble: 10 √ó 2\n   word           value\n   &lt;chr&gt;          &lt;dbl&gt;\n 1 exclude           -1\n 2 beautifully        3\n 3 whore             -4\n 4 son-of-a-bitch    -5\n 5 gift               2\n 6 promote            1\n 7 inferior          -2\n 8 euphoric           4\n 9 animosity         -2\n10 struggling        -2"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn-example",
    "href": "materials/04-r-text-mining.html#afinn-example",
    "title": "",
    "section": "AFINN example",
    "text": "AFINN example"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn-example-1",
    "href": "materials/04-r-text-mining.html#afinn-example-1",
    "title": "",
    "section": "AFINN example",
    "text": "AFINN example\n\n\n\ntidy_reviews\n\n\n\n\n# A tibble: 45,011 √ó 3\n   Park       linenumber word        \n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;       \n 1 California          1 ve          \n 2 California          1 previously  \n 3 California          1 3           \n 4 California          1 disney      \n 5 California          1 resorts     \n 6 California          1 expectations\n 7 California          1 sky         \n 8 California          1 original    \n 9 California          1 park        \n10 California          1 fulfilled   \n# ‚Ñπ 45,001 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn-example-2",
    "href": "materials/04-r-text-mining.html#afinn-example-2",
    "title": "",
    "section": "AFINN example",
    "text": "AFINN example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park, linenumber)\n\n\n\n\n# A tibble: 45,011 √ó 3\n# Groups:   Park, linenumber [1,000]\n   Park       linenumber word        \n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;       \n 1 California          1 ve          \n 2 California          1 previously  \n 3 California          1 3           \n 4 California          1 disney      \n 5 California          1 resorts     \n 6 California          1 expectations\n 7 California          1 sky         \n 8 California          1 original    \n 9 California          1 park        \n10 California          1 fulfilled   \n# ‚Ñπ 45,001 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn-example-3",
    "href": "materials/04-r-text-mining.html#afinn-example-3",
    "title": "",
    "section": "AFINN example",
    "text": "AFINN example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park, linenumber) |&gt;\n  inner_join(get_sentiments(\"afinn\"))\n\n\n\n\n# A tibble: 5,209 √ó 4\n# Groups:   Park, linenumber [936]\n   Park       linenumber word        value\n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1 California          1 fulfilled       2\n 2 California          1 feeling         1\n 3 California          1 miss           -2\n 4 California          1 attractions     2\n 5 California          1 haunted        -2\n 6 California          2 loved           3\n 7 California          3 excited         3\n 8 California          3 super           3\n 9 California          3 happy           3\n10 California          4 easy            1\n# ‚Ñπ 5,199 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn-example-4",
    "href": "materials/04-r-text-mining.html#afinn-example-4",
    "title": "",
    "section": "AFINN example",
    "text": "AFINN example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park, linenumber) |&gt;\n  inner_join(get_sentiments(\"afinn\")) |&gt;\n  summarise(value = sum(value))\n\n\n\n\n# A tibble: 936 √ó 3\n# Groups:   Park [3]\n   Park       linenumber value\n   &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt;\n 1 California          1     1\n 2 California          2     3\n 3 California          3     9\n 4 California          4     5\n 5 California          5     5\n 6 California          6     5\n 7 California          7     2\n 8 California         10     3\n 9 California         11     5\n10 California         12    10\n# ‚Ñπ 926 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn-example-5",
    "href": "materials/04-r-text-mining.html#afinn-example-5",
    "title": "",
    "section": "AFINN example",
    "text": "AFINN example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park, linenumber) |&gt;\n  inner_join(get_sentiments(\"afinn\")) |&gt;\n  summarise(value = sum(value)) |&gt;\n  ungroup()\n\n\n\n\n# A tibble: 936 √ó 3\n   Park       linenumber value\n   &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt;\n 1 California          1     1\n 2 California          2     3\n 3 California          3     9\n 4 California          4     5\n 5 California          5     5\n 6 California          6     5\n 7 California          7     2\n 8 California         10     3\n 9 California         11     5\n10 California         12    10\n# ‚Ñπ 926 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn-example-6",
    "href": "materials/04-r-text-mining.html#afinn-example-6",
    "title": "",
    "section": "AFINN example",
    "text": "AFINN example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park, linenumber) |&gt;\n  inner_join(get_sentiments(\"afinn\")) |&gt;\n  summarise(value = sum(value)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(linenumber, value, fill = Park))"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn-example-7",
    "href": "materials/04-r-text-mining.html#afinn-example-7",
    "title": "",
    "section": "AFINN example",
    "text": "AFINN example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park, linenumber) |&gt;\n  inner_join(get_sentiments(\"afinn\")) |&gt;\n  summarise(value = sum(value)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(linenumber, value, fill = Park)) +\n  geom_bar(alpha = 0.5, stat = \"identity\", show.legend = FALSE)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#afinn-example-8",
    "href": "materials/04-r-text-mining.html#afinn-example-8",
    "title": "",
    "section": "AFINN example",
    "text": "AFINN example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park, linenumber) |&gt;\n  inner_join(get_sentiments(\"afinn\")) |&gt;\n  summarise(value = sum(value)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(linenumber, value, fill = Park)) +\n  geom_bar(alpha = 0.5, stat = \"identity\", show.legend = FALSE) +\n  facet_wrap(~Park, ncol = 1, scales = \"free_x\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing",
    "href": "materials/04-r-text-mining.html#bing",
    "title": "",
    "section": "bing",
    "text": "bing\n\n\nget_sentiments(lexicon = \"bing\") |&gt; \n  sample_n(10)\n\n\n# A tibble: 10 √ó 2\n   word         sentiment\n   &lt;chr&gt;        &lt;chr&gt;    \n 1 fulfillment  positive \n 2 disillusions negative \n 3 bump         negative \n 4 freezing     negative \n 5 supurb       positive \n 6 chaff        negative \n 7 savagery     negative \n 8 intricate    positive \n 9 drains       negative \n10 prosperous   positive"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example",
    "href": "materials/04-r-text-mining.html#bing-example",
    "title": "",
    "section": "bing example",
    "text": "bing example"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-1",
    "href": "materials/04-r-text-mining.html#bing-example-1",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews\n\n\n\n\n# A tibble: 45,011 √ó 3\n   Park       linenumber word        \n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;       \n 1 California          1 ve          \n 2 California          1 previously  \n 3 California          1 3           \n 4 California          1 disney      \n 5 California          1 resorts     \n 6 California          1 expectations\n 7 California          1 sky         \n 8 California          1 original    \n 9 California          1 park        \n10 California          1 fulfilled   \n# ‚Ñπ 45,001 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-2",
    "href": "materials/04-r-text-mining.html#bing-example-2",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park)\n\n\n\n\n# A tibble: 45,011 √ó 3\n# Groups:   Park [3]\n   Park       linenumber word        \n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;       \n 1 California          1 ve          \n 2 California          1 previously  \n 3 California          1 3           \n 4 California          1 disney      \n 5 California          1 resorts     \n 6 California          1 expectations\n 7 California          1 sky         \n 8 California          1 original    \n 9 California          1 park        \n10 California          1 fulfilled   \n# ‚Ñπ 45,001 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-3",
    "href": "materials/04-r-text-mining.html#bing-example-3",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park) |&gt;\n  inner_join(get_sentiments(\"bing\"))\n\n\n\n\n# A tibble: 6,468 √ó 4\n# Groups:   Park [3]\n   Park       linenumber word        sentiment\n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;    \n 1 California          1 magical     positive \n 2 California          1 miss        negative \n 3 California          1 astonishing positive \n 4 California          2 loved       positive \n 5 California          3 excited     positive \n 6 California          3 super       positive \n 7 California          3 happy       positive \n 8 California          4 easy        positive \n 9 California          4 properly    positive \n10 California          4 fast        positive \n# ‚Ñπ 6,458 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-4",
    "href": "materials/04-r-text-mining.html#bing-example-4",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park) |&gt;\n  inner_join(get_sentiments(\"bing\")) |&gt;\n  count(Park, index = linenumber, sentiment)\n\n\n\n\n# A tibble: 1,588 √ó 4\n# Groups:   Park [3]\n   Park       index sentiment     n\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;     &lt;int&gt;\n 1 California     1 negative      1\n 2 California     1 positive      2\n 3 California     2 positive      1\n 4 California     3 positive      3\n 5 California     4 negative      1\n 6 California     4 positive      4\n 7 California     5 positive      2\n 8 California     6 negative      1\n 9 California     6 positive      4\n10 California     7 positive      1\n# ‚Ñπ 1,578 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-5",
    "href": "materials/04-r-text-mining.html#bing-example-5",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park) |&gt;\n  inner_join(get_sentiments(\"bing\")) |&gt;\n  count(Park, index = linenumber, sentiment) |&gt;\n  ungroup()\n\n\n\n\n# A tibble: 1,588 √ó 4\n   Park       index sentiment     n\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;     &lt;int&gt;\n 1 California     1 negative      1\n 2 California     1 positive      2\n 3 California     2 positive      1\n 4 California     3 positive      3\n 5 California     4 negative      1\n 6 California     4 positive      4\n 7 California     5 positive      2\n 8 California     6 negative      1\n 9 California     6 positive      4\n10 California     7 positive      1\n# ‚Ñπ 1,578 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-6",
    "href": "materials/04-r-text-mining.html#bing-example-6",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park) |&gt;\n  inner_join(get_sentiments(\"bing\")) |&gt;\n  count(Park, index = linenumber, sentiment) |&gt;\n  ungroup() |&gt;\n  pivot_wider(\n    names_from = sentiment,\n    values_from = n,\n    values_fill = 0\n  )\n\n\n\n\n# A tibble: 970 √ó 4\n   Park       index negative positive\n   &lt;chr&gt;      &lt;int&gt;    &lt;int&gt;    &lt;int&gt;\n 1 California     1        1        2\n 2 California     2        0        1\n 3 California     3        0        3\n 4 California     4        1        4\n 5 California     5        0        2\n 6 California     6        1        4\n 7 California     7        0        1\n 8 California     8        1        1\n 9 California    10        0        1\n10 California    11        0        2\n# ‚Ñπ 960 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-7",
    "href": "materials/04-r-text-mining.html#bing-example-7",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park) |&gt;\n  inner_join(get_sentiments(\"bing\")) |&gt;\n  count(Park, index = linenumber, sentiment) |&gt;\n  ungroup() |&gt;\n  pivot_wider(\n    names_from = sentiment,\n    values_from = n,\n    values_fill = 0\n  ) |&gt;\n  mutate(sentiment = positive - negative)\n\n\n\n\n# A tibble: 970 √ó 5\n   Park       index negative positive sentiment\n   &lt;chr&gt;      &lt;int&gt;    &lt;int&gt;    &lt;int&gt;     &lt;int&gt;\n 1 California     1        1        2         1\n 2 California     2        0        1         1\n 3 California     3        0        3         3\n 4 California     4        1        4         3\n 5 California     5        0        2         2\n 6 California     6        1        4         3\n 7 California     7        0        1         1\n 8 California     8        1        1         0\n 9 California    10        0        1         1\n10 California    11        0        2         2\n# ‚Ñπ 960 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-8",
    "href": "materials/04-r-text-mining.html#bing-example-8",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park) |&gt;\n  inner_join(get_sentiments(\"bing\")) |&gt;\n  count(Park, index = linenumber, sentiment) |&gt;\n  ungroup() |&gt;\n  pivot_wider(\n    names_from = sentiment,\n    values_from = n,\n    values_fill = 0\n  ) |&gt;\n  mutate(sentiment = positive - negative) |&gt;\n  ggplot(aes(index, sentiment, fill = Park))"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-9",
    "href": "materials/04-r-text-mining.html#bing-example-9",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park) |&gt;\n  inner_join(get_sentiments(\"bing\")) |&gt;\n  count(Park, index = linenumber, sentiment) |&gt;\n  ungroup() |&gt;\n  pivot_wider(\n    names_from = sentiment,\n    values_from = n,\n    values_fill = 0\n  ) |&gt;\n  mutate(sentiment = positive - negative) |&gt;\n  ggplot(aes(index, sentiment, fill = Park)) +\n  geom_bar(alpha = 0.5, stat = \"identity\", show.legend = FALSE)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#bing-example-10",
    "href": "materials/04-r-text-mining.html#bing-example-10",
    "title": "",
    "section": "bing example",
    "text": "bing example\n\n\n\ntidy_reviews |&gt;\n  group_by(Park) |&gt;\n  inner_join(get_sentiments(\"bing\")) |&gt;\n  count(Park, index = linenumber, sentiment) |&gt;\n  ungroup() |&gt;\n  pivot_wider(\n    names_from = sentiment,\n    values_from = n,\n    values_fill = 0\n  ) |&gt;\n  mutate(sentiment = positive - negative) |&gt;\n  ggplot(aes(index, sentiment, fill = Park)) +\n  geom_bar(alpha = 0.5, stat = \"identity\", show.legend = FALSE) +\n  facet_wrap(~Park, ncol = 1, scales = \"free_x\")"
  },
  {
    "objectID": "materials/04-r-text-mining.html#nrc",
    "href": "materials/04-r-text-mining.html#nrc",
    "title": "",
    "section": "nrc",
    "text": "nrc\n\n\nget_sentiments(lexicon = \"nrc\") |&gt; \n  sample_n(10)\n\n\n# A tibble: 10 √ó 2\n   word          sentiment   \n   &lt;chr&gt;         &lt;chr&gt;       \n 1 deserve       anticipation\n 2 goodly        positive    \n 3 penal         fear        \n 4 litigate      negative    \n 5 bridal        joy         \n 6 reinforcement positive    \n 7 mislead       anger       \n 8 art           surprise    \n 9 disreputable  anger       \n10 abduction     fear"
  },
  {
    "objectID": "materials/04-r-text-mining.html#nrc-example",
    "href": "materials/04-r-text-mining.html#nrc-example",
    "title": "",
    "section": "nrc example",
    "text": "nrc example"
  },
  {
    "objectID": "materials/04-r-text-mining.html#nrc-example-1",
    "href": "materials/04-r-text-mining.html#nrc-example-1",
    "title": "",
    "section": "nrc example",
    "text": "nrc example\n\n\n\ntidy_reviews\n\n\n\n\n# A tibble: 45,011 √ó 3\n   Park       linenumber word        \n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;       \n 1 California          1 ve          \n 2 California          1 previously  \n 3 California          1 3           \n 4 California          1 disney      \n 5 California          1 resorts     \n 6 California          1 expectations\n 7 California          1 sky         \n 8 California          1 original    \n 9 California          1 park        \n10 California          1 fulfilled   \n# ‚Ñπ 45,001 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#nrc-example-2",
    "href": "materials/04-r-text-mining.html#nrc-example-2",
    "title": "",
    "section": "nrc example",
    "text": "nrc example\n\n\n\ntidy_reviews |&gt;\n  right_join(get_sentiments(\"nrc\"),\n             relationship = \"many-to-many\")\n\n\n\n\n# A tibble: 34,430 √ó 4\n   Park       linenumber word    sentiment   \n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;       \n 1 California          1 sky     positive    \n 2 California          1 magical anticipation\n 3 California          1 magical joy         \n 4 California          1 magical positive    \n 5 California          1 magical surprise    \n 6 California          1 feeling anger       \n 7 California          1 feeling anticipation\n 8 California          1 feeling disgust     \n 9 California          1 feeling fear        \n10 California          1 feeling joy         \n# ‚Ñπ 34,420 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#nrc-example-3",
    "href": "materials/04-r-text-mining.html#nrc-example-3",
    "title": "",
    "section": "nrc example",
    "text": "nrc example\n\n\n\ntidy_reviews |&gt;\n  right_join(get_sentiments(\"nrc\"),\n             relationship = \"many-to-many\") |&gt;\n  filter(!is.na(sentiment))\n\n\n\n\n# A tibble: 34,430 √ó 4\n   Park       linenumber word    sentiment   \n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;       \n 1 California          1 sky     positive    \n 2 California          1 magical anticipation\n 3 California          1 magical joy         \n 4 California          1 magical positive    \n 5 California          1 magical surprise    \n 6 California          1 feeling anger       \n 7 California          1 feeling anticipation\n 8 California          1 feeling disgust     \n 9 California          1 feeling fear        \n10 California          1 feeling joy         \n# ‚Ñπ 34,420 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#nrc-example-4",
    "href": "materials/04-r-text-mining.html#nrc-example-4",
    "title": "",
    "section": "nrc example",
    "text": "nrc example\n\n\n\ntidy_reviews |&gt;\n  right_join(get_sentiments(\"nrc\"),\n             relationship = \"many-to-many\") |&gt;\n  filter(!is.na(sentiment)) |&gt;\n  count(sentiment, sort = TRUE)\n\n\n\n\n# A tibble: 10 √ó 2\n   sentiment        n\n   &lt;chr&gt;        &lt;int&gt;\n 1 positive      7681\n 2 negative      5222\n 3 anticipation  4310\n 4 joy           3677\n 5 trust         3563\n 6 fear          2591\n 7 sadness       2036\n 8 surprise      1921\n 9 anger         1917\n10 disgust       1512"
  },
  {
    "objectID": "materials/04-r-text-mining.html#questions",
    "href": "materials/04-r-text-mining.html#questions",
    "title": "",
    "section": "Questions?",
    "text": "Questions?\n\n\nSource: giphy\nIntroduction to Text Mining"
  },
  {
    "objectID": "materials/01-introduction.html#text-mining-with-r",
    "href": "materials/01-introduction.html#text-mining-with-r",
    "title": "",
    "section": "Text Mining with R",
    "text": "Text Mining with R\nMuch of what we cover today follows the structure of Text Mining with R, a wonderful resource by Julia Silge & David Robinson."
  },
  {
    "objectID": "materials/01-introduction.html#questions",
    "href": "materials/01-introduction.html#questions",
    "title": "",
    "section": "Questions?",
    "text": "Questions?\n\nSource: giphy"
  },
  {
    "objectID": "materials/03-intro-to-r.html#setup",
    "href": "materials/03-intro-to-r.html#setup",
    "title": "",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#lexicons",
    "href": "materials/04-r-text-mining.html#lexicons",
    "title": "",
    "section": "Lexicons",
    "text": "Lexicons\n\nAFINN\nbing\nloughran\nnrc\nSentiWordNet\nWordNet"
  },
  {
    "objectID": "materials/04-r-text-mining.html#most-frequent-terms",
    "href": "materials/04-r-text-mining.html#most-frequent-terms",
    "title": "",
    "section": "Most frequent terms",
    "text": "Most frequent terms\n\n\ntidy_bigrams |&gt; \n  count(word1, word2, sort = TRUE)\n\n\n# A tibble: 9,691 √ó 3\n   word1      word2        n\n   &lt;chr&gt;      &lt;chr&gt;    &lt;int&gt;\n 1 fast       pass       102\n 2 disneyland paris       69\n 3 disney     world       65\n 4 space      mountain    65\n 5 hong       kong        64\n 6 main       street      52\n 7 theme      park        52\n 8 fast       passes      48\n 9 indiana    jones       44\n10 thunder    mountain    42\n# ‚Ñπ 9,681 more rows"
  },
  {
    "objectID": "materials/04-r-text-mining.html#most-common-words-by-park",
    "href": "materials/04-r-text-mining.html#most-common-words-by-park",
    "title": "",
    "section": "Most common words by park",
    "text": "Most common words by park\n\n\nreview_words &lt;- reviews |&gt; \n  unnest_tokens(word, text) |&gt; \n  count(Park, word, sort = TRUE)\n\nhead(review_words)\n\n\n# A tibble: 6 √ó 3\n  Park       word      n\n  &lt;chr&gt;      &lt;chr&gt; &lt;int&gt;\n1 Paris      the    3025\n2 California the    2603\n3 Paris      and    1654\n4 California and    1616\n5 Paris      to     1508\n6 California to     1475"
  },
  {
    "objectID": "materials/04-r-text-mining.html#total-words-per-park",
    "href": "materials/04-r-text-mining.html#total-words-per-park",
    "title": "",
    "section": "Total words per park",
    "text": "Total words per park\n\n\ntotal_words &lt;- review_words |&gt; \n  group_by(Park) |&gt; \n  summarize(Total = sum(n))\n\ntotal_words\n\n\n# A tibble: 3 √ó 2\n  Park       Total\n  &lt;chr&gt;      &lt;int&gt;\n1 California 48119\n2 Hong Kong  24963\n3 Paris      51650"
  },
  {
    "objectID": "materials/04-r-text-mining.html#join-the-data-together",
    "href": "materials/04-r-text-mining.html#join-the-data-together",
    "title": "",
    "section": "Join the data together",
    "text": "Join the data together\n\n\nreview_words &lt;- left_join(review_words, \n                          total_words)\n\nhead(review_words)\n\n\n# A tibble: 6 √ó 4\n  Park       word      n Total\n  &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt;\n1 Paris      the    3025 51650\n2 California the    2603 48119\n3 Paris      and    1654 51650\n4 California and    1616 48119\n5 Paris      to     1508 51650\n6 California to     1475 48119"
  },
  {
    "objectID": "materials/04-r-text-mining.html#calculate-term-frequency",
    "href": "materials/04-r-text-mining.html#calculate-term-frequency",
    "title": "",
    "section": "Calculate term frequency",
    "text": "Calculate term frequency\n\n\nfreq_by_rank &lt;- review_words |&gt; \n  group_by(Park) |&gt; \n  mutate(rank = row_number(),\n         freq = n/Total) |&gt; \n  ungroup()\n\nkableExtra::kable(head(freq_by_rank))\n\n\n\n\n\nPark\nword\nn\nTotal\nrank\nfreq\n\n\n\n\nParis\nthe\n3025\n51650\n1\n0.0585673\n\n\nCalifornia\nthe\n2603\n48119\n1\n0.0540951\n\n\nParis\nand\n1654\n51650\n2\n0.0320232\n\n\nCalifornia\nand\n1616\n48119\n2\n0.0335834\n\n\nParis\nto\n1508\n51650\n3\n0.0291965\n\n\nCalifornia\nto\n1475\n48119\n3\n0.0306532"
  },
  {
    "objectID": "materials/04-r-text-mining.html#calculate-tf-idf",
    "href": "materials/04-r-text-mining.html#calculate-tf-idf",
    "title": "",
    "section": "Calculate tf-idf",
    "text": "Calculate tf-idf\n\n\nreview_tf_idf &lt;- review_words |&gt; \n  bind_tf_idf(word, Park, n)\n\nkableExtra::kable(head(review_tf_idf))\n\n\n\n\n\nPark\nword\nn\nTotal\ntf\nidf\ntf_idf\n\n\n\n\nParis\nthe\n3025\n51650\n0.0585673\n0\n0\n\n\nCalifornia\nthe\n2603\n48119\n0.0540951\n0\n0\n\n\nParis\nand\n1654\n51650\n0.0320232\n0\n0\n\n\nCalifornia\nand\n1616\n48119\n0.0335834\n0\n0\n\n\nParis\nto\n1508\n51650\n0.0291965\n0\n0\n\n\nCalifornia\nto\n1475\n48119\n0.0306532\n0\n0"
  },
  {
    "objectID": "materials/04-r-text-mining.html#reviews-with-high-tf-idf",
    "href": "materials/04-r-text-mining.html#reviews-with-high-tf-idf",
    "title": "",
    "section": "Reviews with high tf-idf",
    "text": "Reviews with high tf-idf\n\n\nreview_tf_idf |&gt; \n  select(-Total) |&gt; \n  arrange(desc(tf_idf)) |&gt; \n  head() |&gt; \n  kableExtra::kable()\n\n\n\n\n\nPark\nword\nn\ntf\nidf\ntf_idf\n\n\n\n\nHong Kong\nhk\n48\n0.0019228\n0.4054651\n0.0007796\n\n\nHong Kong\nmtr\n17\n0.0006810\n1.0986123\n0.0007482\n\n\nCalifornia\nfantasmic\n27\n0.0005611\n1.0986123\n0.0006164\n\n\nHong Kong\nhkd\n14\n0.0005608\n1.0986123\n0.0006161\n\n\nCalifornia\nsplash\n26\n0.0005403\n1.0986123\n0.0005936\n\n\nHong Kong\nmystic\n13\n0.0005208\n1.0986123\n0.0005721"
  },
  {
    "objectID": "materials/04-r-text-mining.html#visualize-high-tf-idf-words",
    "href": "materials/04-r-text-mining.html#visualize-high-tf-idf-words",
    "title": "",
    "section": "Visualize high tf-idf words",
    "text": "Visualize high tf-idf words\n\nreview_tf_idf |&gt; \n  group_by(Park) |&gt; \n  slice_max(tf_idf, n = 10) |&gt; \n  ungroup() |&gt; \n  ggplot(aes(tf_idf, fct_reorder(word, tf_idf), fill = Park)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~Park, ncol = 1, scales = \"free\") +\n  labs(x = \"tf-idf\", y = NULL)"
  },
  {
    "objectID": "materials/04-r-text-mining.html#visualize-high-tf-idf-words-output",
    "href": "materials/04-r-text-mining.html#visualize-high-tf-idf-words-output",
    "title": "",
    "section": "Visualize high tf-idf words",
    "text": "Visualize high tf-idf words"
  },
  {
    "objectID": "materials/02-excel.html#word-counts-1",
    "href": "materials/02-excel.html#word-counts-1",
    "title": "",
    "section": "Word Counts",
    "text": "Word Counts\n=LEN(TRIM(A1))-LEN(SUBSTITUTE(A1,\" \",\"\"))+1\n\nLEN(A1) counts the total number of characters in A1\nTRIM removes any leading, trailing, and extra spaces (except single spaces between words)\nSUBSTITUTE(A1,‚Äù ‚Äú,‚Äù‚Äù) removes all spaces from the text\nLEN(SUBSTITUTE(A1,‚Äù ‚Äú,‚Äú‚Äù) ‚Äì counts the total number of characters in the text that have no spaces\nLEN(A1)-LEN(SUBSTITUTE(A1,‚Äù ‚Äú,‚Äú‚Äù)) subtracts the text length without spaces from the text length with spaces\n=LEN(A1)-LEN(SUBSTITUTE(A1,‚Äù ‚Äú,‚Äú‚Äù))+1 add 1 to the result as the number of spaces is one less than the total number of words"
  },
  {
    "objectID": "materials/02-excel.html#vlookup-1",
    "href": "materials/02-excel.html#vlookup-1",
    "title": "",
    "section": "VLOOKUP",
    "text": "VLOOKUP\n=VLOOKUP(A1, '[WorkbookName.xlsx]SheetName'!A1:B10,2,FALSE)\n\nA1 the value you are looking up\n'[WorkbookName.xlsx]SheetName'!A1:B10 the range where you are looking for a match\n2 the column the match is found in\nFALSE indicates whether you want to match exactly (FALSE) or approximately (TRUE)"
  },
  {
    "objectID": "materials/02-excel.html#keyword-searches-1",
    "href": "materials/02-excel.html#keyword-searches-1",
    "title": "",
    "section": "Keyword Searches",
    "text": "Keyword Searches\n=IF(SUMPRODUCT(--ISNUMBER(SEARCH(keyword,A2)))&gt;0,\"Yes\",\"No\")\n\nkeyword is a named range of the words you are searching for\nA2 is the cell in the column you‚Äôre searching in\nSEARCH(keyword,A2) returns the start number of the found string as a number\nISNUMBER(SEARCH(keyword,A2)) converts items to either TRUE or FALSE\n--ISNUMBER(SEARCH(keyword,A2)) coerces the TRUE and FALSE values to 1 and 0\nSUMPRODUCT sums the 1‚Äôs and 0‚Äôs\nIF(SUMPRODUCT...)&gt;0,\"Yes\",\"No\") if the result of SUMPRODUCT is greater than 1, then the formula returns ‚ÄúYes‚Äù (or any other result you want)"
  },
  {
    "objectID": "index.html#workshop-link",
    "href": "index.html#workshop-link",
    "title": "Apra PD 2023 Workshop",
    "section": "Workshop Link",
    "text": "Workshop Link\nWorkshop attendees may click this link to join today‚Äôs Posit Cloud workspace. Computing resources have been allocated only for workshop attendees."
  },
  {
    "objectID": "materials/05-python-text-mining.html",
    "href": "materials/05-python-text-mining.html",
    "title": "",
    "section": "",
    "text": "# General purpose\nfrom collections import Counter\nimport numpy as np\nimport os\nimport warnings\nwarnings.filterwarnings(action = 'ignore')\n\n# Data wrangling\nimport pandas as pd  # similar to tidyverse\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\n\n\nimport nltk\nimport string\n\nnltk.download(\"omw-1.4\")\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')\n\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tokenize import WordPunctTokenizer\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nfrom textblob import TextBlob\nfrom textblob import Word"
  }
]